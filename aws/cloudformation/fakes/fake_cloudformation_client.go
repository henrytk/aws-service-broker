// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cloudformation"
	"github.com/aws/aws-sdk-go/service/cloudformation/cloudformationiface"
)

type FakeCloudFormationAPI struct {
	CancelUpdateStackStub        func(*cloudformation.CancelUpdateStackInput) (*cloudformation.CancelUpdateStackOutput, error)
	cancelUpdateStackMutex       sync.RWMutex
	cancelUpdateStackArgsForCall []struct {
		arg1 *cloudformation.CancelUpdateStackInput
	}
	cancelUpdateStackReturns struct {
		result1 *cloudformation.CancelUpdateStackOutput
		result2 error
	}
	cancelUpdateStackReturnsOnCall map[int]struct {
		result1 *cloudformation.CancelUpdateStackOutput
		result2 error
	}
	CancelUpdateStackWithContextStub        func(aws.Context, *cloudformation.CancelUpdateStackInput, ...request.Option) (*cloudformation.CancelUpdateStackOutput, error)
	cancelUpdateStackWithContextMutex       sync.RWMutex
	cancelUpdateStackWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.CancelUpdateStackInput
		arg3 []request.Option
	}
	cancelUpdateStackWithContextReturns struct {
		result1 *cloudformation.CancelUpdateStackOutput
		result2 error
	}
	cancelUpdateStackWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.CancelUpdateStackOutput
		result2 error
	}
	CancelUpdateStackRequestStub        func(*cloudformation.CancelUpdateStackInput) (*request.Request, *cloudformation.CancelUpdateStackOutput)
	cancelUpdateStackRequestMutex       sync.RWMutex
	cancelUpdateStackRequestArgsForCall []struct {
		arg1 *cloudformation.CancelUpdateStackInput
	}
	cancelUpdateStackRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.CancelUpdateStackOutput
	}
	cancelUpdateStackRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.CancelUpdateStackOutput
	}
	ContinueUpdateRollbackStub        func(*cloudformation.ContinueUpdateRollbackInput) (*cloudformation.ContinueUpdateRollbackOutput, error)
	continueUpdateRollbackMutex       sync.RWMutex
	continueUpdateRollbackArgsForCall []struct {
		arg1 *cloudformation.ContinueUpdateRollbackInput
	}
	continueUpdateRollbackReturns struct {
		result1 *cloudformation.ContinueUpdateRollbackOutput
		result2 error
	}
	continueUpdateRollbackReturnsOnCall map[int]struct {
		result1 *cloudformation.ContinueUpdateRollbackOutput
		result2 error
	}
	ContinueUpdateRollbackWithContextStub        func(aws.Context, *cloudformation.ContinueUpdateRollbackInput, ...request.Option) (*cloudformation.ContinueUpdateRollbackOutput, error)
	continueUpdateRollbackWithContextMutex       sync.RWMutex
	continueUpdateRollbackWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.ContinueUpdateRollbackInput
		arg3 []request.Option
	}
	continueUpdateRollbackWithContextReturns struct {
		result1 *cloudformation.ContinueUpdateRollbackOutput
		result2 error
	}
	continueUpdateRollbackWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.ContinueUpdateRollbackOutput
		result2 error
	}
	ContinueUpdateRollbackRequestStub        func(*cloudformation.ContinueUpdateRollbackInput) (*request.Request, *cloudformation.ContinueUpdateRollbackOutput)
	continueUpdateRollbackRequestMutex       sync.RWMutex
	continueUpdateRollbackRequestArgsForCall []struct {
		arg1 *cloudformation.ContinueUpdateRollbackInput
	}
	continueUpdateRollbackRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.ContinueUpdateRollbackOutput
	}
	continueUpdateRollbackRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.ContinueUpdateRollbackOutput
	}
	CreateChangeSetStub        func(*cloudformation.CreateChangeSetInput) (*cloudformation.CreateChangeSetOutput, error)
	createChangeSetMutex       sync.RWMutex
	createChangeSetArgsForCall []struct {
		arg1 *cloudformation.CreateChangeSetInput
	}
	createChangeSetReturns struct {
		result1 *cloudformation.CreateChangeSetOutput
		result2 error
	}
	createChangeSetReturnsOnCall map[int]struct {
		result1 *cloudformation.CreateChangeSetOutput
		result2 error
	}
	CreateChangeSetWithContextStub        func(aws.Context, *cloudformation.CreateChangeSetInput, ...request.Option) (*cloudformation.CreateChangeSetOutput, error)
	createChangeSetWithContextMutex       sync.RWMutex
	createChangeSetWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.CreateChangeSetInput
		arg3 []request.Option
	}
	createChangeSetWithContextReturns struct {
		result1 *cloudformation.CreateChangeSetOutput
		result2 error
	}
	createChangeSetWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.CreateChangeSetOutput
		result2 error
	}
	CreateChangeSetRequestStub        func(*cloudformation.CreateChangeSetInput) (*request.Request, *cloudformation.CreateChangeSetOutput)
	createChangeSetRequestMutex       sync.RWMutex
	createChangeSetRequestArgsForCall []struct {
		arg1 *cloudformation.CreateChangeSetInput
	}
	createChangeSetRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.CreateChangeSetOutput
	}
	createChangeSetRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.CreateChangeSetOutput
	}
	CreateStackStub        func(*cloudformation.CreateStackInput) (*cloudformation.CreateStackOutput, error)
	createStackMutex       sync.RWMutex
	createStackArgsForCall []struct {
		arg1 *cloudformation.CreateStackInput
	}
	createStackReturns struct {
		result1 *cloudformation.CreateStackOutput
		result2 error
	}
	createStackReturnsOnCall map[int]struct {
		result1 *cloudformation.CreateStackOutput
		result2 error
	}
	CreateStackWithContextStub        func(aws.Context, *cloudformation.CreateStackInput, ...request.Option) (*cloudformation.CreateStackOutput, error)
	createStackWithContextMutex       sync.RWMutex
	createStackWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.CreateStackInput
		arg3 []request.Option
	}
	createStackWithContextReturns struct {
		result1 *cloudformation.CreateStackOutput
		result2 error
	}
	createStackWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.CreateStackOutput
		result2 error
	}
	CreateStackRequestStub        func(*cloudformation.CreateStackInput) (*request.Request, *cloudformation.CreateStackOutput)
	createStackRequestMutex       sync.RWMutex
	createStackRequestArgsForCall []struct {
		arg1 *cloudformation.CreateStackInput
	}
	createStackRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.CreateStackOutput
	}
	createStackRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.CreateStackOutput
	}
	CreateStackInstancesStub        func(*cloudformation.CreateStackInstancesInput) (*cloudformation.CreateStackInstancesOutput, error)
	createStackInstancesMutex       sync.RWMutex
	createStackInstancesArgsForCall []struct {
		arg1 *cloudformation.CreateStackInstancesInput
	}
	createStackInstancesReturns struct {
		result1 *cloudformation.CreateStackInstancesOutput
		result2 error
	}
	createStackInstancesReturnsOnCall map[int]struct {
		result1 *cloudformation.CreateStackInstancesOutput
		result2 error
	}
	CreateStackInstancesWithContextStub        func(aws.Context, *cloudformation.CreateStackInstancesInput, ...request.Option) (*cloudformation.CreateStackInstancesOutput, error)
	createStackInstancesWithContextMutex       sync.RWMutex
	createStackInstancesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.CreateStackInstancesInput
		arg3 []request.Option
	}
	createStackInstancesWithContextReturns struct {
		result1 *cloudformation.CreateStackInstancesOutput
		result2 error
	}
	createStackInstancesWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.CreateStackInstancesOutput
		result2 error
	}
	CreateStackInstancesRequestStub        func(*cloudformation.CreateStackInstancesInput) (*request.Request, *cloudformation.CreateStackInstancesOutput)
	createStackInstancesRequestMutex       sync.RWMutex
	createStackInstancesRequestArgsForCall []struct {
		arg1 *cloudformation.CreateStackInstancesInput
	}
	createStackInstancesRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.CreateStackInstancesOutput
	}
	createStackInstancesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.CreateStackInstancesOutput
	}
	CreateStackSetStub        func(*cloudformation.CreateStackSetInput) (*cloudformation.CreateStackSetOutput, error)
	createStackSetMutex       sync.RWMutex
	createStackSetArgsForCall []struct {
		arg1 *cloudformation.CreateStackSetInput
	}
	createStackSetReturns struct {
		result1 *cloudformation.CreateStackSetOutput
		result2 error
	}
	createStackSetReturnsOnCall map[int]struct {
		result1 *cloudformation.CreateStackSetOutput
		result2 error
	}
	CreateStackSetWithContextStub        func(aws.Context, *cloudformation.CreateStackSetInput, ...request.Option) (*cloudformation.CreateStackSetOutput, error)
	createStackSetWithContextMutex       sync.RWMutex
	createStackSetWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.CreateStackSetInput
		arg3 []request.Option
	}
	createStackSetWithContextReturns struct {
		result1 *cloudformation.CreateStackSetOutput
		result2 error
	}
	createStackSetWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.CreateStackSetOutput
		result2 error
	}
	CreateStackSetRequestStub        func(*cloudformation.CreateStackSetInput) (*request.Request, *cloudformation.CreateStackSetOutput)
	createStackSetRequestMutex       sync.RWMutex
	createStackSetRequestArgsForCall []struct {
		arg1 *cloudformation.CreateStackSetInput
	}
	createStackSetRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.CreateStackSetOutput
	}
	createStackSetRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.CreateStackSetOutput
	}
	DeleteChangeSetStub        func(*cloudformation.DeleteChangeSetInput) (*cloudformation.DeleteChangeSetOutput, error)
	deleteChangeSetMutex       sync.RWMutex
	deleteChangeSetArgsForCall []struct {
		arg1 *cloudformation.DeleteChangeSetInput
	}
	deleteChangeSetReturns struct {
		result1 *cloudformation.DeleteChangeSetOutput
		result2 error
	}
	deleteChangeSetReturnsOnCall map[int]struct {
		result1 *cloudformation.DeleteChangeSetOutput
		result2 error
	}
	DeleteChangeSetWithContextStub        func(aws.Context, *cloudformation.DeleteChangeSetInput, ...request.Option) (*cloudformation.DeleteChangeSetOutput, error)
	deleteChangeSetWithContextMutex       sync.RWMutex
	deleteChangeSetWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.DeleteChangeSetInput
		arg3 []request.Option
	}
	deleteChangeSetWithContextReturns struct {
		result1 *cloudformation.DeleteChangeSetOutput
		result2 error
	}
	deleteChangeSetWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.DeleteChangeSetOutput
		result2 error
	}
	DeleteChangeSetRequestStub        func(*cloudformation.DeleteChangeSetInput) (*request.Request, *cloudformation.DeleteChangeSetOutput)
	deleteChangeSetRequestMutex       sync.RWMutex
	deleteChangeSetRequestArgsForCall []struct {
		arg1 *cloudformation.DeleteChangeSetInput
	}
	deleteChangeSetRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.DeleteChangeSetOutput
	}
	deleteChangeSetRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.DeleteChangeSetOutput
	}
	DeleteStackStub        func(*cloudformation.DeleteStackInput) (*cloudformation.DeleteStackOutput, error)
	deleteStackMutex       sync.RWMutex
	deleteStackArgsForCall []struct {
		arg1 *cloudformation.DeleteStackInput
	}
	deleteStackReturns struct {
		result1 *cloudformation.DeleteStackOutput
		result2 error
	}
	deleteStackReturnsOnCall map[int]struct {
		result1 *cloudformation.DeleteStackOutput
		result2 error
	}
	DeleteStackWithContextStub        func(aws.Context, *cloudformation.DeleteStackInput, ...request.Option) (*cloudformation.DeleteStackOutput, error)
	deleteStackWithContextMutex       sync.RWMutex
	deleteStackWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.DeleteStackInput
		arg3 []request.Option
	}
	deleteStackWithContextReturns struct {
		result1 *cloudformation.DeleteStackOutput
		result2 error
	}
	deleteStackWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.DeleteStackOutput
		result2 error
	}
	DeleteStackRequestStub        func(*cloudformation.DeleteStackInput) (*request.Request, *cloudformation.DeleteStackOutput)
	deleteStackRequestMutex       sync.RWMutex
	deleteStackRequestArgsForCall []struct {
		arg1 *cloudformation.DeleteStackInput
	}
	deleteStackRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.DeleteStackOutput
	}
	deleteStackRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.DeleteStackOutput
	}
	DeleteStackInstancesStub        func(*cloudformation.DeleteStackInstancesInput) (*cloudformation.DeleteStackInstancesOutput, error)
	deleteStackInstancesMutex       sync.RWMutex
	deleteStackInstancesArgsForCall []struct {
		arg1 *cloudformation.DeleteStackInstancesInput
	}
	deleteStackInstancesReturns struct {
		result1 *cloudformation.DeleteStackInstancesOutput
		result2 error
	}
	deleteStackInstancesReturnsOnCall map[int]struct {
		result1 *cloudformation.DeleteStackInstancesOutput
		result2 error
	}
	DeleteStackInstancesWithContextStub        func(aws.Context, *cloudformation.DeleteStackInstancesInput, ...request.Option) (*cloudformation.DeleteStackInstancesOutput, error)
	deleteStackInstancesWithContextMutex       sync.RWMutex
	deleteStackInstancesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.DeleteStackInstancesInput
		arg3 []request.Option
	}
	deleteStackInstancesWithContextReturns struct {
		result1 *cloudformation.DeleteStackInstancesOutput
		result2 error
	}
	deleteStackInstancesWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.DeleteStackInstancesOutput
		result2 error
	}
	DeleteStackInstancesRequestStub        func(*cloudformation.DeleteStackInstancesInput) (*request.Request, *cloudformation.DeleteStackInstancesOutput)
	deleteStackInstancesRequestMutex       sync.RWMutex
	deleteStackInstancesRequestArgsForCall []struct {
		arg1 *cloudformation.DeleteStackInstancesInput
	}
	deleteStackInstancesRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.DeleteStackInstancesOutput
	}
	deleteStackInstancesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.DeleteStackInstancesOutput
	}
	DeleteStackSetStub        func(*cloudformation.DeleteStackSetInput) (*cloudformation.DeleteStackSetOutput, error)
	deleteStackSetMutex       sync.RWMutex
	deleteStackSetArgsForCall []struct {
		arg1 *cloudformation.DeleteStackSetInput
	}
	deleteStackSetReturns struct {
		result1 *cloudformation.DeleteStackSetOutput
		result2 error
	}
	deleteStackSetReturnsOnCall map[int]struct {
		result1 *cloudformation.DeleteStackSetOutput
		result2 error
	}
	DeleteStackSetWithContextStub        func(aws.Context, *cloudformation.DeleteStackSetInput, ...request.Option) (*cloudformation.DeleteStackSetOutput, error)
	deleteStackSetWithContextMutex       sync.RWMutex
	deleteStackSetWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.DeleteStackSetInput
		arg3 []request.Option
	}
	deleteStackSetWithContextReturns struct {
		result1 *cloudformation.DeleteStackSetOutput
		result2 error
	}
	deleteStackSetWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.DeleteStackSetOutput
		result2 error
	}
	DeleteStackSetRequestStub        func(*cloudformation.DeleteStackSetInput) (*request.Request, *cloudformation.DeleteStackSetOutput)
	deleteStackSetRequestMutex       sync.RWMutex
	deleteStackSetRequestArgsForCall []struct {
		arg1 *cloudformation.DeleteStackSetInput
	}
	deleteStackSetRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.DeleteStackSetOutput
	}
	deleteStackSetRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.DeleteStackSetOutput
	}
	DescribeAccountLimitsStub        func(*cloudformation.DescribeAccountLimitsInput) (*cloudformation.DescribeAccountLimitsOutput, error)
	describeAccountLimitsMutex       sync.RWMutex
	describeAccountLimitsArgsForCall []struct {
		arg1 *cloudformation.DescribeAccountLimitsInput
	}
	describeAccountLimitsReturns struct {
		result1 *cloudformation.DescribeAccountLimitsOutput
		result2 error
	}
	describeAccountLimitsReturnsOnCall map[int]struct {
		result1 *cloudformation.DescribeAccountLimitsOutput
		result2 error
	}
	DescribeAccountLimitsWithContextStub        func(aws.Context, *cloudformation.DescribeAccountLimitsInput, ...request.Option) (*cloudformation.DescribeAccountLimitsOutput, error)
	describeAccountLimitsWithContextMutex       sync.RWMutex
	describeAccountLimitsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeAccountLimitsInput
		arg3 []request.Option
	}
	describeAccountLimitsWithContextReturns struct {
		result1 *cloudformation.DescribeAccountLimitsOutput
		result2 error
	}
	describeAccountLimitsWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.DescribeAccountLimitsOutput
		result2 error
	}
	DescribeAccountLimitsRequestStub        func(*cloudformation.DescribeAccountLimitsInput) (*request.Request, *cloudformation.DescribeAccountLimitsOutput)
	describeAccountLimitsRequestMutex       sync.RWMutex
	describeAccountLimitsRequestArgsForCall []struct {
		arg1 *cloudformation.DescribeAccountLimitsInput
	}
	describeAccountLimitsRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.DescribeAccountLimitsOutput
	}
	describeAccountLimitsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.DescribeAccountLimitsOutput
	}
	DescribeChangeSetStub        func(*cloudformation.DescribeChangeSetInput) (*cloudformation.DescribeChangeSetOutput, error)
	describeChangeSetMutex       sync.RWMutex
	describeChangeSetArgsForCall []struct {
		arg1 *cloudformation.DescribeChangeSetInput
	}
	describeChangeSetReturns struct {
		result1 *cloudformation.DescribeChangeSetOutput
		result2 error
	}
	describeChangeSetReturnsOnCall map[int]struct {
		result1 *cloudformation.DescribeChangeSetOutput
		result2 error
	}
	DescribeChangeSetWithContextStub        func(aws.Context, *cloudformation.DescribeChangeSetInput, ...request.Option) (*cloudformation.DescribeChangeSetOutput, error)
	describeChangeSetWithContextMutex       sync.RWMutex
	describeChangeSetWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeChangeSetInput
		arg3 []request.Option
	}
	describeChangeSetWithContextReturns struct {
		result1 *cloudformation.DescribeChangeSetOutput
		result2 error
	}
	describeChangeSetWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.DescribeChangeSetOutput
		result2 error
	}
	DescribeChangeSetRequestStub        func(*cloudformation.DescribeChangeSetInput) (*request.Request, *cloudformation.DescribeChangeSetOutput)
	describeChangeSetRequestMutex       sync.RWMutex
	describeChangeSetRequestArgsForCall []struct {
		arg1 *cloudformation.DescribeChangeSetInput
	}
	describeChangeSetRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.DescribeChangeSetOutput
	}
	describeChangeSetRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.DescribeChangeSetOutput
	}
	DescribeStackEventsStub        func(*cloudformation.DescribeStackEventsInput) (*cloudformation.DescribeStackEventsOutput, error)
	describeStackEventsMutex       sync.RWMutex
	describeStackEventsArgsForCall []struct {
		arg1 *cloudformation.DescribeStackEventsInput
	}
	describeStackEventsReturns struct {
		result1 *cloudformation.DescribeStackEventsOutput
		result2 error
	}
	describeStackEventsReturnsOnCall map[int]struct {
		result1 *cloudformation.DescribeStackEventsOutput
		result2 error
	}
	DescribeStackEventsWithContextStub        func(aws.Context, *cloudformation.DescribeStackEventsInput, ...request.Option) (*cloudformation.DescribeStackEventsOutput, error)
	describeStackEventsWithContextMutex       sync.RWMutex
	describeStackEventsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeStackEventsInput
		arg3 []request.Option
	}
	describeStackEventsWithContextReturns struct {
		result1 *cloudformation.DescribeStackEventsOutput
		result2 error
	}
	describeStackEventsWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.DescribeStackEventsOutput
		result2 error
	}
	DescribeStackEventsRequestStub        func(*cloudformation.DescribeStackEventsInput) (*request.Request, *cloudformation.DescribeStackEventsOutput)
	describeStackEventsRequestMutex       sync.RWMutex
	describeStackEventsRequestArgsForCall []struct {
		arg1 *cloudformation.DescribeStackEventsInput
	}
	describeStackEventsRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.DescribeStackEventsOutput
	}
	describeStackEventsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.DescribeStackEventsOutput
	}
	DescribeStackEventsPagesStub        func(*cloudformation.DescribeStackEventsInput, func(*cloudformation.DescribeStackEventsOutput, bool) bool) error
	describeStackEventsPagesMutex       sync.RWMutex
	describeStackEventsPagesArgsForCall []struct {
		arg1 *cloudformation.DescribeStackEventsInput
		arg2 func(*cloudformation.DescribeStackEventsOutput, bool) bool
	}
	describeStackEventsPagesReturns struct {
		result1 error
	}
	describeStackEventsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeStackEventsPagesWithContextStub        func(aws.Context, *cloudformation.DescribeStackEventsInput, func(*cloudformation.DescribeStackEventsOutput, bool) bool, ...request.Option) error
	describeStackEventsPagesWithContextMutex       sync.RWMutex
	describeStackEventsPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeStackEventsInput
		arg3 func(*cloudformation.DescribeStackEventsOutput, bool) bool
		arg4 []request.Option
	}
	describeStackEventsPagesWithContextReturns struct {
		result1 error
	}
	describeStackEventsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeStackInstanceStub        func(*cloudformation.DescribeStackInstanceInput) (*cloudformation.DescribeStackInstanceOutput, error)
	describeStackInstanceMutex       sync.RWMutex
	describeStackInstanceArgsForCall []struct {
		arg1 *cloudformation.DescribeStackInstanceInput
	}
	describeStackInstanceReturns struct {
		result1 *cloudformation.DescribeStackInstanceOutput
		result2 error
	}
	describeStackInstanceReturnsOnCall map[int]struct {
		result1 *cloudformation.DescribeStackInstanceOutput
		result2 error
	}
	DescribeStackInstanceWithContextStub        func(aws.Context, *cloudformation.DescribeStackInstanceInput, ...request.Option) (*cloudformation.DescribeStackInstanceOutput, error)
	describeStackInstanceWithContextMutex       sync.RWMutex
	describeStackInstanceWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeStackInstanceInput
		arg3 []request.Option
	}
	describeStackInstanceWithContextReturns struct {
		result1 *cloudformation.DescribeStackInstanceOutput
		result2 error
	}
	describeStackInstanceWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.DescribeStackInstanceOutput
		result2 error
	}
	DescribeStackInstanceRequestStub        func(*cloudformation.DescribeStackInstanceInput) (*request.Request, *cloudformation.DescribeStackInstanceOutput)
	describeStackInstanceRequestMutex       sync.RWMutex
	describeStackInstanceRequestArgsForCall []struct {
		arg1 *cloudformation.DescribeStackInstanceInput
	}
	describeStackInstanceRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.DescribeStackInstanceOutput
	}
	describeStackInstanceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.DescribeStackInstanceOutput
	}
	DescribeStackResourceStub        func(*cloudformation.DescribeStackResourceInput) (*cloudformation.DescribeStackResourceOutput, error)
	describeStackResourceMutex       sync.RWMutex
	describeStackResourceArgsForCall []struct {
		arg1 *cloudformation.DescribeStackResourceInput
	}
	describeStackResourceReturns struct {
		result1 *cloudformation.DescribeStackResourceOutput
		result2 error
	}
	describeStackResourceReturnsOnCall map[int]struct {
		result1 *cloudformation.DescribeStackResourceOutput
		result2 error
	}
	DescribeStackResourceWithContextStub        func(aws.Context, *cloudformation.DescribeStackResourceInput, ...request.Option) (*cloudformation.DescribeStackResourceOutput, error)
	describeStackResourceWithContextMutex       sync.RWMutex
	describeStackResourceWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeStackResourceInput
		arg3 []request.Option
	}
	describeStackResourceWithContextReturns struct {
		result1 *cloudformation.DescribeStackResourceOutput
		result2 error
	}
	describeStackResourceWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.DescribeStackResourceOutput
		result2 error
	}
	DescribeStackResourceRequestStub        func(*cloudformation.DescribeStackResourceInput) (*request.Request, *cloudformation.DescribeStackResourceOutput)
	describeStackResourceRequestMutex       sync.RWMutex
	describeStackResourceRequestArgsForCall []struct {
		arg1 *cloudformation.DescribeStackResourceInput
	}
	describeStackResourceRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.DescribeStackResourceOutput
	}
	describeStackResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.DescribeStackResourceOutput
	}
	DescribeStackResourcesStub        func(*cloudformation.DescribeStackResourcesInput) (*cloudformation.DescribeStackResourcesOutput, error)
	describeStackResourcesMutex       sync.RWMutex
	describeStackResourcesArgsForCall []struct {
		arg1 *cloudformation.DescribeStackResourcesInput
	}
	describeStackResourcesReturns struct {
		result1 *cloudformation.DescribeStackResourcesOutput
		result2 error
	}
	describeStackResourcesReturnsOnCall map[int]struct {
		result1 *cloudformation.DescribeStackResourcesOutput
		result2 error
	}
	DescribeStackResourcesWithContextStub        func(aws.Context, *cloudformation.DescribeStackResourcesInput, ...request.Option) (*cloudformation.DescribeStackResourcesOutput, error)
	describeStackResourcesWithContextMutex       sync.RWMutex
	describeStackResourcesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeStackResourcesInput
		arg3 []request.Option
	}
	describeStackResourcesWithContextReturns struct {
		result1 *cloudformation.DescribeStackResourcesOutput
		result2 error
	}
	describeStackResourcesWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.DescribeStackResourcesOutput
		result2 error
	}
	DescribeStackResourcesRequestStub        func(*cloudformation.DescribeStackResourcesInput) (*request.Request, *cloudformation.DescribeStackResourcesOutput)
	describeStackResourcesRequestMutex       sync.RWMutex
	describeStackResourcesRequestArgsForCall []struct {
		arg1 *cloudformation.DescribeStackResourcesInput
	}
	describeStackResourcesRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.DescribeStackResourcesOutput
	}
	describeStackResourcesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.DescribeStackResourcesOutput
	}
	DescribeStackSetStub        func(*cloudformation.DescribeStackSetInput) (*cloudformation.DescribeStackSetOutput, error)
	describeStackSetMutex       sync.RWMutex
	describeStackSetArgsForCall []struct {
		arg1 *cloudformation.DescribeStackSetInput
	}
	describeStackSetReturns struct {
		result1 *cloudformation.DescribeStackSetOutput
		result2 error
	}
	describeStackSetReturnsOnCall map[int]struct {
		result1 *cloudformation.DescribeStackSetOutput
		result2 error
	}
	DescribeStackSetWithContextStub        func(aws.Context, *cloudformation.DescribeStackSetInput, ...request.Option) (*cloudformation.DescribeStackSetOutput, error)
	describeStackSetWithContextMutex       sync.RWMutex
	describeStackSetWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeStackSetInput
		arg3 []request.Option
	}
	describeStackSetWithContextReturns struct {
		result1 *cloudformation.DescribeStackSetOutput
		result2 error
	}
	describeStackSetWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.DescribeStackSetOutput
		result2 error
	}
	DescribeStackSetRequestStub        func(*cloudformation.DescribeStackSetInput) (*request.Request, *cloudformation.DescribeStackSetOutput)
	describeStackSetRequestMutex       sync.RWMutex
	describeStackSetRequestArgsForCall []struct {
		arg1 *cloudformation.DescribeStackSetInput
	}
	describeStackSetRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.DescribeStackSetOutput
	}
	describeStackSetRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.DescribeStackSetOutput
	}
	DescribeStackSetOperationStub        func(*cloudformation.DescribeStackSetOperationInput) (*cloudformation.DescribeStackSetOperationOutput, error)
	describeStackSetOperationMutex       sync.RWMutex
	describeStackSetOperationArgsForCall []struct {
		arg1 *cloudformation.DescribeStackSetOperationInput
	}
	describeStackSetOperationReturns struct {
		result1 *cloudformation.DescribeStackSetOperationOutput
		result2 error
	}
	describeStackSetOperationReturnsOnCall map[int]struct {
		result1 *cloudformation.DescribeStackSetOperationOutput
		result2 error
	}
	DescribeStackSetOperationWithContextStub        func(aws.Context, *cloudformation.DescribeStackSetOperationInput, ...request.Option) (*cloudformation.DescribeStackSetOperationOutput, error)
	describeStackSetOperationWithContextMutex       sync.RWMutex
	describeStackSetOperationWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeStackSetOperationInput
		arg3 []request.Option
	}
	describeStackSetOperationWithContextReturns struct {
		result1 *cloudformation.DescribeStackSetOperationOutput
		result2 error
	}
	describeStackSetOperationWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.DescribeStackSetOperationOutput
		result2 error
	}
	DescribeStackSetOperationRequestStub        func(*cloudformation.DescribeStackSetOperationInput) (*request.Request, *cloudformation.DescribeStackSetOperationOutput)
	describeStackSetOperationRequestMutex       sync.RWMutex
	describeStackSetOperationRequestArgsForCall []struct {
		arg1 *cloudformation.DescribeStackSetOperationInput
	}
	describeStackSetOperationRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.DescribeStackSetOperationOutput
	}
	describeStackSetOperationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.DescribeStackSetOperationOutput
	}
	DescribeStacksStub        func(*cloudformation.DescribeStacksInput) (*cloudformation.DescribeStacksOutput, error)
	describeStacksMutex       sync.RWMutex
	describeStacksArgsForCall []struct {
		arg1 *cloudformation.DescribeStacksInput
	}
	describeStacksReturns struct {
		result1 *cloudformation.DescribeStacksOutput
		result2 error
	}
	describeStacksReturnsOnCall map[int]struct {
		result1 *cloudformation.DescribeStacksOutput
		result2 error
	}
	DescribeStacksWithContextStub        func(aws.Context, *cloudformation.DescribeStacksInput, ...request.Option) (*cloudformation.DescribeStacksOutput, error)
	describeStacksWithContextMutex       sync.RWMutex
	describeStacksWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeStacksInput
		arg3 []request.Option
	}
	describeStacksWithContextReturns struct {
		result1 *cloudformation.DescribeStacksOutput
		result2 error
	}
	describeStacksWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.DescribeStacksOutput
		result2 error
	}
	DescribeStacksRequestStub        func(*cloudformation.DescribeStacksInput) (*request.Request, *cloudformation.DescribeStacksOutput)
	describeStacksRequestMutex       sync.RWMutex
	describeStacksRequestArgsForCall []struct {
		arg1 *cloudformation.DescribeStacksInput
	}
	describeStacksRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.DescribeStacksOutput
	}
	describeStacksRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.DescribeStacksOutput
	}
	DescribeStacksPagesStub        func(*cloudformation.DescribeStacksInput, func(*cloudformation.DescribeStacksOutput, bool) bool) error
	describeStacksPagesMutex       sync.RWMutex
	describeStacksPagesArgsForCall []struct {
		arg1 *cloudformation.DescribeStacksInput
		arg2 func(*cloudformation.DescribeStacksOutput, bool) bool
	}
	describeStacksPagesReturns struct {
		result1 error
	}
	describeStacksPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeStacksPagesWithContextStub        func(aws.Context, *cloudformation.DescribeStacksInput, func(*cloudformation.DescribeStacksOutput, bool) bool, ...request.Option) error
	describeStacksPagesWithContextMutex       sync.RWMutex
	describeStacksPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeStacksInput
		arg3 func(*cloudformation.DescribeStacksOutput, bool) bool
		arg4 []request.Option
	}
	describeStacksPagesWithContextReturns struct {
		result1 error
	}
	describeStacksPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	EstimateTemplateCostStub        func(*cloudformation.EstimateTemplateCostInput) (*cloudformation.EstimateTemplateCostOutput, error)
	estimateTemplateCostMutex       sync.RWMutex
	estimateTemplateCostArgsForCall []struct {
		arg1 *cloudformation.EstimateTemplateCostInput
	}
	estimateTemplateCostReturns struct {
		result1 *cloudformation.EstimateTemplateCostOutput
		result2 error
	}
	estimateTemplateCostReturnsOnCall map[int]struct {
		result1 *cloudformation.EstimateTemplateCostOutput
		result2 error
	}
	EstimateTemplateCostWithContextStub        func(aws.Context, *cloudformation.EstimateTemplateCostInput, ...request.Option) (*cloudformation.EstimateTemplateCostOutput, error)
	estimateTemplateCostWithContextMutex       sync.RWMutex
	estimateTemplateCostWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.EstimateTemplateCostInput
		arg3 []request.Option
	}
	estimateTemplateCostWithContextReturns struct {
		result1 *cloudformation.EstimateTemplateCostOutput
		result2 error
	}
	estimateTemplateCostWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.EstimateTemplateCostOutput
		result2 error
	}
	EstimateTemplateCostRequestStub        func(*cloudformation.EstimateTemplateCostInput) (*request.Request, *cloudformation.EstimateTemplateCostOutput)
	estimateTemplateCostRequestMutex       sync.RWMutex
	estimateTemplateCostRequestArgsForCall []struct {
		arg1 *cloudformation.EstimateTemplateCostInput
	}
	estimateTemplateCostRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.EstimateTemplateCostOutput
	}
	estimateTemplateCostRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.EstimateTemplateCostOutput
	}
	ExecuteChangeSetStub        func(*cloudformation.ExecuteChangeSetInput) (*cloudformation.ExecuteChangeSetOutput, error)
	executeChangeSetMutex       sync.RWMutex
	executeChangeSetArgsForCall []struct {
		arg1 *cloudformation.ExecuteChangeSetInput
	}
	executeChangeSetReturns struct {
		result1 *cloudformation.ExecuteChangeSetOutput
		result2 error
	}
	executeChangeSetReturnsOnCall map[int]struct {
		result1 *cloudformation.ExecuteChangeSetOutput
		result2 error
	}
	ExecuteChangeSetWithContextStub        func(aws.Context, *cloudformation.ExecuteChangeSetInput, ...request.Option) (*cloudformation.ExecuteChangeSetOutput, error)
	executeChangeSetWithContextMutex       sync.RWMutex
	executeChangeSetWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.ExecuteChangeSetInput
		arg3 []request.Option
	}
	executeChangeSetWithContextReturns struct {
		result1 *cloudformation.ExecuteChangeSetOutput
		result2 error
	}
	executeChangeSetWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.ExecuteChangeSetOutput
		result2 error
	}
	ExecuteChangeSetRequestStub        func(*cloudformation.ExecuteChangeSetInput) (*request.Request, *cloudformation.ExecuteChangeSetOutput)
	executeChangeSetRequestMutex       sync.RWMutex
	executeChangeSetRequestArgsForCall []struct {
		arg1 *cloudformation.ExecuteChangeSetInput
	}
	executeChangeSetRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.ExecuteChangeSetOutput
	}
	executeChangeSetRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.ExecuteChangeSetOutput
	}
	GetStackPolicyStub        func(*cloudformation.GetStackPolicyInput) (*cloudformation.GetStackPolicyOutput, error)
	getStackPolicyMutex       sync.RWMutex
	getStackPolicyArgsForCall []struct {
		arg1 *cloudformation.GetStackPolicyInput
	}
	getStackPolicyReturns struct {
		result1 *cloudformation.GetStackPolicyOutput
		result2 error
	}
	getStackPolicyReturnsOnCall map[int]struct {
		result1 *cloudformation.GetStackPolicyOutput
		result2 error
	}
	GetStackPolicyWithContextStub        func(aws.Context, *cloudformation.GetStackPolicyInput, ...request.Option) (*cloudformation.GetStackPolicyOutput, error)
	getStackPolicyWithContextMutex       sync.RWMutex
	getStackPolicyWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.GetStackPolicyInput
		arg3 []request.Option
	}
	getStackPolicyWithContextReturns struct {
		result1 *cloudformation.GetStackPolicyOutput
		result2 error
	}
	getStackPolicyWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.GetStackPolicyOutput
		result2 error
	}
	GetStackPolicyRequestStub        func(*cloudformation.GetStackPolicyInput) (*request.Request, *cloudformation.GetStackPolicyOutput)
	getStackPolicyRequestMutex       sync.RWMutex
	getStackPolicyRequestArgsForCall []struct {
		arg1 *cloudformation.GetStackPolicyInput
	}
	getStackPolicyRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.GetStackPolicyOutput
	}
	getStackPolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.GetStackPolicyOutput
	}
	GetTemplateStub        func(*cloudformation.GetTemplateInput) (*cloudformation.GetTemplateOutput, error)
	getTemplateMutex       sync.RWMutex
	getTemplateArgsForCall []struct {
		arg1 *cloudformation.GetTemplateInput
	}
	getTemplateReturns struct {
		result1 *cloudformation.GetTemplateOutput
		result2 error
	}
	getTemplateReturnsOnCall map[int]struct {
		result1 *cloudformation.GetTemplateOutput
		result2 error
	}
	GetTemplateWithContextStub        func(aws.Context, *cloudformation.GetTemplateInput, ...request.Option) (*cloudformation.GetTemplateOutput, error)
	getTemplateWithContextMutex       sync.RWMutex
	getTemplateWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.GetTemplateInput
		arg3 []request.Option
	}
	getTemplateWithContextReturns struct {
		result1 *cloudformation.GetTemplateOutput
		result2 error
	}
	getTemplateWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.GetTemplateOutput
		result2 error
	}
	GetTemplateRequestStub        func(*cloudformation.GetTemplateInput) (*request.Request, *cloudformation.GetTemplateOutput)
	getTemplateRequestMutex       sync.RWMutex
	getTemplateRequestArgsForCall []struct {
		arg1 *cloudformation.GetTemplateInput
	}
	getTemplateRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.GetTemplateOutput
	}
	getTemplateRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.GetTemplateOutput
	}
	GetTemplateSummaryStub        func(*cloudformation.GetTemplateSummaryInput) (*cloudformation.GetTemplateSummaryOutput, error)
	getTemplateSummaryMutex       sync.RWMutex
	getTemplateSummaryArgsForCall []struct {
		arg1 *cloudformation.GetTemplateSummaryInput
	}
	getTemplateSummaryReturns struct {
		result1 *cloudformation.GetTemplateSummaryOutput
		result2 error
	}
	getTemplateSummaryReturnsOnCall map[int]struct {
		result1 *cloudformation.GetTemplateSummaryOutput
		result2 error
	}
	GetTemplateSummaryWithContextStub        func(aws.Context, *cloudformation.GetTemplateSummaryInput, ...request.Option) (*cloudformation.GetTemplateSummaryOutput, error)
	getTemplateSummaryWithContextMutex       sync.RWMutex
	getTemplateSummaryWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.GetTemplateSummaryInput
		arg3 []request.Option
	}
	getTemplateSummaryWithContextReturns struct {
		result1 *cloudformation.GetTemplateSummaryOutput
		result2 error
	}
	getTemplateSummaryWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.GetTemplateSummaryOutput
		result2 error
	}
	GetTemplateSummaryRequestStub        func(*cloudformation.GetTemplateSummaryInput) (*request.Request, *cloudformation.GetTemplateSummaryOutput)
	getTemplateSummaryRequestMutex       sync.RWMutex
	getTemplateSummaryRequestArgsForCall []struct {
		arg1 *cloudformation.GetTemplateSummaryInput
	}
	getTemplateSummaryRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.GetTemplateSummaryOutput
	}
	getTemplateSummaryRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.GetTemplateSummaryOutput
	}
	ListChangeSetsStub        func(*cloudformation.ListChangeSetsInput) (*cloudformation.ListChangeSetsOutput, error)
	listChangeSetsMutex       sync.RWMutex
	listChangeSetsArgsForCall []struct {
		arg1 *cloudformation.ListChangeSetsInput
	}
	listChangeSetsReturns struct {
		result1 *cloudformation.ListChangeSetsOutput
		result2 error
	}
	listChangeSetsReturnsOnCall map[int]struct {
		result1 *cloudformation.ListChangeSetsOutput
		result2 error
	}
	ListChangeSetsWithContextStub        func(aws.Context, *cloudformation.ListChangeSetsInput, ...request.Option) (*cloudformation.ListChangeSetsOutput, error)
	listChangeSetsWithContextMutex       sync.RWMutex
	listChangeSetsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.ListChangeSetsInput
		arg3 []request.Option
	}
	listChangeSetsWithContextReturns struct {
		result1 *cloudformation.ListChangeSetsOutput
		result2 error
	}
	listChangeSetsWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.ListChangeSetsOutput
		result2 error
	}
	ListChangeSetsRequestStub        func(*cloudformation.ListChangeSetsInput) (*request.Request, *cloudformation.ListChangeSetsOutput)
	listChangeSetsRequestMutex       sync.RWMutex
	listChangeSetsRequestArgsForCall []struct {
		arg1 *cloudformation.ListChangeSetsInput
	}
	listChangeSetsRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.ListChangeSetsOutput
	}
	listChangeSetsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.ListChangeSetsOutput
	}
	ListExportsStub        func(*cloudformation.ListExportsInput) (*cloudformation.ListExportsOutput, error)
	listExportsMutex       sync.RWMutex
	listExportsArgsForCall []struct {
		arg1 *cloudformation.ListExportsInput
	}
	listExportsReturns struct {
		result1 *cloudformation.ListExportsOutput
		result2 error
	}
	listExportsReturnsOnCall map[int]struct {
		result1 *cloudformation.ListExportsOutput
		result2 error
	}
	ListExportsWithContextStub        func(aws.Context, *cloudformation.ListExportsInput, ...request.Option) (*cloudformation.ListExportsOutput, error)
	listExportsWithContextMutex       sync.RWMutex
	listExportsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.ListExportsInput
		arg3 []request.Option
	}
	listExportsWithContextReturns struct {
		result1 *cloudformation.ListExportsOutput
		result2 error
	}
	listExportsWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.ListExportsOutput
		result2 error
	}
	ListExportsRequestStub        func(*cloudformation.ListExportsInput) (*request.Request, *cloudformation.ListExportsOutput)
	listExportsRequestMutex       sync.RWMutex
	listExportsRequestArgsForCall []struct {
		arg1 *cloudformation.ListExportsInput
	}
	listExportsRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.ListExportsOutput
	}
	listExportsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.ListExportsOutput
	}
	ListExportsPagesStub        func(*cloudformation.ListExportsInput, func(*cloudformation.ListExportsOutput, bool) bool) error
	listExportsPagesMutex       sync.RWMutex
	listExportsPagesArgsForCall []struct {
		arg1 *cloudformation.ListExportsInput
		arg2 func(*cloudformation.ListExportsOutput, bool) bool
	}
	listExportsPagesReturns struct {
		result1 error
	}
	listExportsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListExportsPagesWithContextStub        func(aws.Context, *cloudformation.ListExportsInput, func(*cloudformation.ListExportsOutput, bool) bool, ...request.Option) error
	listExportsPagesWithContextMutex       sync.RWMutex
	listExportsPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.ListExportsInput
		arg3 func(*cloudformation.ListExportsOutput, bool) bool
		arg4 []request.Option
	}
	listExportsPagesWithContextReturns struct {
		result1 error
	}
	listExportsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListImportsStub        func(*cloudformation.ListImportsInput) (*cloudformation.ListImportsOutput, error)
	listImportsMutex       sync.RWMutex
	listImportsArgsForCall []struct {
		arg1 *cloudformation.ListImportsInput
	}
	listImportsReturns struct {
		result1 *cloudformation.ListImportsOutput
		result2 error
	}
	listImportsReturnsOnCall map[int]struct {
		result1 *cloudformation.ListImportsOutput
		result2 error
	}
	ListImportsWithContextStub        func(aws.Context, *cloudformation.ListImportsInput, ...request.Option) (*cloudformation.ListImportsOutput, error)
	listImportsWithContextMutex       sync.RWMutex
	listImportsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.ListImportsInput
		arg3 []request.Option
	}
	listImportsWithContextReturns struct {
		result1 *cloudformation.ListImportsOutput
		result2 error
	}
	listImportsWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.ListImportsOutput
		result2 error
	}
	ListImportsRequestStub        func(*cloudformation.ListImportsInput) (*request.Request, *cloudformation.ListImportsOutput)
	listImportsRequestMutex       sync.RWMutex
	listImportsRequestArgsForCall []struct {
		arg1 *cloudformation.ListImportsInput
	}
	listImportsRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.ListImportsOutput
	}
	listImportsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.ListImportsOutput
	}
	ListImportsPagesStub        func(*cloudformation.ListImportsInput, func(*cloudformation.ListImportsOutput, bool) bool) error
	listImportsPagesMutex       sync.RWMutex
	listImportsPagesArgsForCall []struct {
		arg1 *cloudformation.ListImportsInput
		arg2 func(*cloudformation.ListImportsOutput, bool) bool
	}
	listImportsPagesReturns struct {
		result1 error
	}
	listImportsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListImportsPagesWithContextStub        func(aws.Context, *cloudformation.ListImportsInput, func(*cloudformation.ListImportsOutput, bool) bool, ...request.Option) error
	listImportsPagesWithContextMutex       sync.RWMutex
	listImportsPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.ListImportsInput
		arg3 func(*cloudformation.ListImportsOutput, bool) bool
		arg4 []request.Option
	}
	listImportsPagesWithContextReturns struct {
		result1 error
	}
	listImportsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListStackInstancesStub        func(*cloudformation.ListStackInstancesInput) (*cloudformation.ListStackInstancesOutput, error)
	listStackInstancesMutex       sync.RWMutex
	listStackInstancesArgsForCall []struct {
		arg1 *cloudformation.ListStackInstancesInput
	}
	listStackInstancesReturns struct {
		result1 *cloudformation.ListStackInstancesOutput
		result2 error
	}
	listStackInstancesReturnsOnCall map[int]struct {
		result1 *cloudformation.ListStackInstancesOutput
		result2 error
	}
	ListStackInstancesWithContextStub        func(aws.Context, *cloudformation.ListStackInstancesInput, ...request.Option) (*cloudformation.ListStackInstancesOutput, error)
	listStackInstancesWithContextMutex       sync.RWMutex
	listStackInstancesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.ListStackInstancesInput
		arg3 []request.Option
	}
	listStackInstancesWithContextReturns struct {
		result1 *cloudformation.ListStackInstancesOutput
		result2 error
	}
	listStackInstancesWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.ListStackInstancesOutput
		result2 error
	}
	ListStackInstancesRequestStub        func(*cloudformation.ListStackInstancesInput) (*request.Request, *cloudformation.ListStackInstancesOutput)
	listStackInstancesRequestMutex       sync.RWMutex
	listStackInstancesRequestArgsForCall []struct {
		arg1 *cloudformation.ListStackInstancesInput
	}
	listStackInstancesRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.ListStackInstancesOutput
	}
	listStackInstancesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.ListStackInstancesOutput
	}
	ListStackResourcesStub        func(*cloudformation.ListStackResourcesInput) (*cloudformation.ListStackResourcesOutput, error)
	listStackResourcesMutex       sync.RWMutex
	listStackResourcesArgsForCall []struct {
		arg1 *cloudformation.ListStackResourcesInput
	}
	listStackResourcesReturns struct {
		result1 *cloudformation.ListStackResourcesOutput
		result2 error
	}
	listStackResourcesReturnsOnCall map[int]struct {
		result1 *cloudformation.ListStackResourcesOutput
		result2 error
	}
	ListStackResourcesWithContextStub        func(aws.Context, *cloudformation.ListStackResourcesInput, ...request.Option) (*cloudformation.ListStackResourcesOutput, error)
	listStackResourcesWithContextMutex       sync.RWMutex
	listStackResourcesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.ListStackResourcesInput
		arg3 []request.Option
	}
	listStackResourcesWithContextReturns struct {
		result1 *cloudformation.ListStackResourcesOutput
		result2 error
	}
	listStackResourcesWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.ListStackResourcesOutput
		result2 error
	}
	ListStackResourcesRequestStub        func(*cloudformation.ListStackResourcesInput) (*request.Request, *cloudformation.ListStackResourcesOutput)
	listStackResourcesRequestMutex       sync.RWMutex
	listStackResourcesRequestArgsForCall []struct {
		arg1 *cloudformation.ListStackResourcesInput
	}
	listStackResourcesRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.ListStackResourcesOutput
	}
	listStackResourcesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.ListStackResourcesOutput
	}
	ListStackResourcesPagesStub        func(*cloudformation.ListStackResourcesInput, func(*cloudformation.ListStackResourcesOutput, bool) bool) error
	listStackResourcesPagesMutex       sync.RWMutex
	listStackResourcesPagesArgsForCall []struct {
		arg1 *cloudformation.ListStackResourcesInput
		arg2 func(*cloudformation.ListStackResourcesOutput, bool) bool
	}
	listStackResourcesPagesReturns struct {
		result1 error
	}
	listStackResourcesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListStackResourcesPagesWithContextStub        func(aws.Context, *cloudformation.ListStackResourcesInput, func(*cloudformation.ListStackResourcesOutput, bool) bool, ...request.Option) error
	listStackResourcesPagesWithContextMutex       sync.RWMutex
	listStackResourcesPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.ListStackResourcesInput
		arg3 func(*cloudformation.ListStackResourcesOutput, bool) bool
		arg4 []request.Option
	}
	listStackResourcesPagesWithContextReturns struct {
		result1 error
	}
	listStackResourcesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListStackSetOperationResultsStub        func(*cloudformation.ListStackSetOperationResultsInput) (*cloudformation.ListStackSetOperationResultsOutput, error)
	listStackSetOperationResultsMutex       sync.RWMutex
	listStackSetOperationResultsArgsForCall []struct {
		arg1 *cloudformation.ListStackSetOperationResultsInput
	}
	listStackSetOperationResultsReturns struct {
		result1 *cloudformation.ListStackSetOperationResultsOutput
		result2 error
	}
	listStackSetOperationResultsReturnsOnCall map[int]struct {
		result1 *cloudformation.ListStackSetOperationResultsOutput
		result2 error
	}
	ListStackSetOperationResultsWithContextStub        func(aws.Context, *cloudformation.ListStackSetOperationResultsInput, ...request.Option) (*cloudformation.ListStackSetOperationResultsOutput, error)
	listStackSetOperationResultsWithContextMutex       sync.RWMutex
	listStackSetOperationResultsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.ListStackSetOperationResultsInput
		arg3 []request.Option
	}
	listStackSetOperationResultsWithContextReturns struct {
		result1 *cloudformation.ListStackSetOperationResultsOutput
		result2 error
	}
	listStackSetOperationResultsWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.ListStackSetOperationResultsOutput
		result2 error
	}
	ListStackSetOperationResultsRequestStub        func(*cloudformation.ListStackSetOperationResultsInput) (*request.Request, *cloudformation.ListStackSetOperationResultsOutput)
	listStackSetOperationResultsRequestMutex       sync.RWMutex
	listStackSetOperationResultsRequestArgsForCall []struct {
		arg1 *cloudformation.ListStackSetOperationResultsInput
	}
	listStackSetOperationResultsRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.ListStackSetOperationResultsOutput
	}
	listStackSetOperationResultsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.ListStackSetOperationResultsOutput
	}
	ListStackSetOperationsStub        func(*cloudformation.ListStackSetOperationsInput) (*cloudformation.ListStackSetOperationsOutput, error)
	listStackSetOperationsMutex       sync.RWMutex
	listStackSetOperationsArgsForCall []struct {
		arg1 *cloudformation.ListStackSetOperationsInput
	}
	listStackSetOperationsReturns struct {
		result1 *cloudformation.ListStackSetOperationsOutput
		result2 error
	}
	listStackSetOperationsReturnsOnCall map[int]struct {
		result1 *cloudformation.ListStackSetOperationsOutput
		result2 error
	}
	ListStackSetOperationsWithContextStub        func(aws.Context, *cloudformation.ListStackSetOperationsInput, ...request.Option) (*cloudformation.ListStackSetOperationsOutput, error)
	listStackSetOperationsWithContextMutex       sync.RWMutex
	listStackSetOperationsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.ListStackSetOperationsInput
		arg3 []request.Option
	}
	listStackSetOperationsWithContextReturns struct {
		result1 *cloudformation.ListStackSetOperationsOutput
		result2 error
	}
	listStackSetOperationsWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.ListStackSetOperationsOutput
		result2 error
	}
	ListStackSetOperationsRequestStub        func(*cloudformation.ListStackSetOperationsInput) (*request.Request, *cloudformation.ListStackSetOperationsOutput)
	listStackSetOperationsRequestMutex       sync.RWMutex
	listStackSetOperationsRequestArgsForCall []struct {
		arg1 *cloudformation.ListStackSetOperationsInput
	}
	listStackSetOperationsRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.ListStackSetOperationsOutput
	}
	listStackSetOperationsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.ListStackSetOperationsOutput
	}
	ListStackSetsStub        func(*cloudformation.ListStackSetsInput) (*cloudformation.ListStackSetsOutput, error)
	listStackSetsMutex       sync.RWMutex
	listStackSetsArgsForCall []struct {
		arg1 *cloudformation.ListStackSetsInput
	}
	listStackSetsReturns struct {
		result1 *cloudformation.ListStackSetsOutput
		result2 error
	}
	listStackSetsReturnsOnCall map[int]struct {
		result1 *cloudformation.ListStackSetsOutput
		result2 error
	}
	ListStackSetsWithContextStub        func(aws.Context, *cloudformation.ListStackSetsInput, ...request.Option) (*cloudformation.ListStackSetsOutput, error)
	listStackSetsWithContextMutex       sync.RWMutex
	listStackSetsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.ListStackSetsInput
		arg3 []request.Option
	}
	listStackSetsWithContextReturns struct {
		result1 *cloudformation.ListStackSetsOutput
		result2 error
	}
	listStackSetsWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.ListStackSetsOutput
		result2 error
	}
	ListStackSetsRequestStub        func(*cloudformation.ListStackSetsInput) (*request.Request, *cloudformation.ListStackSetsOutput)
	listStackSetsRequestMutex       sync.RWMutex
	listStackSetsRequestArgsForCall []struct {
		arg1 *cloudformation.ListStackSetsInput
	}
	listStackSetsRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.ListStackSetsOutput
	}
	listStackSetsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.ListStackSetsOutput
	}
	ListStacksStub        func(*cloudformation.ListStacksInput) (*cloudformation.ListStacksOutput, error)
	listStacksMutex       sync.RWMutex
	listStacksArgsForCall []struct {
		arg1 *cloudformation.ListStacksInput
	}
	listStacksReturns struct {
		result1 *cloudformation.ListStacksOutput
		result2 error
	}
	listStacksReturnsOnCall map[int]struct {
		result1 *cloudformation.ListStacksOutput
		result2 error
	}
	ListStacksWithContextStub        func(aws.Context, *cloudformation.ListStacksInput, ...request.Option) (*cloudformation.ListStacksOutput, error)
	listStacksWithContextMutex       sync.RWMutex
	listStacksWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.ListStacksInput
		arg3 []request.Option
	}
	listStacksWithContextReturns struct {
		result1 *cloudformation.ListStacksOutput
		result2 error
	}
	listStacksWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.ListStacksOutput
		result2 error
	}
	ListStacksRequestStub        func(*cloudformation.ListStacksInput) (*request.Request, *cloudformation.ListStacksOutput)
	listStacksRequestMutex       sync.RWMutex
	listStacksRequestArgsForCall []struct {
		arg1 *cloudformation.ListStacksInput
	}
	listStacksRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.ListStacksOutput
	}
	listStacksRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.ListStacksOutput
	}
	ListStacksPagesStub        func(*cloudformation.ListStacksInput, func(*cloudformation.ListStacksOutput, bool) bool) error
	listStacksPagesMutex       sync.RWMutex
	listStacksPagesArgsForCall []struct {
		arg1 *cloudformation.ListStacksInput
		arg2 func(*cloudformation.ListStacksOutput, bool) bool
	}
	listStacksPagesReturns struct {
		result1 error
	}
	listStacksPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListStacksPagesWithContextStub        func(aws.Context, *cloudformation.ListStacksInput, func(*cloudformation.ListStacksOutput, bool) bool, ...request.Option) error
	listStacksPagesWithContextMutex       sync.RWMutex
	listStacksPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.ListStacksInput
		arg3 func(*cloudformation.ListStacksOutput, bool) bool
		arg4 []request.Option
	}
	listStacksPagesWithContextReturns struct {
		result1 error
	}
	listStacksPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	SetStackPolicyStub        func(*cloudformation.SetStackPolicyInput) (*cloudformation.SetStackPolicyOutput, error)
	setStackPolicyMutex       sync.RWMutex
	setStackPolicyArgsForCall []struct {
		arg1 *cloudformation.SetStackPolicyInput
	}
	setStackPolicyReturns struct {
		result1 *cloudformation.SetStackPolicyOutput
		result2 error
	}
	setStackPolicyReturnsOnCall map[int]struct {
		result1 *cloudformation.SetStackPolicyOutput
		result2 error
	}
	SetStackPolicyWithContextStub        func(aws.Context, *cloudformation.SetStackPolicyInput, ...request.Option) (*cloudformation.SetStackPolicyOutput, error)
	setStackPolicyWithContextMutex       sync.RWMutex
	setStackPolicyWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.SetStackPolicyInput
		arg3 []request.Option
	}
	setStackPolicyWithContextReturns struct {
		result1 *cloudformation.SetStackPolicyOutput
		result2 error
	}
	setStackPolicyWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.SetStackPolicyOutput
		result2 error
	}
	SetStackPolicyRequestStub        func(*cloudformation.SetStackPolicyInput) (*request.Request, *cloudformation.SetStackPolicyOutput)
	setStackPolicyRequestMutex       sync.RWMutex
	setStackPolicyRequestArgsForCall []struct {
		arg1 *cloudformation.SetStackPolicyInput
	}
	setStackPolicyRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.SetStackPolicyOutput
	}
	setStackPolicyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.SetStackPolicyOutput
	}
	SignalResourceStub        func(*cloudformation.SignalResourceInput) (*cloudformation.SignalResourceOutput, error)
	signalResourceMutex       sync.RWMutex
	signalResourceArgsForCall []struct {
		arg1 *cloudformation.SignalResourceInput
	}
	signalResourceReturns struct {
		result1 *cloudformation.SignalResourceOutput
		result2 error
	}
	signalResourceReturnsOnCall map[int]struct {
		result1 *cloudformation.SignalResourceOutput
		result2 error
	}
	SignalResourceWithContextStub        func(aws.Context, *cloudformation.SignalResourceInput, ...request.Option) (*cloudformation.SignalResourceOutput, error)
	signalResourceWithContextMutex       sync.RWMutex
	signalResourceWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.SignalResourceInput
		arg3 []request.Option
	}
	signalResourceWithContextReturns struct {
		result1 *cloudformation.SignalResourceOutput
		result2 error
	}
	signalResourceWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.SignalResourceOutput
		result2 error
	}
	SignalResourceRequestStub        func(*cloudformation.SignalResourceInput) (*request.Request, *cloudformation.SignalResourceOutput)
	signalResourceRequestMutex       sync.RWMutex
	signalResourceRequestArgsForCall []struct {
		arg1 *cloudformation.SignalResourceInput
	}
	signalResourceRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.SignalResourceOutput
	}
	signalResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.SignalResourceOutput
	}
	StopStackSetOperationStub        func(*cloudformation.StopStackSetOperationInput) (*cloudformation.StopStackSetOperationOutput, error)
	stopStackSetOperationMutex       sync.RWMutex
	stopStackSetOperationArgsForCall []struct {
		arg1 *cloudformation.StopStackSetOperationInput
	}
	stopStackSetOperationReturns struct {
		result1 *cloudformation.StopStackSetOperationOutput
		result2 error
	}
	stopStackSetOperationReturnsOnCall map[int]struct {
		result1 *cloudformation.StopStackSetOperationOutput
		result2 error
	}
	StopStackSetOperationWithContextStub        func(aws.Context, *cloudformation.StopStackSetOperationInput, ...request.Option) (*cloudformation.StopStackSetOperationOutput, error)
	stopStackSetOperationWithContextMutex       sync.RWMutex
	stopStackSetOperationWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.StopStackSetOperationInput
		arg3 []request.Option
	}
	stopStackSetOperationWithContextReturns struct {
		result1 *cloudformation.StopStackSetOperationOutput
		result2 error
	}
	stopStackSetOperationWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.StopStackSetOperationOutput
		result2 error
	}
	StopStackSetOperationRequestStub        func(*cloudformation.StopStackSetOperationInput) (*request.Request, *cloudformation.StopStackSetOperationOutput)
	stopStackSetOperationRequestMutex       sync.RWMutex
	stopStackSetOperationRequestArgsForCall []struct {
		arg1 *cloudformation.StopStackSetOperationInput
	}
	stopStackSetOperationRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.StopStackSetOperationOutput
	}
	stopStackSetOperationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.StopStackSetOperationOutput
	}
	UpdateStackStub        func(*cloudformation.UpdateStackInput) (*cloudformation.UpdateStackOutput, error)
	updateStackMutex       sync.RWMutex
	updateStackArgsForCall []struct {
		arg1 *cloudformation.UpdateStackInput
	}
	updateStackReturns struct {
		result1 *cloudformation.UpdateStackOutput
		result2 error
	}
	updateStackReturnsOnCall map[int]struct {
		result1 *cloudformation.UpdateStackOutput
		result2 error
	}
	UpdateStackWithContextStub        func(aws.Context, *cloudformation.UpdateStackInput, ...request.Option) (*cloudformation.UpdateStackOutput, error)
	updateStackWithContextMutex       sync.RWMutex
	updateStackWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.UpdateStackInput
		arg3 []request.Option
	}
	updateStackWithContextReturns struct {
		result1 *cloudformation.UpdateStackOutput
		result2 error
	}
	updateStackWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.UpdateStackOutput
		result2 error
	}
	UpdateStackRequestStub        func(*cloudformation.UpdateStackInput) (*request.Request, *cloudformation.UpdateStackOutput)
	updateStackRequestMutex       sync.RWMutex
	updateStackRequestArgsForCall []struct {
		arg1 *cloudformation.UpdateStackInput
	}
	updateStackRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.UpdateStackOutput
	}
	updateStackRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.UpdateStackOutput
	}
	UpdateStackInstancesStub        func(*cloudformation.UpdateStackInstancesInput) (*cloudformation.UpdateStackInstancesOutput, error)
	updateStackInstancesMutex       sync.RWMutex
	updateStackInstancesArgsForCall []struct {
		arg1 *cloudformation.UpdateStackInstancesInput
	}
	updateStackInstancesReturns struct {
		result1 *cloudformation.UpdateStackInstancesOutput
		result2 error
	}
	updateStackInstancesReturnsOnCall map[int]struct {
		result1 *cloudformation.UpdateStackInstancesOutput
		result2 error
	}
	UpdateStackInstancesWithContextStub        func(aws.Context, *cloudformation.UpdateStackInstancesInput, ...request.Option) (*cloudformation.UpdateStackInstancesOutput, error)
	updateStackInstancesWithContextMutex       sync.RWMutex
	updateStackInstancesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.UpdateStackInstancesInput
		arg3 []request.Option
	}
	updateStackInstancesWithContextReturns struct {
		result1 *cloudformation.UpdateStackInstancesOutput
		result2 error
	}
	updateStackInstancesWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.UpdateStackInstancesOutput
		result2 error
	}
	UpdateStackInstancesRequestStub        func(*cloudformation.UpdateStackInstancesInput) (*request.Request, *cloudformation.UpdateStackInstancesOutput)
	updateStackInstancesRequestMutex       sync.RWMutex
	updateStackInstancesRequestArgsForCall []struct {
		arg1 *cloudformation.UpdateStackInstancesInput
	}
	updateStackInstancesRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.UpdateStackInstancesOutput
	}
	updateStackInstancesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.UpdateStackInstancesOutput
	}
	UpdateStackSetStub        func(*cloudformation.UpdateStackSetInput) (*cloudformation.UpdateStackSetOutput, error)
	updateStackSetMutex       sync.RWMutex
	updateStackSetArgsForCall []struct {
		arg1 *cloudformation.UpdateStackSetInput
	}
	updateStackSetReturns struct {
		result1 *cloudformation.UpdateStackSetOutput
		result2 error
	}
	updateStackSetReturnsOnCall map[int]struct {
		result1 *cloudformation.UpdateStackSetOutput
		result2 error
	}
	UpdateStackSetWithContextStub        func(aws.Context, *cloudformation.UpdateStackSetInput, ...request.Option) (*cloudformation.UpdateStackSetOutput, error)
	updateStackSetWithContextMutex       sync.RWMutex
	updateStackSetWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.UpdateStackSetInput
		arg3 []request.Option
	}
	updateStackSetWithContextReturns struct {
		result1 *cloudformation.UpdateStackSetOutput
		result2 error
	}
	updateStackSetWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.UpdateStackSetOutput
		result2 error
	}
	UpdateStackSetRequestStub        func(*cloudformation.UpdateStackSetInput) (*request.Request, *cloudformation.UpdateStackSetOutput)
	updateStackSetRequestMutex       sync.RWMutex
	updateStackSetRequestArgsForCall []struct {
		arg1 *cloudformation.UpdateStackSetInput
	}
	updateStackSetRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.UpdateStackSetOutput
	}
	updateStackSetRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.UpdateStackSetOutput
	}
	UpdateTerminationProtectionStub        func(*cloudformation.UpdateTerminationProtectionInput) (*cloudformation.UpdateTerminationProtectionOutput, error)
	updateTerminationProtectionMutex       sync.RWMutex
	updateTerminationProtectionArgsForCall []struct {
		arg1 *cloudformation.UpdateTerminationProtectionInput
	}
	updateTerminationProtectionReturns struct {
		result1 *cloudformation.UpdateTerminationProtectionOutput
		result2 error
	}
	updateTerminationProtectionReturnsOnCall map[int]struct {
		result1 *cloudformation.UpdateTerminationProtectionOutput
		result2 error
	}
	UpdateTerminationProtectionWithContextStub        func(aws.Context, *cloudformation.UpdateTerminationProtectionInput, ...request.Option) (*cloudformation.UpdateTerminationProtectionOutput, error)
	updateTerminationProtectionWithContextMutex       sync.RWMutex
	updateTerminationProtectionWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.UpdateTerminationProtectionInput
		arg3 []request.Option
	}
	updateTerminationProtectionWithContextReturns struct {
		result1 *cloudformation.UpdateTerminationProtectionOutput
		result2 error
	}
	updateTerminationProtectionWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.UpdateTerminationProtectionOutput
		result2 error
	}
	UpdateTerminationProtectionRequestStub        func(*cloudformation.UpdateTerminationProtectionInput) (*request.Request, *cloudformation.UpdateTerminationProtectionOutput)
	updateTerminationProtectionRequestMutex       sync.RWMutex
	updateTerminationProtectionRequestArgsForCall []struct {
		arg1 *cloudformation.UpdateTerminationProtectionInput
	}
	updateTerminationProtectionRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.UpdateTerminationProtectionOutput
	}
	updateTerminationProtectionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.UpdateTerminationProtectionOutput
	}
	ValidateTemplateStub        func(*cloudformation.ValidateTemplateInput) (*cloudformation.ValidateTemplateOutput, error)
	validateTemplateMutex       sync.RWMutex
	validateTemplateArgsForCall []struct {
		arg1 *cloudformation.ValidateTemplateInput
	}
	validateTemplateReturns struct {
		result1 *cloudformation.ValidateTemplateOutput
		result2 error
	}
	validateTemplateReturnsOnCall map[int]struct {
		result1 *cloudformation.ValidateTemplateOutput
		result2 error
	}
	ValidateTemplateWithContextStub        func(aws.Context, *cloudformation.ValidateTemplateInput, ...request.Option) (*cloudformation.ValidateTemplateOutput, error)
	validateTemplateWithContextMutex       sync.RWMutex
	validateTemplateWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.ValidateTemplateInput
		arg3 []request.Option
	}
	validateTemplateWithContextReturns struct {
		result1 *cloudformation.ValidateTemplateOutput
		result2 error
	}
	validateTemplateWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.ValidateTemplateOutput
		result2 error
	}
	ValidateTemplateRequestStub        func(*cloudformation.ValidateTemplateInput) (*request.Request, *cloudformation.ValidateTemplateOutput)
	validateTemplateRequestMutex       sync.RWMutex
	validateTemplateRequestArgsForCall []struct {
		arg1 *cloudformation.ValidateTemplateInput
	}
	validateTemplateRequestReturns struct {
		result1 *request.Request
		result2 *cloudformation.ValidateTemplateOutput
	}
	validateTemplateRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudformation.ValidateTemplateOutput
	}
	WaitUntilChangeSetCreateCompleteStub        func(*cloudformation.DescribeChangeSetInput) error
	waitUntilChangeSetCreateCompleteMutex       sync.RWMutex
	waitUntilChangeSetCreateCompleteArgsForCall []struct {
		arg1 *cloudformation.DescribeChangeSetInput
	}
	waitUntilChangeSetCreateCompleteReturns struct {
		result1 error
	}
	waitUntilChangeSetCreateCompleteReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilChangeSetCreateCompleteWithContextStub        func(aws.Context, *cloudformation.DescribeChangeSetInput, ...request.WaiterOption) error
	waitUntilChangeSetCreateCompleteWithContextMutex       sync.RWMutex
	waitUntilChangeSetCreateCompleteWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeChangeSetInput
		arg3 []request.WaiterOption
	}
	waitUntilChangeSetCreateCompleteWithContextReturns struct {
		result1 error
	}
	waitUntilChangeSetCreateCompleteWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilStackCreateCompleteStub        func(*cloudformation.DescribeStacksInput) error
	waitUntilStackCreateCompleteMutex       sync.RWMutex
	waitUntilStackCreateCompleteArgsForCall []struct {
		arg1 *cloudformation.DescribeStacksInput
	}
	waitUntilStackCreateCompleteReturns struct {
		result1 error
	}
	waitUntilStackCreateCompleteReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilStackCreateCompleteWithContextStub        func(aws.Context, *cloudformation.DescribeStacksInput, ...request.WaiterOption) error
	waitUntilStackCreateCompleteWithContextMutex       sync.RWMutex
	waitUntilStackCreateCompleteWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeStacksInput
		arg3 []request.WaiterOption
	}
	waitUntilStackCreateCompleteWithContextReturns struct {
		result1 error
	}
	waitUntilStackCreateCompleteWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilStackDeleteCompleteStub        func(*cloudformation.DescribeStacksInput) error
	waitUntilStackDeleteCompleteMutex       sync.RWMutex
	waitUntilStackDeleteCompleteArgsForCall []struct {
		arg1 *cloudformation.DescribeStacksInput
	}
	waitUntilStackDeleteCompleteReturns struct {
		result1 error
	}
	waitUntilStackDeleteCompleteReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilStackDeleteCompleteWithContextStub        func(aws.Context, *cloudformation.DescribeStacksInput, ...request.WaiterOption) error
	waitUntilStackDeleteCompleteWithContextMutex       sync.RWMutex
	waitUntilStackDeleteCompleteWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeStacksInput
		arg3 []request.WaiterOption
	}
	waitUntilStackDeleteCompleteWithContextReturns struct {
		result1 error
	}
	waitUntilStackDeleteCompleteWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilStackExistsStub        func(*cloudformation.DescribeStacksInput) error
	waitUntilStackExistsMutex       sync.RWMutex
	waitUntilStackExistsArgsForCall []struct {
		arg1 *cloudformation.DescribeStacksInput
	}
	waitUntilStackExistsReturns struct {
		result1 error
	}
	waitUntilStackExistsReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilStackExistsWithContextStub        func(aws.Context, *cloudformation.DescribeStacksInput, ...request.WaiterOption) error
	waitUntilStackExistsWithContextMutex       sync.RWMutex
	waitUntilStackExistsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeStacksInput
		arg3 []request.WaiterOption
	}
	waitUntilStackExistsWithContextReturns struct {
		result1 error
	}
	waitUntilStackExistsWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilStackUpdateCompleteStub        func(*cloudformation.DescribeStacksInput) error
	waitUntilStackUpdateCompleteMutex       sync.RWMutex
	waitUntilStackUpdateCompleteArgsForCall []struct {
		arg1 *cloudformation.DescribeStacksInput
	}
	waitUntilStackUpdateCompleteReturns struct {
		result1 error
	}
	waitUntilStackUpdateCompleteReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilStackUpdateCompleteWithContextStub        func(aws.Context, *cloudformation.DescribeStacksInput, ...request.WaiterOption) error
	waitUntilStackUpdateCompleteWithContextMutex       sync.RWMutex
	waitUntilStackUpdateCompleteWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeStacksInput
		arg3 []request.WaiterOption
	}
	waitUntilStackUpdateCompleteWithContextReturns struct {
		result1 error
	}
	waitUntilStackUpdateCompleteWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCloudFormationAPI) CancelUpdateStack(arg1 *cloudformation.CancelUpdateStackInput) (*cloudformation.CancelUpdateStackOutput, error) {
	fake.cancelUpdateStackMutex.Lock()
	ret, specificReturn := fake.cancelUpdateStackReturnsOnCall[len(fake.cancelUpdateStackArgsForCall)]
	fake.cancelUpdateStackArgsForCall = append(fake.cancelUpdateStackArgsForCall, struct {
		arg1 *cloudformation.CancelUpdateStackInput
	}{arg1})
	fake.recordInvocation("CancelUpdateStack", []interface{}{arg1})
	fake.cancelUpdateStackMutex.Unlock()
	if fake.CancelUpdateStackStub != nil {
		return fake.CancelUpdateStackStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.cancelUpdateStackReturns.result1, fake.cancelUpdateStackReturns.result2
}

func (fake *FakeCloudFormationAPI) CancelUpdateStackCallCount() int {
	fake.cancelUpdateStackMutex.RLock()
	defer fake.cancelUpdateStackMutex.RUnlock()
	return len(fake.cancelUpdateStackArgsForCall)
}

func (fake *FakeCloudFormationAPI) CancelUpdateStackArgsForCall(i int) *cloudformation.CancelUpdateStackInput {
	fake.cancelUpdateStackMutex.RLock()
	defer fake.cancelUpdateStackMutex.RUnlock()
	return fake.cancelUpdateStackArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) CancelUpdateStackReturns(result1 *cloudformation.CancelUpdateStackOutput, result2 error) {
	fake.CancelUpdateStackStub = nil
	fake.cancelUpdateStackReturns = struct {
		result1 *cloudformation.CancelUpdateStackOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) CancelUpdateStackReturnsOnCall(i int, result1 *cloudformation.CancelUpdateStackOutput, result2 error) {
	fake.CancelUpdateStackStub = nil
	if fake.cancelUpdateStackReturnsOnCall == nil {
		fake.cancelUpdateStackReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.CancelUpdateStackOutput
			result2 error
		})
	}
	fake.cancelUpdateStackReturnsOnCall[i] = struct {
		result1 *cloudformation.CancelUpdateStackOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) CancelUpdateStackWithContext(arg1 aws.Context, arg2 *cloudformation.CancelUpdateStackInput, arg3 ...request.Option) (*cloudformation.CancelUpdateStackOutput, error) {
	fake.cancelUpdateStackWithContextMutex.Lock()
	ret, specificReturn := fake.cancelUpdateStackWithContextReturnsOnCall[len(fake.cancelUpdateStackWithContextArgsForCall)]
	fake.cancelUpdateStackWithContextArgsForCall = append(fake.cancelUpdateStackWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.CancelUpdateStackInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CancelUpdateStackWithContext", []interface{}{arg1, arg2, arg3})
	fake.cancelUpdateStackWithContextMutex.Unlock()
	if fake.CancelUpdateStackWithContextStub != nil {
		return fake.CancelUpdateStackWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.cancelUpdateStackWithContextReturns.result1, fake.cancelUpdateStackWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) CancelUpdateStackWithContextCallCount() int {
	fake.cancelUpdateStackWithContextMutex.RLock()
	defer fake.cancelUpdateStackWithContextMutex.RUnlock()
	return len(fake.cancelUpdateStackWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) CancelUpdateStackWithContextArgsForCall(i int) (aws.Context, *cloudformation.CancelUpdateStackInput, []request.Option) {
	fake.cancelUpdateStackWithContextMutex.RLock()
	defer fake.cancelUpdateStackWithContextMutex.RUnlock()
	return fake.cancelUpdateStackWithContextArgsForCall[i].arg1, fake.cancelUpdateStackWithContextArgsForCall[i].arg2, fake.cancelUpdateStackWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) CancelUpdateStackWithContextReturns(result1 *cloudformation.CancelUpdateStackOutput, result2 error) {
	fake.CancelUpdateStackWithContextStub = nil
	fake.cancelUpdateStackWithContextReturns = struct {
		result1 *cloudformation.CancelUpdateStackOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) CancelUpdateStackWithContextReturnsOnCall(i int, result1 *cloudformation.CancelUpdateStackOutput, result2 error) {
	fake.CancelUpdateStackWithContextStub = nil
	if fake.cancelUpdateStackWithContextReturnsOnCall == nil {
		fake.cancelUpdateStackWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.CancelUpdateStackOutput
			result2 error
		})
	}
	fake.cancelUpdateStackWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.CancelUpdateStackOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) CancelUpdateStackRequest(arg1 *cloudformation.CancelUpdateStackInput) (*request.Request, *cloudformation.CancelUpdateStackOutput) {
	fake.cancelUpdateStackRequestMutex.Lock()
	ret, specificReturn := fake.cancelUpdateStackRequestReturnsOnCall[len(fake.cancelUpdateStackRequestArgsForCall)]
	fake.cancelUpdateStackRequestArgsForCall = append(fake.cancelUpdateStackRequestArgsForCall, struct {
		arg1 *cloudformation.CancelUpdateStackInput
	}{arg1})
	fake.recordInvocation("CancelUpdateStackRequest", []interface{}{arg1})
	fake.cancelUpdateStackRequestMutex.Unlock()
	if fake.CancelUpdateStackRequestStub != nil {
		return fake.CancelUpdateStackRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.cancelUpdateStackRequestReturns.result1, fake.cancelUpdateStackRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) CancelUpdateStackRequestCallCount() int {
	fake.cancelUpdateStackRequestMutex.RLock()
	defer fake.cancelUpdateStackRequestMutex.RUnlock()
	return len(fake.cancelUpdateStackRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) CancelUpdateStackRequestArgsForCall(i int) *cloudformation.CancelUpdateStackInput {
	fake.cancelUpdateStackRequestMutex.RLock()
	defer fake.cancelUpdateStackRequestMutex.RUnlock()
	return fake.cancelUpdateStackRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) CancelUpdateStackRequestReturns(result1 *request.Request, result2 *cloudformation.CancelUpdateStackOutput) {
	fake.CancelUpdateStackRequestStub = nil
	fake.cancelUpdateStackRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.CancelUpdateStackOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) CancelUpdateStackRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.CancelUpdateStackOutput) {
	fake.CancelUpdateStackRequestStub = nil
	if fake.cancelUpdateStackRequestReturnsOnCall == nil {
		fake.cancelUpdateStackRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.CancelUpdateStackOutput
		})
	}
	fake.cancelUpdateStackRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.CancelUpdateStackOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ContinueUpdateRollback(arg1 *cloudformation.ContinueUpdateRollbackInput) (*cloudformation.ContinueUpdateRollbackOutput, error) {
	fake.continueUpdateRollbackMutex.Lock()
	ret, specificReturn := fake.continueUpdateRollbackReturnsOnCall[len(fake.continueUpdateRollbackArgsForCall)]
	fake.continueUpdateRollbackArgsForCall = append(fake.continueUpdateRollbackArgsForCall, struct {
		arg1 *cloudformation.ContinueUpdateRollbackInput
	}{arg1})
	fake.recordInvocation("ContinueUpdateRollback", []interface{}{arg1})
	fake.continueUpdateRollbackMutex.Unlock()
	if fake.ContinueUpdateRollbackStub != nil {
		return fake.ContinueUpdateRollbackStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.continueUpdateRollbackReturns.result1, fake.continueUpdateRollbackReturns.result2
}

func (fake *FakeCloudFormationAPI) ContinueUpdateRollbackCallCount() int {
	fake.continueUpdateRollbackMutex.RLock()
	defer fake.continueUpdateRollbackMutex.RUnlock()
	return len(fake.continueUpdateRollbackArgsForCall)
}

func (fake *FakeCloudFormationAPI) ContinueUpdateRollbackArgsForCall(i int) *cloudformation.ContinueUpdateRollbackInput {
	fake.continueUpdateRollbackMutex.RLock()
	defer fake.continueUpdateRollbackMutex.RUnlock()
	return fake.continueUpdateRollbackArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) ContinueUpdateRollbackReturns(result1 *cloudformation.ContinueUpdateRollbackOutput, result2 error) {
	fake.ContinueUpdateRollbackStub = nil
	fake.continueUpdateRollbackReturns = struct {
		result1 *cloudformation.ContinueUpdateRollbackOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ContinueUpdateRollbackReturnsOnCall(i int, result1 *cloudformation.ContinueUpdateRollbackOutput, result2 error) {
	fake.ContinueUpdateRollbackStub = nil
	if fake.continueUpdateRollbackReturnsOnCall == nil {
		fake.continueUpdateRollbackReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.ContinueUpdateRollbackOutput
			result2 error
		})
	}
	fake.continueUpdateRollbackReturnsOnCall[i] = struct {
		result1 *cloudformation.ContinueUpdateRollbackOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ContinueUpdateRollbackWithContext(arg1 aws.Context, arg2 *cloudformation.ContinueUpdateRollbackInput, arg3 ...request.Option) (*cloudformation.ContinueUpdateRollbackOutput, error) {
	fake.continueUpdateRollbackWithContextMutex.Lock()
	ret, specificReturn := fake.continueUpdateRollbackWithContextReturnsOnCall[len(fake.continueUpdateRollbackWithContextArgsForCall)]
	fake.continueUpdateRollbackWithContextArgsForCall = append(fake.continueUpdateRollbackWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.ContinueUpdateRollbackInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ContinueUpdateRollbackWithContext", []interface{}{arg1, arg2, arg3})
	fake.continueUpdateRollbackWithContextMutex.Unlock()
	if fake.ContinueUpdateRollbackWithContextStub != nil {
		return fake.ContinueUpdateRollbackWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.continueUpdateRollbackWithContextReturns.result1, fake.continueUpdateRollbackWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) ContinueUpdateRollbackWithContextCallCount() int {
	fake.continueUpdateRollbackWithContextMutex.RLock()
	defer fake.continueUpdateRollbackWithContextMutex.RUnlock()
	return len(fake.continueUpdateRollbackWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) ContinueUpdateRollbackWithContextArgsForCall(i int) (aws.Context, *cloudformation.ContinueUpdateRollbackInput, []request.Option) {
	fake.continueUpdateRollbackWithContextMutex.RLock()
	defer fake.continueUpdateRollbackWithContextMutex.RUnlock()
	return fake.continueUpdateRollbackWithContextArgsForCall[i].arg1, fake.continueUpdateRollbackWithContextArgsForCall[i].arg2, fake.continueUpdateRollbackWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) ContinueUpdateRollbackWithContextReturns(result1 *cloudformation.ContinueUpdateRollbackOutput, result2 error) {
	fake.ContinueUpdateRollbackWithContextStub = nil
	fake.continueUpdateRollbackWithContextReturns = struct {
		result1 *cloudformation.ContinueUpdateRollbackOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ContinueUpdateRollbackWithContextReturnsOnCall(i int, result1 *cloudformation.ContinueUpdateRollbackOutput, result2 error) {
	fake.ContinueUpdateRollbackWithContextStub = nil
	if fake.continueUpdateRollbackWithContextReturnsOnCall == nil {
		fake.continueUpdateRollbackWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.ContinueUpdateRollbackOutput
			result2 error
		})
	}
	fake.continueUpdateRollbackWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.ContinueUpdateRollbackOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ContinueUpdateRollbackRequest(arg1 *cloudformation.ContinueUpdateRollbackInput) (*request.Request, *cloudformation.ContinueUpdateRollbackOutput) {
	fake.continueUpdateRollbackRequestMutex.Lock()
	ret, specificReturn := fake.continueUpdateRollbackRequestReturnsOnCall[len(fake.continueUpdateRollbackRequestArgsForCall)]
	fake.continueUpdateRollbackRequestArgsForCall = append(fake.continueUpdateRollbackRequestArgsForCall, struct {
		arg1 *cloudformation.ContinueUpdateRollbackInput
	}{arg1})
	fake.recordInvocation("ContinueUpdateRollbackRequest", []interface{}{arg1})
	fake.continueUpdateRollbackRequestMutex.Unlock()
	if fake.ContinueUpdateRollbackRequestStub != nil {
		return fake.ContinueUpdateRollbackRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.continueUpdateRollbackRequestReturns.result1, fake.continueUpdateRollbackRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) ContinueUpdateRollbackRequestCallCount() int {
	fake.continueUpdateRollbackRequestMutex.RLock()
	defer fake.continueUpdateRollbackRequestMutex.RUnlock()
	return len(fake.continueUpdateRollbackRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) ContinueUpdateRollbackRequestArgsForCall(i int) *cloudformation.ContinueUpdateRollbackInput {
	fake.continueUpdateRollbackRequestMutex.RLock()
	defer fake.continueUpdateRollbackRequestMutex.RUnlock()
	return fake.continueUpdateRollbackRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) ContinueUpdateRollbackRequestReturns(result1 *request.Request, result2 *cloudformation.ContinueUpdateRollbackOutput) {
	fake.ContinueUpdateRollbackRequestStub = nil
	fake.continueUpdateRollbackRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.ContinueUpdateRollbackOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ContinueUpdateRollbackRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.ContinueUpdateRollbackOutput) {
	fake.ContinueUpdateRollbackRequestStub = nil
	if fake.continueUpdateRollbackRequestReturnsOnCall == nil {
		fake.continueUpdateRollbackRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.ContinueUpdateRollbackOutput
		})
	}
	fake.continueUpdateRollbackRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.ContinueUpdateRollbackOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) CreateChangeSet(arg1 *cloudformation.CreateChangeSetInput) (*cloudformation.CreateChangeSetOutput, error) {
	fake.createChangeSetMutex.Lock()
	ret, specificReturn := fake.createChangeSetReturnsOnCall[len(fake.createChangeSetArgsForCall)]
	fake.createChangeSetArgsForCall = append(fake.createChangeSetArgsForCall, struct {
		arg1 *cloudformation.CreateChangeSetInput
	}{arg1})
	fake.recordInvocation("CreateChangeSet", []interface{}{arg1})
	fake.createChangeSetMutex.Unlock()
	if fake.CreateChangeSetStub != nil {
		return fake.CreateChangeSetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createChangeSetReturns.result1, fake.createChangeSetReturns.result2
}

func (fake *FakeCloudFormationAPI) CreateChangeSetCallCount() int {
	fake.createChangeSetMutex.RLock()
	defer fake.createChangeSetMutex.RUnlock()
	return len(fake.createChangeSetArgsForCall)
}

func (fake *FakeCloudFormationAPI) CreateChangeSetArgsForCall(i int) *cloudformation.CreateChangeSetInput {
	fake.createChangeSetMutex.RLock()
	defer fake.createChangeSetMutex.RUnlock()
	return fake.createChangeSetArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) CreateChangeSetReturns(result1 *cloudformation.CreateChangeSetOutput, result2 error) {
	fake.CreateChangeSetStub = nil
	fake.createChangeSetReturns = struct {
		result1 *cloudformation.CreateChangeSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) CreateChangeSetReturnsOnCall(i int, result1 *cloudformation.CreateChangeSetOutput, result2 error) {
	fake.CreateChangeSetStub = nil
	if fake.createChangeSetReturnsOnCall == nil {
		fake.createChangeSetReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.CreateChangeSetOutput
			result2 error
		})
	}
	fake.createChangeSetReturnsOnCall[i] = struct {
		result1 *cloudformation.CreateChangeSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) CreateChangeSetWithContext(arg1 aws.Context, arg2 *cloudformation.CreateChangeSetInput, arg3 ...request.Option) (*cloudformation.CreateChangeSetOutput, error) {
	fake.createChangeSetWithContextMutex.Lock()
	ret, specificReturn := fake.createChangeSetWithContextReturnsOnCall[len(fake.createChangeSetWithContextArgsForCall)]
	fake.createChangeSetWithContextArgsForCall = append(fake.createChangeSetWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.CreateChangeSetInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateChangeSetWithContext", []interface{}{arg1, arg2, arg3})
	fake.createChangeSetWithContextMutex.Unlock()
	if fake.CreateChangeSetWithContextStub != nil {
		return fake.CreateChangeSetWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createChangeSetWithContextReturns.result1, fake.createChangeSetWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) CreateChangeSetWithContextCallCount() int {
	fake.createChangeSetWithContextMutex.RLock()
	defer fake.createChangeSetWithContextMutex.RUnlock()
	return len(fake.createChangeSetWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) CreateChangeSetWithContextArgsForCall(i int) (aws.Context, *cloudformation.CreateChangeSetInput, []request.Option) {
	fake.createChangeSetWithContextMutex.RLock()
	defer fake.createChangeSetWithContextMutex.RUnlock()
	return fake.createChangeSetWithContextArgsForCall[i].arg1, fake.createChangeSetWithContextArgsForCall[i].arg2, fake.createChangeSetWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) CreateChangeSetWithContextReturns(result1 *cloudformation.CreateChangeSetOutput, result2 error) {
	fake.CreateChangeSetWithContextStub = nil
	fake.createChangeSetWithContextReturns = struct {
		result1 *cloudformation.CreateChangeSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) CreateChangeSetWithContextReturnsOnCall(i int, result1 *cloudformation.CreateChangeSetOutput, result2 error) {
	fake.CreateChangeSetWithContextStub = nil
	if fake.createChangeSetWithContextReturnsOnCall == nil {
		fake.createChangeSetWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.CreateChangeSetOutput
			result2 error
		})
	}
	fake.createChangeSetWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.CreateChangeSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) CreateChangeSetRequest(arg1 *cloudformation.CreateChangeSetInput) (*request.Request, *cloudformation.CreateChangeSetOutput) {
	fake.createChangeSetRequestMutex.Lock()
	ret, specificReturn := fake.createChangeSetRequestReturnsOnCall[len(fake.createChangeSetRequestArgsForCall)]
	fake.createChangeSetRequestArgsForCall = append(fake.createChangeSetRequestArgsForCall, struct {
		arg1 *cloudformation.CreateChangeSetInput
	}{arg1})
	fake.recordInvocation("CreateChangeSetRequest", []interface{}{arg1})
	fake.createChangeSetRequestMutex.Unlock()
	if fake.CreateChangeSetRequestStub != nil {
		return fake.CreateChangeSetRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createChangeSetRequestReturns.result1, fake.createChangeSetRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) CreateChangeSetRequestCallCount() int {
	fake.createChangeSetRequestMutex.RLock()
	defer fake.createChangeSetRequestMutex.RUnlock()
	return len(fake.createChangeSetRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) CreateChangeSetRequestArgsForCall(i int) *cloudformation.CreateChangeSetInput {
	fake.createChangeSetRequestMutex.RLock()
	defer fake.createChangeSetRequestMutex.RUnlock()
	return fake.createChangeSetRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) CreateChangeSetRequestReturns(result1 *request.Request, result2 *cloudformation.CreateChangeSetOutput) {
	fake.CreateChangeSetRequestStub = nil
	fake.createChangeSetRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.CreateChangeSetOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) CreateChangeSetRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.CreateChangeSetOutput) {
	fake.CreateChangeSetRequestStub = nil
	if fake.createChangeSetRequestReturnsOnCall == nil {
		fake.createChangeSetRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.CreateChangeSetOutput
		})
	}
	fake.createChangeSetRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.CreateChangeSetOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) CreateStack(arg1 *cloudformation.CreateStackInput) (*cloudformation.CreateStackOutput, error) {
	fake.createStackMutex.Lock()
	ret, specificReturn := fake.createStackReturnsOnCall[len(fake.createStackArgsForCall)]
	fake.createStackArgsForCall = append(fake.createStackArgsForCall, struct {
		arg1 *cloudformation.CreateStackInput
	}{arg1})
	fake.recordInvocation("CreateStack", []interface{}{arg1})
	fake.createStackMutex.Unlock()
	if fake.CreateStackStub != nil {
		return fake.CreateStackStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createStackReturns.result1, fake.createStackReturns.result2
}

func (fake *FakeCloudFormationAPI) CreateStackCallCount() int {
	fake.createStackMutex.RLock()
	defer fake.createStackMutex.RUnlock()
	return len(fake.createStackArgsForCall)
}

func (fake *FakeCloudFormationAPI) CreateStackArgsForCall(i int) *cloudformation.CreateStackInput {
	fake.createStackMutex.RLock()
	defer fake.createStackMutex.RUnlock()
	return fake.createStackArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) CreateStackReturns(result1 *cloudformation.CreateStackOutput, result2 error) {
	fake.CreateStackStub = nil
	fake.createStackReturns = struct {
		result1 *cloudformation.CreateStackOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) CreateStackReturnsOnCall(i int, result1 *cloudformation.CreateStackOutput, result2 error) {
	fake.CreateStackStub = nil
	if fake.createStackReturnsOnCall == nil {
		fake.createStackReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.CreateStackOutput
			result2 error
		})
	}
	fake.createStackReturnsOnCall[i] = struct {
		result1 *cloudformation.CreateStackOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) CreateStackWithContext(arg1 aws.Context, arg2 *cloudformation.CreateStackInput, arg3 ...request.Option) (*cloudformation.CreateStackOutput, error) {
	fake.createStackWithContextMutex.Lock()
	ret, specificReturn := fake.createStackWithContextReturnsOnCall[len(fake.createStackWithContextArgsForCall)]
	fake.createStackWithContextArgsForCall = append(fake.createStackWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.CreateStackInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateStackWithContext", []interface{}{arg1, arg2, arg3})
	fake.createStackWithContextMutex.Unlock()
	if fake.CreateStackWithContextStub != nil {
		return fake.CreateStackWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createStackWithContextReturns.result1, fake.createStackWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) CreateStackWithContextCallCount() int {
	fake.createStackWithContextMutex.RLock()
	defer fake.createStackWithContextMutex.RUnlock()
	return len(fake.createStackWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) CreateStackWithContextArgsForCall(i int) (aws.Context, *cloudformation.CreateStackInput, []request.Option) {
	fake.createStackWithContextMutex.RLock()
	defer fake.createStackWithContextMutex.RUnlock()
	return fake.createStackWithContextArgsForCall[i].arg1, fake.createStackWithContextArgsForCall[i].arg2, fake.createStackWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) CreateStackWithContextReturns(result1 *cloudformation.CreateStackOutput, result2 error) {
	fake.CreateStackWithContextStub = nil
	fake.createStackWithContextReturns = struct {
		result1 *cloudformation.CreateStackOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) CreateStackWithContextReturnsOnCall(i int, result1 *cloudformation.CreateStackOutput, result2 error) {
	fake.CreateStackWithContextStub = nil
	if fake.createStackWithContextReturnsOnCall == nil {
		fake.createStackWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.CreateStackOutput
			result2 error
		})
	}
	fake.createStackWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.CreateStackOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) CreateStackRequest(arg1 *cloudformation.CreateStackInput) (*request.Request, *cloudformation.CreateStackOutput) {
	fake.createStackRequestMutex.Lock()
	ret, specificReturn := fake.createStackRequestReturnsOnCall[len(fake.createStackRequestArgsForCall)]
	fake.createStackRequestArgsForCall = append(fake.createStackRequestArgsForCall, struct {
		arg1 *cloudformation.CreateStackInput
	}{arg1})
	fake.recordInvocation("CreateStackRequest", []interface{}{arg1})
	fake.createStackRequestMutex.Unlock()
	if fake.CreateStackRequestStub != nil {
		return fake.CreateStackRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createStackRequestReturns.result1, fake.createStackRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) CreateStackRequestCallCount() int {
	fake.createStackRequestMutex.RLock()
	defer fake.createStackRequestMutex.RUnlock()
	return len(fake.createStackRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) CreateStackRequestArgsForCall(i int) *cloudformation.CreateStackInput {
	fake.createStackRequestMutex.RLock()
	defer fake.createStackRequestMutex.RUnlock()
	return fake.createStackRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) CreateStackRequestReturns(result1 *request.Request, result2 *cloudformation.CreateStackOutput) {
	fake.CreateStackRequestStub = nil
	fake.createStackRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.CreateStackOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) CreateStackRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.CreateStackOutput) {
	fake.CreateStackRequestStub = nil
	if fake.createStackRequestReturnsOnCall == nil {
		fake.createStackRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.CreateStackOutput
		})
	}
	fake.createStackRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.CreateStackOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) CreateStackInstances(arg1 *cloudformation.CreateStackInstancesInput) (*cloudformation.CreateStackInstancesOutput, error) {
	fake.createStackInstancesMutex.Lock()
	ret, specificReturn := fake.createStackInstancesReturnsOnCall[len(fake.createStackInstancesArgsForCall)]
	fake.createStackInstancesArgsForCall = append(fake.createStackInstancesArgsForCall, struct {
		arg1 *cloudformation.CreateStackInstancesInput
	}{arg1})
	fake.recordInvocation("CreateStackInstances", []interface{}{arg1})
	fake.createStackInstancesMutex.Unlock()
	if fake.CreateStackInstancesStub != nil {
		return fake.CreateStackInstancesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createStackInstancesReturns.result1, fake.createStackInstancesReturns.result2
}

func (fake *FakeCloudFormationAPI) CreateStackInstancesCallCount() int {
	fake.createStackInstancesMutex.RLock()
	defer fake.createStackInstancesMutex.RUnlock()
	return len(fake.createStackInstancesArgsForCall)
}

func (fake *FakeCloudFormationAPI) CreateStackInstancesArgsForCall(i int) *cloudformation.CreateStackInstancesInput {
	fake.createStackInstancesMutex.RLock()
	defer fake.createStackInstancesMutex.RUnlock()
	return fake.createStackInstancesArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) CreateStackInstancesReturns(result1 *cloudformation.CreateStackInstancesOutput, result2 error) {
	fake.CreateStackInstancesStub = nil
	fake.createStackInstancesReturns = struct {
		result1 *cloudformation.CreateStackInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) CreateStackInstancesReturnsOnCall(i int, result1 *cloudformation.CreateStackInstancesOutput, result2 error) {
	fake.CreateStackInstancesStub = nil
	if fake.createStackInstancesReturnsOnCall == nil {
		fake.createStackInstancesReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.CreateStackInstancesOutput
			result2 error
		})
	}
	fake.createStackInstancesReturnsOnCall[i] = struct {
		result1 *cloudformation.CreateStackInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) CreateStackInstancesWithContext(arg1 aws.Context, arg2 *cloudformation.CreateStackInstancesInput, arg3 ...request.Option) (*cloudformation.CreateStackInstancesOutput, error) {
	fake.createStackInstancesWithContextMutex.Lock()
	ret, specificReturn := fake.createStackInstancesWithContextReturnsOnCall[len(fake.createStackInstancesWithContextArgsForCall)]
	fake.createStackInstancesWithContextArgsForCall = append(fake.createStackInstancesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.CreateStackInstancesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateStackInstancesWithContext", []interface{}{arg1, arg2, arg3})
	fake.createStackInstancesWithContextMutex.Unlock()
	if fake.CreateStackInstancesWithContextStub != nil {
		return fake.CreateStackInstancesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createStackInstancesWithContextReturns.result1, fake.createStackInstancesWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) CreateStackInstancesWithContextCallCount() int {
	fake.createStackInstancesWithContextMutex.RLock()
	defer fake.createStackInstancesWithContextMutex.RUnlock()
	return len(fake.createStackInstancesWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) CreateStackInstancesWithContextArgsForCall(i int) (aws.Context, *cloudformation.CreateStackInstancesInput, []request.Option) {
	fake.createStackInstancesWithContextMutex.RLock()
	defer fake.createStackInstancesWithContextMutex.RUnlock()
	return fake.createStackInstancesWithContextArgsForCall[i].arg1, fake.createStackInstancesWithContextArgsForCall[i].arg2, fake.createStackInstancesWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) CreateStackInstancesWithContextReturns(result1 *cloudformation.CreateStackInstancesOutput, result2 error) {
	fake.CreateStackInstancesWithContextStub = nil
	fake.createStackInstancesWithContextReturns = struct {
		result1 *cloudformation.CreateStackInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) CreateStackInstancesWithContextReturnsOnCall(i int, result1 *cloudformation.CreateStackInstancesOutput, result2 error) {
	fake.CreateStackInstancesWithContextStub = nil
	if fake.createStackInstancesWithContextReturnsOnCall == nil {
		fake.createStackInstancesWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.CreateStackInstancesOutput
			result2 error
		})
	}
	fake.createStackInstancesWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.CreateStackInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) CreateStackInstancesRequest(arg1 *cloudformation.CreateStackInstancesInput) (*request.Request, *cloudformation.CreateStackInstancesOutput) {
	fake.createStackInstancesRequestMutex.Lock()
	ret, specificReturn := fake.createStackInstancesRequestReturnsOnCall[len(fake.createStackInstancesRequestArgsForCall)]
	fake.createStackInstancesRequestArgsForCall = append(fake.createStackInstancesRequestArgsForCall, struct {
		arg1 *cloudformation.CreateStackInstancesInput
	}{arg1})
	fake.recordInvocation("CreateStackInstancesRequest", []interface{}{arg1})
	fake.createStackInstancesRequestMutex.Unlock()
	if fake.CreateStackInstancesRequestStub != nil {
		return fake.CreateStackInstancesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createStackInstancesRequestReturns.result1, fake.createStackInstancesRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) CreateStackInstancesRequestCallCount() int {
	fake.createStackInstancesRequestMutex.RLock()
	defer fake.createStackInstancesRequestMutex.RUnlock()
	return len(fake.createStackInstancesRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) CreateStackInstancesRequestArgsForCall(i int) *cloudformation.CreateStackInstancesInput {
	fake.createStackInstancesRequestMutex.RLock()
	defer fake.createStackInstancesRequestMutex.RUnlock()
	return fake.createStackInstancesRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) CreateStackInstancesRequestReturns(result1 *request.Request, result2 *cloudformation.CreateStackInstancesOutput) {
	fake.CreateStackInstancesRequestStub = nil
	fake.createStackInstancesRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.CreateStackInstancesOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) CreateStackInstancesRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.CreateStackInstancesOutput) {
	fake.CreateStackInstancesRequestStub = nil
	if fake.createStackInstancesRequestReturnsOnCall == nil {
		fake.createStackInstancesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.CreateStackInstancesOutput
		})
	}
	fake.createStackInstancesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.CreateStackInstancesOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) CreateStackSet(arg1 *cloudformation.CreateStackSetInput) (*cloudformation.CreateStackSetOutput, error) {
	fake.createStackSetMutex.Lock()
	ret, specificReturn := fake.createStackSetReturnsOnCall[len(fake.createStackSetArgsForCall)]
	fake.createStackSetArgsForCall = append(fake.createStackSetArgsForCall, struct {
		arg1 *cloudformation.CreateStackSetInput
	}{arg1})
	fake.recordInvocation("CreateStackSet", []interface{}{arg1})
	fake.createStackSetMutex.Unlock()
	if fake.CreateStackSetStub != nil {
		return fake.CreateStackSetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createStackSetReturns.result1, fake.createStackSetReturns.result2
}

func (fake *FakeCloudFormationAPI) CreateStackSetCallCount() int {
	fake.createStackSetMutex.RLock()
	defer fake.createStackSetMutex.RUnlock()
	return len(fake.createStackSetArgsForCall)
}

func (fake *FakeCloudFormationAPI) CreateStackSetArgsForCall(i int) *cloudformation.CreateStackSetInput {
	fake.createStackSetMutex.RLock()
	defer fake.createStackSetMutex.RUnlock()
	return fake.createStackSetArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) CreateStackSetReturns(result1 *cloudformation.CreateStackSetOutput, result2 error) {
	fake.CreateStackSetStub = nil
	fake.createStackSetReturns = struct {
		result1 *cloudformation.CreateStackSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) CreateStackSetReturnsOnCall(i int, result1 *cloudformation.CreateStackSetOutput, result2 error) {
	fake.CreateStackSetStub = nil
	if fake.createStackSetReturnsOnCall == nil {
		fake.createStackSetReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.CreateStackSetOutput
			result2 error
		})
	}
	fake.createStackSetReturnsOnCall[i] = struct {
		result1 *cloudformation.CreateStackSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) CreateStackSetWithContext(arg1 aws.Context, arg2 *cloudformation.CreateStackSetInput, arg3 ...request.Option) (*cloudformation.CreateStackSetOutput, error) {
	fake.createStackSetWithContextMutex.Lock()
	ret, specificReturn := fake.createStackSetWithContextReturnsOnCall[len(fake.createStackSetWithContextArgsForCall)]
	fake.createStackSetWithContextArgsForCall = append(fake.createStackSetWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.CreateStackSetInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateStackSetWithContext", []interface{}{arg1, arg2, arg3})
	fake.createStackSetWithContextMutex.Unlock()
	if fake.CreateStackSetWithContextStub != nil {
		return fake.CreateStackSetWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createStackSetWithContextReturns.result1, fake.createStackSetWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) CreateStackSetWithContextCallCount() int {
	fake.createStackSetWithContextMutex.RLock()
	defer fake.createStackSetWithContextMutex.RUnlock()
	return len(fake.createStackSetWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) CreateStackSetWithContextArgsForCall(i int) (aws.Context, *cloudformation.CreateStackSetInput, []request.Option) {
	fake.createStackSetWithContextMutex.RLock()
	defer fake.createStackSetWithContextMutex.RUnlock()
	return fake.createStackSetWithContextArgsForCall[i].arg1, fake.createStackSetWithContextArgsForCall[i].arg2, fake.createStackSetWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) CreateStackSetWithContextReturns(result1 *cloudformation.CreateStackSetOutput, result2 error) {
	fake.CreateStackSetWithContextStub = nil
	fake.createStackSetWithContextReturns = struct {
		result1 *cloudformation.CreateStackSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) CreateStackSetWithContextReturnsOnCall(i int, result1 *cloudformation.CreateStackSetOutput, result2 error) {
	fake.CreateStackSetWithContextStub = nil
	if fake.createStackSetWithContextReturnsOnCall == nil {
		fake.createStackSetWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.CreateStackSetOutput
			result2 error
		})
	}
	fake.createStackSetWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.CreateStackSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) CreateStackSetRequest(arg1 *cloudformation.CreateStackSetInput) (*request.Request, *cloudformation.CreateStackSetOutput) {
	fake.createStackSetRequestMutex.Lock()
	ret, specificReturn := fake.createStackSetRequestReturnsOnCall[len(fake.createStackSetRequestArgsForCall)]
	fake.createStackSetRequestArgsForCall = append(fake.createStackSetRequestArgsForCall, struct {
		arg1 *cloudformation.CreateStackSetInput
	}{arg1})
	fake.recordInvocation("CreateStackSetRequest", []interface{}{arg1})
	fake.createStackSetRequestMutex.Unlock()
	if fake.CreateStackSetRequestStub != nil {
		return fake.CreateStackSetRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createStackSetRequestReturns.result1, fake.createStackSetRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) CreateStackSetRequestCallCount() int {
	fake.createStackSetRequestMutex.RLock()
	defer fake.createStackSetRequestMutex.RUnlock()
	return len(fake.createStackSetRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) CreateStackSetRequestArgsForCall(i int) *cloudformation.CreateStackSetInput {
	fake.createStackSetRequestMutex.RLock()
	defer fake.createStackSetRequestMutex.RUnlock()
	return fake.createStackSetRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) CreateStackSetRequestReturns(result1 *request.Request, result2 *cloudformation.CreateStackSetOutput) {
	fake.CreateStackSetRequestStub = nil
	fake.createStackSetRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.CreateStackSetOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) CreateStackSetRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.CreateStackSetOutput) {
	fake.CreateStackSetRequestStub = nil
	if fake.createStackSetRequestReturnsOnCall == nil {
		fake.createStackSetRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.CreateStackSetOutput
		})
	}
	fake.createStackSetRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.CreateStackSetOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DeleteChangeSet(arg1 *cloudformation.DeleteChangeSetInput) (*cloudformation.DeleteChangeSetOutput, error) {
	fake.deleteChangeSetMutex.Lock()
	ret, specificReturn := fake.deleteChangeSetReturnsOnCall[len(fake.deleteChangeSetArgsForCall)]
	fake.deleteChangeSetArgsForCall = append(fake.deleteChangeSetArgsForCall, struct {
		arg1 *cloudformation.DeleteChangeSetInput
	}{arg1})
	fake.recordInvocation("DeleteChangeSet", []interface{}{arg1})
	fake.deleteChangeSetMutex.Unlock()
	if fake.DeleteChangeSetStub != nil {
		return fake.DeleteChangeSetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteChangeSetReturns.result1, fake.deleteChangeSetReturns.result2
}

func (fake *FakeCloudFormationAPI) DeleteChangeSetCallCount() int {
	fake.deleteChangeSetMutex.RLock()
	defer fake.deleteChangeSetMutex.RUnlock()
	return len(fake.deleteChangeSetArgsForCall)
}

func (fake *FakeCloudFormationAPI) DeleteChangeSetArgsForCall(i int) *cloudformation.DeleteChangeSetInput {
	fake.deleteChangeSetMutex.RLock()
	defer fake.deleteChangeSetMutex.RUnlock()
	return fake.deleteChangeSetArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) DeleteChangeSetReturns(result1 *cloudformation.DeleteChangeSetOutput, result2 error) {
	fake.DeleteChangeSetStub = nil
	fake.deleteChangeSetReturns = struct {
		result1 *cloudformation.DeleteChangeSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DeleteChangeSetReturnsOnCall(i int, result1 *cloudformation.DeleteChangeSetOutput, result2 error) {
	fake.DeleteChangeSetStub = nil
	if fake.deleteChangeSetReturnsOnCall == nil {
		fake.deleteChangeSetReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.DeleteChangeSetOutput
			result2 error
		})
	}
	fake.deleteChangeSetReturnsOnCall[i] = struct {
		result1 *cloudformation.DeleteChangeSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DeleteChangeSetWithContext(arg1 aws.Context, arg2 *cloudformation.DeleteChangeSetInput, arg3 ...request.Option) (*cloudformation.DeleteChangeSetOutput, error) {
	fake.deleteChangeSetWithContextMutex.Lock()
	ret, specificReturn := fake.deleteChangeSetWithContextReturnsOnCall[len(fake.deleteChangeSetWithContextArgsForCall)]
	fake.deleteChangeSetWithContextArgsForCall = append(fake.deleteChangeSetWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.DeleteChangeSetInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteChangeSetWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteChangeSetWithContextMutex.Unlock()
	if fake.DeleteChangeSetWithContextStub != nil {
		return fake.DeleteChangeSetWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteChangeSetWithContextReturns.result1, fake.deleteChangeSetWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) DeleteChangeSetWithContextCallCount() int {
	fake.deleteChangeSetWithContextMutex.RLock()
	defer fake.deleteChangeSetWithContextMutex.RUnlock()
	return len(fake.deleteChangeSetWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) DeleteChangeSetWithContextArgsForCall(i int) (aws.Context, *cloudformation.DeleteChangeSetInput, []request.Option) {
	fake.deleteChangeSetWithContextMutex.RLock()
	defer fake.deleteChangeSetWithContextMutex.RUnlock()
	return fake.deleteChangeSetWithContextArgsForCall[i].arg1, fake.deleteChangeSetWithContextArgsForCall[i].arg2, fake.deleteChangeSetWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) DeleteChangeSetWithContextReturns(result1 *cloudformation.DeleteChangeSetOutput, result2 error) {
	fake.DeleteChangeSetWithContextStub = nil
	fake.deleteChangeSetWithContextReturns = struct {
		result1 *cloudformation.DeleteChangeSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DeleteChangeSetWithContextReturnsOnCall(i int, result1 *cloudformation.DeleteChangeSetOutput, result2 error) {
	fake.DeleteChangeSetWithContextStub = nil
	if fake.deleteChangeSetWithContextReturnsOnCall == nil {
		fake.deleteChangeSetWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.DeleteChangeSetOutput
			result2 error
		})
	}
	fake.deleteChangeSetWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.DeleteChangeSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DeleteChangeSetRequest(arg1 *cloudformation.DeleteChangeSetInput) (*request.Request, *cloudformation.DeleteChangeSetOutput) {
	fake.deleteChangeSetRequestMutex.Lock()
	ret, specificReturn := fake.deleteChangeSetRequestReturnsOnCall[len(fake.deleteChangeSetRequestArgsForCall)]
	fake.deleteChangeSetRequestArgsForCall = append(fake.deleteChangeSetRequestArgsForCall, struct {
		arg1 *cloudformation.DeleteChangeSetInput
	}{arg1})
	fake.recordInvocation("DeleteChangeSetRequest", []interface{}{arg1})
	fake.deleteChangeSetRequestMutex.Unlock()
	if fake.DeleteChangeSetRequestStub != nil {
		return fake.DeleteChangeSetRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteChangeSetRequestReturns.result1, fake.deleteChangeSetRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) DeleteChangeSetRequestCallCount() int {
	fake.deleteChangeSetRequestMutex.RLock()
	defer fake.deleteChangeSetRequestMutex.RUnlock()
	return len(fake.deleteChangeSetRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) DeleteChangeSetRequestArgsForCall(i int) *cloudformation.DeleteChangeSetInput {
	fake.deleteChangeSetRequestMutex.RLock()
	defer fake.deleteChangeSetRequestMutex.RUnlock()
	return fake.deleteChangeSetRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) DeleteChangeSetRequestReturns(result1 *request.Request, result2 *cloudformation.DeleteChangeSetOutput) {
	fake.DeleteChangeSetRequestStub = nil
	fake.deleteChangeSetRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.DeleteChangeSetOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DeleteChangeSetRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.DeleteChangeSetOutput) {
	fake.DeleteChangeSetRequestStub = nil
	if fake.deleteChangeSetRequestReturnsOnCall == nil {
		fake.deleteChangeSetRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.DeleteChangeSetOutput
		})
	}
	fake.deleteChangeSetRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.DeleteChangeSetOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DeleteStack(arg1 *cloudformation.DeleteStackInput) (*cloudformation.DeleteStackOutput, error) {
	fake.deleteStackMutex.Lock()
	ret, specificReturn := fake.deleteStackReturnsOnCall[len(fake.deleteStackArgsForCall)]
	fake.deleteStackArgsForCall = append(fake.deleteStackArgsForCall, struct {
		arg1 *cloudformation.DeleteStackInput
	}{arg1})
	fake.recordInvocation("DeleteStack", []interface{}{arg1})
	fake.deleteStackMutex.Unlock()
	if fake.DeleteStackStub != nil {
		return fake.DeleteStackStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteStackReturns.result1, fake.deleteStackReturns.result2
}

func (fake *FakeCloudFormationAPI) DeleteStackCallCount() int {
	fake.deleteStackMutex.RLock()
	defer fake.deleteStackMutex.RUnlock()
	return len(fake.deleteStackArgsForCall)
}

func (fake *FakeCloudFormationAPI) DeleteStackArgsForCall(i int) *cloudformation.DeleteStackInput {
	fake.deleteStackMutex.RLock()
	defer fake.deleteStackMutex.RUnlock()
	return fake.deleteStackArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) DeleteStackReturns(result1 *cloudformation.DeleteStackOutput, result2 error) {
	fake.DeleteStackStub = nil
	fake.deleteStackReturns = struct {
		result1 *cloudformation.DeleteStackOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DeleteStackReturnsOnCall(i int, result1 *cloudformation.DeleteStackOutput, result2 error) {
	fake.DeleteStackStub = nil
	if fake.deleteStackReturnsOnCall == nil {
		fake.deleteStackReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.DeleteStackOutput
			result2 error
		})
	}
	fake.deleteStackReturnsOnCall[i] = struct {
		result1 *cloudformation.DeleteStackOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DeleteStackWithContext(arg1 aws.Context, arg2 *cloudformation.DeleteStackInput, arg3 ...request.Option) (*cloudformation.DeleteStackOutput, error) {
	fake.deleteStackWithContextMutex.Lock()
	ret, specificReturn := fake.deleteStackWithContextReturnsOnCall[len(fake.deleteStackWithContextArgsForCall)]
	fake.deleteStackWithContextArgsForCall = append(fake.deleteStackWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.DeleteStackInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteStackWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteStackWithContextMutex.Unlock()
	if fake.DeleteStackWithContextStub != nil {
		return fake.DeleteStackWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteStackWithContextReturns.result1, fake.deleteStackWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) DeleteStackWithContextCallCount() int {
	fake.deleteStackWithContextMutex.RLock()
	defer fake.deleteStackWithContextMutex.RUnlock()
	return len(fake.deleteStackWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) DeleteStackWithContextArgsForCall(i int) (aws.Context, *cloudformation.DeleteStackInput, []request.Option) {
	fake.deleteStackWithContextMutex.RLock()
	defer fake.deleteStackWithContextMutex.RUnlock()
	return fake.deleteStackWithContextArgsForCall[i].arg1, fake.deleteStackWithContextArgsForCall[i].arg2, fake.deleteStackWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) DeleteStackWithContextReturns(result1 *cloudformation.DeleteStackOutput, result2 error) {
	fake.DeleteStackWithContextStub = nil
	fake.deleteStackWithContextReturns = struct {
		result1 *cloudformation.DeleteStackOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DeleteStackWithContextReturnsOnCall(i int, result1 *cloudformation.DeleteStackOutput, result2 error) {
	fake.DeleteStackWithContextStub = nil
	if fake.deleteStackWithContextReturnsOnCall == nil {
		fake.deleteStackWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.DeleteStackOutput
			result2 error
		})
	}
	fake.deleteStackWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.DeleteStackOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DeleteStackRequest(arg1 *cloudformation.DeleteStackInput) (*request.Request, *cloudformation.DeleteStackOutput) {
	fake.deleteStackRequestMutex.Lock()
	ret, specificReturn := fake.deleteStackRequestReturnsOnCall[len(fake.deleteStackRequestArgsForCall)]
	fake.deleteStackRequestArgsForCall = append(fake.deleteStackRequestArgsForCall, struct {
		arg1 *cloudformation.DeleteStackInput
	}{arg1})
	fake.recordInvocation("DeleteStackRequest", []interface{}{arg1})
	fake.deleteStackRequestMutex.Unlock()
	if fake.DeleteStackRequestStub != nil {
		return fake.DeleteStackRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteStackRequestReturns.result1, fake.deleteStackRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) DeleteStackRequestCallCount() int {
	fake.deleteStackRequestMutex.RLock()
	defer fake.deleteStackRequestMutex.RUnlock()
	return len(fake.deleteStackRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) DeleteStackRequestArgsForCall(i int) *cloudformation.DeleteStackInput {
	fake.deleteStackRequestMutex.RLock()
	defer fake.deleteStackRequestMutex.RUnlock()
	return fake.deleteStackRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) DeleteStackRequestReturns(result1 *request.Request, result2 *cloudformation.DeleteStackOutput) {
	fake.DeleteStackRequestStub = nil
	fake.deleteStackRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.DeleteStackOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DeleteStackRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.DeleteStackOutput) {
	fake.DeleteStackRequestStub = nil
	if fake.deleteStackRequestReturnsOnCall == nil {
		fake.deleteStackRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.DeleteStackOutput
		})
	}
	fake.deleteStackRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.DeleteStackOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DeleteStackInstances(arg1 *cloudformation.DeleteStackInstancesInput) (*cloudformation.DeleteStackInstancesOutput, error) {
	fake.deleteStackInstancesMutex.Lock()
	ret, specificReturn := fake.deleteStackInstancesReturnsOnCall[len(fake.deleteStackInstancesArgsForCall)]
	fake.deleteStackInstancesArgsForCall = append(fake.deleteStackInstancesArgsForCall, struct {
		arg1 *cloudformation.DeleteStackInstancesInput
	}{arg1})
	fake.recordInvocation("DeleteStackInstances", []interface{}{arg1})
	fake.deleteStackInstancesMutex.Unlock()
	if fake.DeleteStackInstancesStub != nil {
		return fake.DeleteStackInstancesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteStackInstancesReturns.result1, fake.deleteStackInstancesReturns.result2
}

func (fake *FakeCloudFormationAPI) DeleteStackInstancesCallCount() int {
	fake.deleteStackInstancesMutex.RLock()
	defer fake.deleteStackInstancesMutex.RUnlock()
	return len(fake.deleteStackInstancesArgsForCall)
}

func (fake *FakeCloudFormationAPI) DeleteStackInstancesArgsForCall(i int) *cloudformation.DeleteStackInstancesInput {
	fake.deleteStackInstancesMutex.RLock()
	defer fake.deleteStackInstancesMutex.RUnlock()
	return fake.deleteStackInstancesArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) DeleteStackInstancesReturns(result1 *cloudformation.DeleteStackInstancesOutput, result2 error) {
	fake.DeleteStackInstancesStub = nil
	fake.deleteStackInstancesReturns = struct {
		result1 *cloudformation.DeleteStackInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DeleteStackInstancesReturnsOnCall(i int, result1 *cloudformation.DeleteStackInstancesOutput, result2 error) {
	fake.DeleteStackInstancesStub = nil
	if fake.deleteStackInstancesReturnsOnCall == nil {
		fake.deleteStackInstancesReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.DeleteStackInstancesOutput
			result2 error
		})
	}
	fake.deleteStackInstancesReturnsOnCall[i] = struct {
		result1 *cloudformation.DeleteStackInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DeleteStackInstancesWithContext(arg1 aws.Context, arg2 *cloudformation.DeleteStackInstancesInput, arg3 ...request.Option) (*cloudformation.DeleteStackInstancesOutput, error) {
	fake.deleteStackInstancesWithContextMutex.Lock()
	ret, specificReturn := fake.deleteStackInstancesWithContextReturnsOnCall[len(fake.deleteStackInstancesWithContextArgsForCall)]
	fake.deleteStackInstancesWithContextArgsForCall = append(fake.deleteStackInstancesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.DeleteStackInstancesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteStackInstancesWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteStackInstancesWithContextMutex.Unlock()
	if fake.DeleteStackInstancesWithContextStub != nil {
		return fake.DeleteStackInstancesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteStackInstancesWithContextReturns.result1, fake.deleteStackInstancesWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) DeleteStackInstancesWithContextCallCount() int {
	fake.deleteStackInstancesWithContextMutex.RLock()
	defer fake.deleteStackInstancesWithContextMutex.RUnlock()
	return len(fake.deleteStackInstancesWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) DeleteStackInstancesWithContextArgsForCall(i int) (aws.Context, *cloudformation.DeleteStackInstancesInput, []request.Option) {
	fake.deleteStackInstancesWithContextMutex.RLock()
	defer fake.deleteStackInstancesWithContextMutex.RUnlock()
	return fake.deleteStackInstancesWithContextArgsForCall[i].arg1, fake.deleteStackInstancesWithContextArgsForCall[i].arg2, fake.deleteStackInstancesWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) DeleteStackInstancesWithContextReturns(result1 *cloudformation.DeleteStackInstancesOutput, result2 error) {
	fake.DeleteStackInstancesWithContextStub = nil
	fake.deleteStackInstancesWithContextReturns = struct {
		result1 *cloudformation.DeleteStackInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DeleteStackInstancesWithContextReturnsOnCall(i int, result1 *cloudformation.DeleteStackInstancesOutput, result2 error) {
	fake.DeleteStackInstancesWithContextStub = nil
	if fake.deleteStackInstancesWithContextReturnsOnCall == nil {
		fake.deleteStackInstancesWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.DeleteStackInstancesOutput
			result2 error
		})
	}
	fake.deleteStackInstancesWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.DeleteStackInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DeleteStackInstancesRequest(arg1 *cloudformation.DeleteStackInstancesInput) (*request.Request, *cloudformation.DeleteStackInstancesOutput) {
	fake.deleteStackInstancesRequestMutex.Lock()
	ret, specificReturn := fake.deleteStackInstancesRequestReturnsOnCall[len(fake.deleteStackInstancesRequestArgsForCall)]
	fake.deleteStackInstancesRequestArgsForCall = append(fake.deleteStackInstancesRequestArgsForCall, struct {
		arg1 *cloudformation.DeleteStackInstancesInput
	}{arg1})
	fake.recordInvocation("DeleteStackInstancesRequest", []interface{}{arg1})
	fake.deleteStackInstancesRequestMutex.Unlock()
	if fake.DeleteStackInstancesRequestStub != nil {
		return fake.DeleteStackInstancesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteStackInstancesRequestReturns.result1, fake.deleteStackInstancesRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) DeleteStackInstancesRequestCallCount() int {
	fake.deleteStackInstancesRequestMutex.RLock()
	defer fake.deleteStackInstancesRequestMutex.RUnlock()
	return len(fake.deleteStackInstancesRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) DeleteStackInstancesRequestArgsForCall(i int) *cloudformation.DeleteStackInstancesInput {
	fake.deleteStackInstancesRequestMutex.RLock()
	defer fake.deleteStackInstancesRequestMutex.RUnlock()
	return fake.deleteStackInstancesRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) DeleteStackInstancesRequestReturns(result1 *request.Request, result2 *cloudformation.DeleteStackInstancesOutput) {
	fake.DeleteStackInstancesRequestStub = nil
	fake.deleteStackInstancesRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.DeleteStackInstancesOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DeleteStackInstancesRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.DeleteStackInstancesOutput) {
	fake.DeleteStackInstancesRequestStub = nil
	if fake.deleteStackInstancesRequestReturnsOnCall == nil {
		fake.deleteStackInstancesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.DeleteStackInstancesOutput
		})
	}
	fake.deleteStackInstancesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.DeleteStackInstancesOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DeleteStackSet(arg1 *cloudformation.DeleteStackSetInput) (*cloudformation.DeleteStackSetOutput, error) {
	fake.deleteStackSetMutex.Lock()
	ret, specificReturn := fake.deleteStackSetReturnsOnCall[len(fake.deleteStackSetArgsForCall)]
	fake.deleteStackSetArgsForCall = append(fake.deleteStackSetArgsForCall, struct {
		arg1 *cloudformation.DeleteStackSetInput
	}{arg1})
	fake.recordInvocation("DeleteStackSet", []interface{}{arg1})
	fake.deleteStackSetMutex.Unlock()
	if fake.DeleteStackSetStub != nil {
		return fake.DeleteStackSetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteStackSetReturns.result1, fake.deleteStackSetReturns.result2
}

func (fake *FakeCloudFormationAPI) DeleteStackSetCallCount() int {
	fake.deleteStackSetMutex.RLock()
	defer fake.deleteStackSetMutex.RUnlock()
	return len(fake.deleteStackSetArgsForCall)
}

func (fake *FakeCloudFormationAPI) DeleteStackSetArgsForCall(i int) *cloudformation.DeleteStackSetInput {
	fake.deleteStackSetMutex.RLock()
	defer fake.deleteStackSetMutex.RUnlock()
	return fake.deleteStackSetArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) DeleteStackSetReturns(result1 *cloudformation.DeleteStackSetOutput, result2 error) {
	fake.DeleteStackSetStub = nil
	fake.deleteStackSetReturns = struct {
		result1 *cloudformation.DeleteStackSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DeleteStackSetReturnsOnCall(i int, result1 *cloudformation.DeleteStackSetOutput, result2 error) {
	fake.DeleteStackSetStub = nil
	if fake.deleteStackSetReturnsOnCall == nil {
		fake.deleteStackSetReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.DeleteStackSetOutput
			result2 error
		})
	}
	fake.deleteStackSetReturnsOnCall[i] = struct {
		result1 *cloudformation.DeleteStackSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DeleteStackSetWithContext(arg1 aws.Context, arg2 *cloudformation.DeleteStackSetInput, arg3 ...request.Option) (*cloudformation.DeleteStackSetOutput, error) {
	fake.deleteStackSetWithContextMutex.Lock()
	ret, specificReturn := fake.deleteStackSetWithContextReturnsOnCall[len(fake.deleteStackSetWithContextArgsForCall)]
	fake.deleteStackSetWithContextArgsForCall = append(fake.deleteStackSetWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.DeleteStackSetInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteStackSetWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteStackSetWithContextMutex.Unlock()
	if fake.DeleteStackSetWithContextStub != nil {
		return fake.DeleteStackSetWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteStackSetWithContextReturns.result1, fake.deleteStackSetWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) DeleteStackSetWithContextCallCount() int {
	fake.deleteStackSetWithContextMutex.RLock()
	defer fake.deleteStackSetWithContextMutex.RUnlock()
	return len(fake.deleteStackSetWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) DeleteStackSetWithContextArgsForCall(i int) (aws.Context, *cloudformation.DeleteStackSetInput, []request.Option) {
	fake.deleteStackSetWithContextMutex.RLock()
	defer fake.deleteStackSetWithContextMutex.RUnlock()
	return fake.deleteStackSetWithContextArgsForCall[i].arg1, fake.deleteStackSetWithContextArgsForCall[i].arg2, fake.deleteStackSetWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) DeleteStackSetWithContextReturns(result1 *cloudformation.DeleteStackSetOutput, result2 error) {
	fake.DeleteStackSetWithContextStub = nil
	fake.deleteStackSetWithContextReturns = struct {
		result1 *cloudformation.DeleteStackSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DeleteStackSetWithContextReturnsOnCall(i int, result1 *cloudformation.DeleteStackSetOutput, result2 error) {
	fake.DeleteStackSetWithContextStub = nil
	if fake.deleteStackSetWithContextReturnsOnCall == nil {
		fake.deleteStackSetWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.DeleteStackSetOutput
			result2 error
		})
	}
	fake.deleteStackSetWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.DeleteStackSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DeleteStackSetRequest(arg1 *cloudformation.DeleteStackSetInput) (*request.Request, *cloudformation.DeleteStackSetOutput) {
	fake.deleteStackSetRequestMutex.Lock()
	ret, specificReturn := fake.deleteStackSetRequestReturnsOnCall[len(fake.deleteStackSetRequestArgsForCall)]
	fake.deleteStackSetRequestArgsForCall = append(fake.deleteStackSetRequestArgsForCall, struct {
		arg1 *cloudformation.DeleteStackSetInput
	}{arg1})
	fake.recordInvocation("DeleteStackSetRequest", []interface{}{arg1})
	fake.deleteStackSetRequestMutex.Unlock()
	if fake.DeleteStackSetRequestStub != nil {
		return fake.DeleteStackSetRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteStackSetRequestReturns.result1, fake.deleteStackSetRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) DeleteStackSetRequestCallCount() int {
	fake.deleteStackSetRequestMutex.RLock()
	defer fake.deleteStackSetRequestMutex.RUnlock()
	return len(fake.deleteStackSetRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) DeleteStackSetRequestArgsForCall(i int) *cloudformation.DeleteStackSetInput {
	fake.deleteStackSetRequestMutex.RLock()
	defer fake.deleteStackSetRequestMutex.RUnlock()
	return fake.deleteStackSetRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) DeleteStackSetRequestReturns(result1 *request.Request, result2 *cloudformation.DeleteStackSetOutput) {
	fake.DeleteStackSetRequestStub = nil
	fake.deleteStackSetRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.DeleteStackSetOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DeleteStackSetRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.DeleteStackSetOutput) {
	fake.DeleteStackSetRequestStub = nil
	if fake.deleteStackSetRequestReturnsOnCall == nil {
		fake.deleteStackSetRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.DeleteStackSetOutput
		})
	}
	fake.deleteStackSetRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.DeleteStackSetOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeAccountLimits(arg1 *cloudformation.DescribeAccountLimitsInput) (*cloudformation.DescribeAccountLimitsOutput, error) {
	fake.describeAccountLimitsMutex.Lock()
	ret, specificReturn := fake.describeAccountLimitsReturnsOnCall[len(fake.describeAccountLimitsArgsForCall)]
	fake.describeAccountLimitsArgsForCall = append(fake.describeAccountLimitsArgsForCall, struct {
		arg1 *cloudformation.DescribeAccountLimitsInput
	}{arg1})
	fake.recordInvocation("DescribeAccountLimits", []interface{}{arg1})
	fake.describeAccountLimitsMutex.Unlock()
	if fake.DescribeAccountLimitsStub != nil {
		return fake.DescribeAccountLimitsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeAccountLimitsReturns.result1, fake.describeAccountLimitsReturns.result2
}

func (fake *FakeCloudFormationAPI) DescribeAccountLimitsCallCount() int {
	fake.describeAccountLimitsMutex.RLock()
	defer fake.describeAccountLimitsMutex.RUnlock()
	return len(fake.describeAccountLimitsArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeAccountLimitsArgsForCall(i int) *cloudformation.DescribeAccountLimitsInput {
	fake.describeAccountLimitsMutex.RLock()
	defer fake.describeAccountLimitsMutex.RUnlock()
	return fake.describeAccountLimitsArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) DescribeAccountLimitsReturns(result1 *cloudformation.DescribeAccountLimitsOutput, result2 error) {
	fake.DescribeAccountLimitsStub = nil
	fake.describeAccountLimitsReturns = struct {
		result1 *cloudformation.DescribeAccountLimitsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeAccountLimitsReturnsOnCall(i int, result1 *cloudformation.DescribeAccountLimitsOutput, result2 error) {
	fake.DescribeAccountLimitsStub = nil
	if fake.describeAccountLimitsReturnsOnCall == nil {
		fake.describeAccountLimitsReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.DescribeAccountLimitsOutput
			result2 error
		})
	}
	fake.describeAccountLimitsReturnsOnCall[i] = struct {
		result1 *cloudformation.DescribeAccountLimitsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeAccountLimitsWithContext(arg1 aws.Context, arg2 *cloudformation.DescribeAccountLimitsInput, arg3 ...request.Option) (*cloudformation.DescribeAccountLimitsOutput, error) {
	fake.describeAccountLimitsWithContextMutex.Lock()
	ret, specificReturn := fake.describeAccountLimitsWithContextReturnsOnCall[len(fake.describeAccountLimitsWithContextArgsForCall)]
	fake.describeAccountLimitsWithContextArgsForCall = append(fake.describeAccountLimitsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeAccountLimitsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeAccountLimitsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeAccountLimitsWithContextMutex.Unlock()
	if fake.DescribeAccountLimitsWithContextStub != nil {
		return fake.DescribeAccountLimitsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeAccountLimitsWithContextReturns.result1, fake.describeAccountLimitsWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) DescribeAccountLimitsWithContextCallCount() int {
	fake.describeAccountLimitsWithContextMutex.RLock()
	defer fake.describeAccountLimitsWithContextMutex.RUnlock()
	return len(fake.describeAccountLimitsWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeAccountLimitsWithContextArgsForCall(i int) (aws.Context, *cloudformation.DescribeAccountLimitsInput, []request.Option) {
	fake.describeAccountLimitsWithContextMutex.RLock()
	defer fake.describeAccountLimitsWithContextMutex.RUnlock()
	return fake.describeAccountLimitsWithContextArgsForCall[i].arg1, fake.describeAccountLimitsWithContextArgsForCall[i].arg2, fake.describeAccountLimitsWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) DescribeAccountLimitsWithContextReturns(result1 *cloudformation.DescribeAccountLimitsOutput, result2 error) {
	fake.DescribeAccountLimitsWithContextStub = nil
	fake.describeAccountLimitsWithContextReturns = struct {
		result1 *cloudformation.DescribeAccountLimitsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeAccountLimitsWithContextReturnsOnCall(i int, result1 *cloudformation.DescribeAccountLimitsOutput, result2 error) {
	fake.DescribeAccountLimitsWithContextStub = nil
	if fake.describeAccountLimitsWithContextReturnsOnCall == nil {
		fake.describeAccountLimitsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.DescribeAccountLimitsOutput
			result2 error
		})
	}
	fake.describeAccountLimitsWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.DescribeAccountLimitsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeAccountLimitsRequest(arg1 *cloudformation.DescribeAccountLimitsInput) (*request.Request, *cloudformation.DescribeAccountLimitsOutput) {
	fake.describeAccountLimitsRequestMutex.Lock()
	ret, specificReturn := fake.describeAccountLimitsRequestReturnsOnCall[len(fake.describeAccountLimitsRequestArgsForCall)]
	fake.describeAccountLimitsRequestArgsForCall = append(fake.describeAccountLimitsRequestArgsForCall, struct {
		arg1 *cloudformation.DescribeAccountLimitsInput
	}{arg1})
	fake.recordInvocation("DescribeAccountLimitsRequest", []interface{}{arg1})
	fake.describeAccountLimitsRequestMutex.Unlock()
	if fake.DescribeAccountLimitsRequestStub != nil {
		return fake.DescribeAccountLimitsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeAccountLimitsRequestReturns.result1, fake.describeAccountLimitsRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) DescribeAccountLimitsRequestCallCount() int {
	fake.describeAccountLimitsRequestMutex.RLock()
	defer fake.describeAccountLimitsRequestMutex.RUnlock()
	return len(fake.describeAccountLimitsRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeAccountLimitsRequestArgsForCall(i int) *cloudformation.DescribeAccountLimitsInput {
	fake.describeAccountLimitsRequestMutex.RLock()
	defer fake.describeAccountLimitsRequestMutex.RUnlock()
	return fake.describeAccountLimitsRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) DescribeAccountLimitsRequestReturns(result1 *request.Request, result2 *cloudformation.DescribeAccountLimitsOutput) {
	fake.DescribeAccountLimitsRequestStub = nil
	fake.describeAccountLimitsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.DescribeAccountLimitsOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeAccountLimitsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.DescribeAccountLimitsOutput) {
	fake.DescribeAccountLimitsRequestStub = nil
	if fake.describeAccountLimitsRequestReturnsOnCall == nil {
		fake.describeAccountLimitsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.DescribeAccountLimitsOutput
		})
	}
	fake.describeAccountLimitsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.DescribeAccountLimitsOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeChangeSet(arg1 *cloudformation.DescribeChangeSetInput) (*cloudformation.DescribeChangeSetOutput, error) {
	fake.describeChangeSetMutex.Lock()
	ret, specificReturn := fake.describeChangeSetReturnsOnCall[len(fake.describeChangeSetArgsForCall)]
	fake.describeChangeSetArgsForCall = append(fake.describeChangeSetArgsForCall, struct {
		arg1 *cloudformation.DescribeChangeSetInput
	}{arg1})
	fake.recordInvocation("DescribeChangeSet", []interface{}{arg1})
	fake.describeChangeSetMutex.Unlock()
	if fake.DescribeChangeSetStub != nil {
		return fake.DescribeChangeSetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeChangeSetReturns.result1, fake.describeChangeSetReturns.result2
}

func (fake *FakeCloudFormationAPI) DescribeChangeSetCallCount() int {
	fake.describeChangeSetMutex.RLock()
	defer fake.describeChangeSetMutex.RUnlock()
	return len(fake.describeChangeSetArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeChangeSetArgsForCall(i int) *cloudformation.DescribeChangeSetInput {
	fake.describeChangeSetMutex.RLock()
	defer fake.describeChangeSetMutex.RUnlock()
	return fake.describeChangeSetArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) DescribeChangeSetReturns(result1 *cloudformation.DescribeChangeSetOutput, result2 error) {
	fake.DescribeChangeSetStub = nil
	fake.describeChangeSetReturns = struct {
		result1 *cloudformation.DescribeChangeSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeChangeSetReturnsOnCall(i int, result1 *cloudformation.DescribeChangeSetOutput, result2 error) {
	fake.DescribeChangeSetStub = nil
	if fake.describeChangeSetReturnsOnCall == nil {
		fake.describeChangeSetReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.DescribeChangeSetOutput
			result2 error
		})
	}
	fake.describeChangeSetReturnsOnCall[i] = struct {
		result1 *cloudformation.DescribeChangeSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeChangeSetWithContext(arg1 aws.Context, arg2 *cloudformation.DescribeChangeSetInput, arg3 ...request.Option) (*cloudformation.DescribeChangeSetOutput, error) {
	fake.describeChangeSetWithContextMutex.Lock()
	ret, specificReturn := fake.describeChangeSetWithContextReturnsOnCall[len(fake.describeChangeSetWithContextArgsForCall)]
	fake.describeChangeSetWithContextArgsForCall = append(fake.describeChangeSetWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeChangeSetInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeChangeSetWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeChangeSetWithContextMutex.Unlock()
	if fake.DescribeChangeSetWithContextStub != nil {
		return fake.DescribeChangeSetWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeChangeSetWithContextReturns.result1, fake.describeChangeSetWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) DescribeChangeSetWithContextCallCount() int {
	fake.describeChangeSetWithContextMutex.RLock()
	defer fake.describeChangeSetWithContextMutex.RUnlock()
	return len(fake.describeChangeSetWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeChangeSetWithContextArgsForCall(i int) (aws.Context, *cloudformation.DescribeChangeSetInput, []request.Option) {
	fake.describeChangeSetWithContextMutex.RLock()
	defer fake.describeChangeSetWithContextMutex.RUnlock()
	return fake.describeChangeSetWithContextArgsForCall[i].arg1, fake.describeChangeSetWithContextArgsForCall[i].arg2, fake.describeChangeSetWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) DescribeChangeSetWithContextReturns(result1 *cloudformation.DescribeChangeSetOutput, result2 error) {
	fake.DescribeChangeSetWithContextStub = nil
	fake.describeChangeSetWithContextReturns = struct {
		result1 *cloudformation.DescribeChangeSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeChangeSetWithContextReturnsOnCall(i int, result1 *cloudformation.DescribeChangeSetOutput, result2 error) {
	fake.DescribeChangeSetWithContextStub = nil
	if fake.describeChangeSetWithContextReturnsOnCall == nil {
		fake.describeChangeSetWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.DescribeChangeSetOutput
			result2 error
		})
	}
	fake.describeChangeSetWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.DescribeChangeSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeChangeSetRequest(arg1 *cloudformation.DescribeChangeSetInput) (*request.Request, *cloudformation.DescribeChangeSetOutput) {
	fake.describeChangeSetRequestMutex.Lock()
	ret, specificReturn := fake.describeChangeSetRequestReturnsOnCall[len(fake.describeChangeSetRequestArgsForCall)]
	fake.describeChangeSetRequestArgsForCall = append(fake.describeChangeSetRequestArgsForCall, struct {
		arg1 *cloudformation.DescribeChangeSetInput
	}{arg1})
	fake.recordInvocation("DescribeChangeSetRequest", []interface{}{arg1})
	fake.describeChangeSetRequestMutex.Unlock()
	if fake.DescribeChangeSetRequestStub != nil {
		return fake.DescribeChangeSetRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeChangeSetRequestReturns.result1, fake.describeChangeSetRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) DescribeChangeSetRequestCallCount() int {
	fake.describeChangeSetRequestMutex.RLock()
	defer fake.describeChangeSetRequestMutex.RUnlock()
	return len(fake.describeChangeSetRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeChangeSetRequestArgsForCall(i int) *cloudformation.DescribeChangeSetInput {
	fake.describeChangeSetRequestMutex.RLock()
	defer fake.describeChangeSetRequestMutex.RUnlock()
	return fake.describeChangeSetRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) DescribeChangeSetRequestReturns(result1 *request.Request, result2 *cloudformation.DescribeChangeSetOutput) {
	fake.DescribeChangeSetRequestStub = nil
	fake.describeChangeSetRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.DescribeChangeSetOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeChangeSetRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.DescribeChangeSetOutput) {
	fake.DescribeChangeSetRequestStub = nil
	if fake.describeChangeSetRequestReturnsOnCall == nil {
		fake.describeChangeSetRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.DescribeChangeSetOutput
		})
	}
	fake.describeChangeSetRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.DescribeChangeSetOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackEvents(arg1 *cloudformation.DescribeStackEventsInput) (*cloudformation.DescribeStackEventsOutput, error) {
	fake.describeStackEventsMutex.Lock()
	ret, specificReturn := fake.describeStackEventsReturnsOnCall[len(fake.describeStackEventsArgsForCall)]
	fake.describeStackEventsArgsForCall = append(fake.describeStackEventsArgsForCall, struct {
		arg1 *cloudformation.DescribeStackEventsInput
	}{arg1})
	fake.recordInvocation("DescribeStackEvents", []interface{}{arg1})
	fake.describeStackEventsMutex.Unlock()
	if fake.DescribeStackEventsStub != nil {
		return fake.DescribeStackEventsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeStackEventsReturns.result1, fake.describeStackEventsReturns.result2
}

func (fake *FakeCloudFormationAPI) DescribeStackEventsCallCount() int {
	fake.describeStackEventsMutex.RLock()
	defer fake.describeStackEventsMutex.RUnlock()
	return len(fake.describeStackEventsArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeStackEventsArgsForCall(i int) *cloudformation.DescribeStackEventsInput {
	fake.describeStackEventsMutex.RLock()
	defer fake.describeStackEventsMutex.RUnlock()
	return fake.describeStackEventsArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) DescribeStackEventsReturns(result1 *cloudformation.DescribeStackEventsOutput, result2 error) {
	fake.DescribeStackEventsStub = nil
	fake.describeStackEventsReturns = struct {
		result1 *cloudformation.DescribeStackEventsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackEventsReturnsOnCall(i int, result1 *cloudformation.DescribeStackEventsOutput, result2 error) {
	fake.DescribeStackEventsStub = nil
	if fake.describeStackEventsReturnsOnCall == nil {
		fake.describeStackEventsReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.DescribeStackEventsOutput
			result2 error
		})
	}
	fake.describeStackEventsReturnsOnCall[i] = struct {
		result1 *cloudformation.DescribeStackEventsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackEventsWithContext(arg1 aws.Context, arg2 *cloudformation.DescribeStackEventsInput, arg3 ...request.Option) (*cloudformation.DescribeStackEventsOutput, error) {
	fake.describeStackEventsWithContextMutex.Lock()
	ret, specificReturn := fake.describeStackEventsWithContextReturnsOnCall[len(fake.describeStackEventsWithContextArgsForCall)]
	fake.describeStackEventsWithContextArgsForCall = append(fake.describeStackEventsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeStackEventsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeStackEventsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeStackEventsWithContextMutex.Unlock()
	if fake.DescribeStackEventsWithContextStub != nil {
		return fake.DescribeStackEventsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeStackEventsWithContextReturns.result1, fake.describeStackEventsWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) DescribeStackEventsWithContextCallCount() int {
	fake.describeStackEventsWithContextMutex.RLock()
	defer fake.describeStackEventsWithContextMutex.RUnlock()
	return len(fake.describeStackEventsWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeStackEventsWithContextArgsForCall(i int) (aws.Context, *cloudformation.DescribeStackEventsInput, []request.Option) {
	fake.describeStackEventsWithContextMutex.RLock()
	defer fake.describeStackEventsWithContextMutex.RUnlock()
	return fake.describeStackEventsWithContextArgsForCall[i].arg1, fake.describeStackEventsWithContextArgsForCall[i].arg2, fake.describeStackEventsWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) DescribeStackEventsWithContextReturns(result1 *cloudformation.DescribeStackEventsOutput, result2 error) {
	fake.DescribeStackEventsWithContextStub = nil
	fake.describeStackEventsWithContextReturns = struct {
		result1 *cloudformation.DescribeStackEventsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackEventsWithContextReturnsOnCall(i int, result1 *cloudformation.DescribeStackEventsOutput, result2 error) {
	fake.DescribeStackEventsWithContextStub = nil
	if fake.describeStackEventsWithContextReturnsOnCall == nil {
		fake.describeStackEventsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.DescribeStackEventsOutput
			result2 error
		})
	}
	fake.describeStackEventsWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.DescribeStackEventsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackEventsRequest(arg1 *cloudformation.DescribeStackEventsInput) (*request.Request, *cloudformation.DescribeStackEventsOutput) {
	fake.describeStackEventsRequestMutex.Lock()
	ret, specificReturn := fake.describeStackEventsRequestReturnsOnCall[len(fake.describeStackEventsRequestArgsForCall)]
	fake.describeStackEventsRequestArgsForCall = append(fake.describeStackEventsRequestArgsForCall, struct {
		arg1 *cloudformation.DescribeStackEventsInput
	}{arg1})
	fake.recordInvocation("DescribeStackEventsRequest", []interface{}{arg1})
	fake.describeStackEventsRequestMutex.Unlock()
	if fake.DescribeStackEventsRequestStub != nil {
		return fake.DescribeStackEventsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeStackEventsRequestReturns.result1, fake.describeStackEventsRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) DescribeStackEventsRequestCallCount() int {
	fake.describeStackEventsRequestMutex.RLock()
	defer fake.describeStackEventsRequestMutex.RUnlock()
	return len(fake.describeStackEventsRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeStackEventsRequestArgsForCall(i int) *cloudformation.DescribeStackEventsInput {
	fake.describeStackEventsRequestMutex.RLock()
	defer fake.describeStackEventsRequestMutex.RUnlock()
	return fake.describeStackEventsRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) DescribeStackEventsRequestReturns(result1 *request.Request, result2 *cloudformation.DescribeStackEventsOutput) {
	fake.DescribeStackEventsRequestStub = nil
	fake.describeStackEventsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.DescribeStackEventsOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackEventsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.DescribeStackEventsOutput) {
	fake.DescribeStackEventsRequestStub = nil
	if fake.describeStackEventsRequestReturnsOnCall == nil {
		fake.describeStackEventsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.DescribeStackEventsOutput
		})
	}
	fake.describeStackEventsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.DescribeStackEventsOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackEventsPages(arg1 *cloudformation.DescribeStackEventsInput, arg2 func(*cloudformation.DescribeStackEventsOutput, bool) bool) error {
	fake.describeStackEventsPagesMutex.Lock()
	ret, specificReturn := fake.describeStackEventsPagesReturnsOnCall[len(fake.describeStackEventsPagesArgsForCall)]
	fake.describeStackEventsPagesArgsForCall = append(fake.describeStackEventsPagesArgsForCall, struct {
		arg1 *cloudformation.DescribeStackEventsInput
		arg2 func(*cloudformation.DescribeStackEventsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeStackEventsPages", []interface{}{arg1, arg2})
	fake.describeStackEventsPagesMutex.Unlock()
	if fake.DescribeStackEventsPagesStub != nil {
		return fake.DescribeStackEventsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.describeStackEventsPagesReturns.result1
}

func (fake *FakeCloudFormationAPI) DescribeStackEventsPagesCallCount() int {
	fake.describeStackEventsPagesMutex.RLock()
	defer fake.describeStackEventsPagesMutex.RUnlock()
	return len(fake.describeStackEventsPagesArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeStackEventsPagesArgsForCall(i int) (*cloudformation.DescribeStackEventsInput, func(*cloudformation.DescribeStackEventsOutput, bool) bool) {
	fake.describeStackEventsPagesMutex.RLock()
	defer fake.describeStackEventsPagesMutex.RUnlock()
	return fake.describeStackEventsPagesArgsForCall[i].arg1, fake.describeStackEventsPagesArgsForCall[i].arg2
}

func (fake *FakeCloudFormationAPI) DescribeStackEventsPagesReturns(result1 error) {
	fake.DescribeStackEventsPagesStub = nil
	fake.describeStackEventsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) DescribeStackEventsPagesReturnsOnCall(i int, result1 error) {
	fake.DescribeStackEventsPagesStub = nil
	if fake.describeStackEventsPagesReturnsOnCall == nil {
		fake.describeStackEventsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeStackEventsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) DescribeStackEventsPagesWithContext(arg1 aws.Context, arg2 *cloudformation.DescribeStackEventsInput, arg3 func(*cloudformation.DescribeStackEventsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeStackEventsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeStackEventsPagesWithContextReturnsOnCall[len(fake.describeStackEventsPagesWithContextArgsForCall)]
	fake.describeStackEventsPagesWithContextArgsForCall = append(fake.describeStackEventsPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeStackEventsInput
		arg3 func(*cloudformation.DescribeStackEventsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeStackEventsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeStackEventsPagesWithContextMutex.Unlock()
	if fake.DescribeStackEventsPagesWithContextStub != nil {
		return fake.DescribeStackEventsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.describeStackEventsPagesWithContextReturns.result1
}

func (fake *FakeCloudFormationAPI) DescribeStackEventsPagesWithContextCallCount() int {
	fake.describeStackEventsPagesWithContextMutex.RLock()
	defer fake.describeStackEventsPagesWithContextMutex.RUnlock()
	return len(fake.describeStackEventsPagesWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeStackEventsPagesWithContextArgsForCall(i int) (aws.Context, *cloudformation.DescribeStackEventsInput, func(*cloudformation.DescribeStackEventsOutput, bool) bool, []request.Option) {
	fake.describeStackEventsPagesWithContextMutex.RLock()
	defer fake.describeStackEventsPagesWithContextMutex.RUnlock()
	return fake.describeStackEventsPagesWithContextArgsForCall[i].arg1, fake.describeStackEventsPagesWithContextArgsForCall[i].arg2, fake.describeStackEventsPagesWithContextArgsForCall[i].arg3, fake.describeStackEventsPagesWithContextArgsForCall[i].arg4
}

func (fake *FakeCloudFormationAPI) DescribeStackEventsPagesWithContextReturns(result1 error) {
	fake.DescribeStackEventsPagesWithContextStub = nil
	fake.describeStackEventsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) DescribeStackEventsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.DescribeStackEventsPagesWithContextStub = nil
	if fake.describeStackEventsPagesWithContextReturnsOnCall == nil {
		fake.describeStackEventsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeStackEventsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) DescribeStackInstance(arg1 *cloudformation.DescribeStackInstanceInput) (*cloudformation.DescribeStackInstanceOutput, error) {
	fake.describeStackInstanceMutex.Lock()
	ret, specificReturn := fake.describeStackInstanceReturnsOnCall[len(fake.describeStackInstanceArgsForCall)]
	fake.describeStackInstanceArgsForCall = append(fake.describeStackInstanceArgsForCall, struct {
		arg1 *cloudformation.DescribeStackInstanceInput
	}{arg1})
	fake.recordInvocation("DescribeStackInstance", []interface{}{arg1})
	fake.describeStackInstanceMutex.Unlock()
	if fake.DescribeStackInstanceStub != nil {
		return fake.DescribeStackInstanceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeStackInstanceReturns.result1, fake.describeStackInstanceReturns.result2
}

func (fake *FakeCloudFormationAPI) DescribeStackInstanceCallCount() int {
	fake.describeStackInstanceMutex.RLock()
	defer fake.describeStackInstanceMutex.RUnlock()
	return len(fake.describeStackInstanceArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeStackInstanceArgsForCall(i int) *cloudformation.DescribeStackInstanceInput {
	fake.describeStackInstanceMutex.RLock()
	defer fake.describeStackInstanceMutex.RUnlock()
	return fake.describeStackInstanceArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) DescribeStackInstanceReturns(result1 *cloudformation.DescribeStackInstanceOutput, result2 error) {
	fake.DescribeStackInstanceStub = nil
	fake.describeStackInstanceReturns = struct {
		result1 *cloudformation.DescribeStackInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackInstanceReturnsOnCall(i int, result1 *cloudformation.DescribeStackInstanceOutput, result2 error) {
	fake.DescribeStackInstanceStub = nil
	if fake.describeStackInstanceReturnsOnCall == nil {
		fake.describeStackInstanceReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.DescribeStackInstanceOutput
			result2 error
		})
	}
	fake.describeStackInstanceReturnsOnCall[i] = struct {
		result1 *cloudformation.DescribeStackInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackInstanceWithContext(arg1 aws.Context, arg2 *cloudformation.DescribeStackInstanceInput, arg3 ...request.Option) (*cloudformation.DescribeStackInstanceOutput, error) {
	fake.describeStackInstanceWithContextMutex.Lock()
	ret, specificReturn := fake.describeStackInstanceWithContextReturnsOnCall[len(fake.describeStackInstanceWithContextArgsForCall)]
	fake.describeStackInstanceWithContextArgsForCall = append(fake.describeStackInstanceWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeStackInstanceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeStackInstanceWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeStackInstanceWithContextMutex.Unlock()
	if fake.DescribeStackInstanceWithContextStub != nil {
		return fake.DescribeStackInstanceWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeStackInstanceWithContextReturns.result1, fake.describeStackInstanceWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) DescribeStackInstanceWithContextCallCount() int {
	fake.describeStackInstanceWithContextMutex.RLock()
	defer fake.describeStackInstanceWithContextMutex.RUnlock()
	return len(fake.describeStackInstanceWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeStackInstanceWithContextArgsForCall(i int) (aws.Context, *cloudformation.DescribeStackInstanceInput, []request.Option) {
	fake.describeStackInstanceWithContextMutex.RLock()
	defer fake.describeStackInstanceWithContextMutex.RUnlock()
	return fake.describeStackInstanceWithContextArgsForCall[i].arg1, fake.describeStackInstanceWithContextArgsForCall[i].arg2, fake.describeStackInstanceWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) DescribeStackInstanceWithContextReturns(result1 *cloudformation.DescribeStackInstanceOutput, result2 error) {
	fake.DescribeStackInstanceWithContextStub = nil
	fake.describeStackInstanceWithContextReturns = struct {
		result1 *cloudformation.DescribeStackInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackInstanceWithContextReturnsOnCall(i int, result1 *cloudformation.DescribeStackInstanceOutput, result2 error) {
	fake.DescribeStackInstanceWithContextStub = nil
	if fake.describeStackInstanceWithContextReturnsOnCall == nil {
		fake.describeStackInstanceWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.DescribeStackInstanceOutput
			result2 error
		})
	}
	fake.describeStackInstanceWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.DescribeStackInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackInstanceRequest(arg1 *cloudformation.DescribeStackInstanceInput) (*request.Request, *cloudformation.DescribeStackInstanceOutput) {
	fake.describeStackInstanceRequestMutex.Lock()
	ret, specificReturn := fake.describeStackInstanceRequestReturnsOnCall[len(fake.describeStackInstanceRequestArgsForCall)]
	fake.describeStackInstanceRequestArgsForCall = append(fake.describeStackInstanceRequestArgsForCall, struct {
		arg1 *cloudformation.DescribeStackInstanceInput
	}{arg1})
	fake.recordInvocation("DescribeStackInstanceRequest", []interface{}{arg1})
	fake.describeStackInstanceRequestMutex.Unlock()
	if fake.DescribeStackInstanceRequestStub != nil {
		return fake.DescribeStackInstanceRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeStackInstanceRequestReturns.result1, fake.describeStackInstanceRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) DescribeStackInstanceRequestCallCount() int {
	fake.describeStackInstanceRequestMutex.RLock()
	defer fake.describeStackInstanceRequestMutex.RUnlock()
	return len(fake.describeStackInstanceRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeStackInstanceRequestArgsForCall(i int) *cloudformation.DescribeStackInstanceInput {
	fake.describeStackInstanceRequestMutex.RLock()
	defer fake.describeStackInstanceRequestMutex.RUnlock()
	return fake.describeStackInstanceRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) DescribeStackInstanceRequestReturns(result1 *request.Request, result2 *cloudformation.DescribeStackInstanceOutput) {
	fake.DescribeStackInstanceRequestStub = nil
	fake.describeStackInstanceRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.DescribeStackInstanceOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackInstanceRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.DescribeStackInstanceOutput) {
	fake.DescribeStackInstanceRequestStub = nil
	if fake.describeStackInstanceRequestReturnsOnCall == nil {
		fake.describeStackInstanceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.DescribeStackInstanceOutput
		})
	}
	fake.describeStackInstanceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.DescribeStackInstanceOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackResource(arg1 *cloudformation.DescribeStackResourceInput) (*cloudformation.DescribeStackResourceOutput, error) {
	fake.describeStackResourceMutex.Lock()
	ret, specificReturn := fake.describeStackResourceReturnsOnCall[len(fake.describeStackResourceArgsForCall)]
	fake.describeStackResourceArgsForCall = append(fake.describeStackResourceArgsForCall, struct {
		arg1 *cloudformation.DescribeStackResourceInput
	}{arg1})
	fake.recordInvocation("DescribeStackResource", []interface{}{arg1})
	fake.describeStackResourceMutex.Unlock()
	if fake.DescribeStackResourceStub != nil {
		return fake.DescribeStackResourceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeStackResourceReturns.result1, fake.describeStackResourceReturns.result2
}

func (fake *FakeCloudFormationAPI) DescribeStackResourceCallCount() int {
	fake.describeStackResourceMutex.RLock()
	defer fake.describeStackResourceMutex.RUnlock()
	return len(fake.describeStackResourceArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeStackResourceArgsForCall(i int) *cloudformation.DescribeStackResourceInput {
	fake.describeStackResourceMutex.RLock()
	defer fake.describeStackResourceMutex.RUnlock()
	return fake.describeStackResourceArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) DescribeStackResourceReturns(result1 *cloudformation.DescribeStackResourceOutput, result2 error) {
	fake.DescribeStackResourceStub = nil
	fake.describeStackResourceReturns = struct {
		result1 *cloudformation.DescribeStackResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackResourceReturnsOnCall(i int, result1 *cloudformation.DescribeStackResourceOutput, result2 error) {
	fake.DescribeStackResourceStub = nil
	if fake.describeStackResourceReturnsOnCall == nil {
		fake.describeStackResourceReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.DescribeStackResourceOutput
			result2 error
		})
	}
	fake.describeStackResourceReturnsOnCall[i] = struct {
		result1 *cloudformation.DescribeStackResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackResourceWithContext(arg1 aws.Context, arg2 *cloudformation.DescribeStackResourceInput, arg3 ...request.Option) (*cloudformation.DescribeStackResourceOutput, error) {
	fake.describeStackResourceWithContextMutex.Lock()
	ret, specificReturn := fake.describeStackResourceWithContextReturnsOnCall[len(fake.describeStackResourceWithContextArgsForCall)]
	fake.describeStackResourceWithContextArgsForCall = append(fake.describeStackResourceWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeStackResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeStackResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeStackResourceWithContextMutex.Unlock()
	if fake.DescribeStackResourceWithContextStub != nil {
		return fake.DescribeStackResourceWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeStackResourceWithContextReturns.result1, fake.describeStackResourceWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) DescribeStackResourceWithContextCallCount() int {
	fake.describeStackResourceWithContextMutex.RLock()
	defer fake.describeStackResourceWithContextMutex.RUnlock()
	return len(fake.describeStackResourceWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeStackResourceWithContextArgsForCall(i int) (aws.Context, *cloudformation.DescribeStackResourceInput, []request.Option) {
	fake.describeStackResourceWithContextMutex.RLock()
	defer fake.describeStackResourceWithContextMutex.RUnlock()
	return fake.describeStackResourceWithContextArgsForCall[i].arg1, fake.describeStackResourceWithContextArgsForCall[i].arg2, fake.describeStackResourceWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) DescribeStackResourceWithContextReturns(result1 *cloudformation.DescribeStackResourceOutput, result2 error) {
	fake.DescribeStackResourceWithContextStub = nil
	fake.describeStackResourceWithContextReturns = struct {
		result1 *cloudformation.DescribeStackResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackResourceWithContextReturnsOnCall(i int, result1 *cloudformation.DescribeStackResourceOutput, result2 error) {
	fake.DescribeStackResourceWithContextStub = nil
	if fake.describeStackResourceWithContextReturnsOnCall == nil {
		fake.describeStackResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.DescribeStackResourceOutput
			result2 error
		})
	}
	fake.describeStackResourceWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.DescribeStackResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackResourceRequest(arg1 *cloudformation.DescribeStackResourceInput) (*request.Request, *cloudformation.DescribeStackResourceOutput) {
	fake.describeStackResourceRequestMutex.Lock()
	ret, specificReturn := fake.describeStackResourceRequestReturnsOnCall[len(fake.describeStackResourceRequestArgsForCall)]
	fake.describeStackResourceRequestArgsForCall = append(fake.describeStackResourceRequestArgsForCall, struct {
		arg1 *cloudformation.DescribeStackResourceInput
	}{arg1})
	fake.recordInvocation("DescribeStackResourceRequest", []interface{}{arg1})
	fake.describeStackResourceRequestMutex.Unlock()
	if fake.DescribeStackResourceRequestStub != nil {
		return fake.DescribeStackResourceRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeStackResourceRequestReturns.result1, fake.describeStackResourceRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) DescribeStackResourceRequestCallCount() int {
	fake.describeStackResourceRequestMutex.RLock()
	defer fake.describeStackResourceRequestMutex.RUnlock()
	return len(fake.describeStackResourceRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeStackResourceRequestArgsForCall(i int) *cloudformation.DescribeStackResourceInput {
	fake.describeStackResourceRequestMutex.RLock()
	defer fake.describeStackResourceRequestMutex.RUnlock()
	return fake.describeStackResourceRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) DescribeStackResourceRequestReturns(result1 *request.Request, result2 *cloudformation.DescribeStackResourceOutput) {
	fake.DescribeStackResourceRequestStub = nil
	fake.describeStackResourceRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.DescribeStackResourceOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.DescribeStackResourceOutput) {
	fake.DescribeStackResourceRequestStub = nil
	if fake.describeStackResourceRequestReturnsOnCall == nil {
		fake.describeStackResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.DescribeStackResourceOutput
		})
	}
	fake.describeStackResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.DescribeStackResourceOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackResources(arg1 *cloudformation.DescribeStackResourcesInput) (*cloudformation.DescribeStackResourcesOutput, error) {
	fake.describeStackResourcesMutex.Lock()
	ret, specificReturn := fake.describeStackResourcesReturnsOnCall[len(fake.describeStackResourcesArgsForCall)]
	fake.describeStackResourcesArgsForCall = append(fake.describeStackResourcesArgsForCall, struct {
		arg1 *cloudformation.DescribeStackResourcesInput
	}{arg1})
	fake.recordInvocation("DescribeStackResources", []interface{}{arg1})
	fake.describeStackResourcesMutex.Unlock()
	if fake.DescribeStackResourcesStub != nil {
		return fake.DescribeStackResourcesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeStackResourcesReturns.result1, fake.describeStackResourcesReturns.result2
}

func (fake *FakeCloudFormationAPI) DescribeStackResourcesCallCount() int {
	fake.describeStackResourcesMutex.RLock()
	defer fake.describeStackResourcesMutex.RUnlock()
	return len(fake.describeStackResourcesArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeStackResourcesArgsForCall(i int) *cloudformation.DescribeStackResourcesInput {
	fake.describeStackResourcesMutex.RLock()
	defer fake.describeStackResourcesMutex.RUnlock()
	return fake.describeStackResourcesArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) DescribeStackResourcesReturns(result1 *cloudformation.DescribeStackResourcesOutput, result2 error) {
	fake.DescribeStackResourcesStub = nil
	fake.describeStackResourcesReturns = struct {
		result1 *cloudformation.DescribeStackResourcesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackResourcesReturnsOnCall(i int, result1 *cloudformation.DescribeStackResourcesOutput, result2 error) {
	fake.DescribeStackResourcesStub = nil
	if fake.describeStackResourcesReturnsOnCall == nil {
		fake.describeStackResourcesReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.DescribeStackResourcesOutput
			result2 error
		})
	}
	fake.describeStackResourcesReturnsOnCall[i] = struct {
		result1 *cloudformation.DescribeStackResourcesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackResourcesWithContext(arg1 aws.Context, arg2 *cloudformation.DescribeStackResourcesInput, arg3 ...request.Option) (*cloudformation.DescribeStackResourcesOutput, error) {
	fake.describeStackResourcesWithContextMutex.Lock()
	ret, specificReturn := fake.describeStackResourcesWithContextReturnsOnCall[len(fake.describeStackResourcesWithContextArgsForCall)]
	fake.describeStackResourcesWithContextArgsForCall = append(fake.describeStackResourcesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeStackResourcesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeStackResourcesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeStackResourcesWithContextMutex.Unlock()
	if fake.DescribeStackResourcesWithContextStub != nil {
		return fake.DescribeStackResourcesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeStackResourcesWithContextReturns.result1, fake.describeStackResourcesWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) DescribeStackResourcesWithContextCallCount() int {
	fake.describeStackResourcesWithContextMutex.RLock()
	defer fake.describeStackResourcesWithContextMutex.RUnlock()
	return len(fake.describeStackResourcesWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeStackResourcesWithContextArgsForCall(i int) (aws.Context, *cloudformation.DescribeStackResourcesInput, []request.Option) {
	fake.describeStackResourcesWithContextMutex.RLock()
	defer fake.describeStackResourcesWithContextMutex.RUnlock()
	return fake.describeStackResourcesWithContextArgsForCall[i].arg1, fake.describeStackResourcesWithContextArgsForCall[i].arg2, fake.describeStackResourcesWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) DescribeStackResourcesWithContextReturns(result1 *cloudformation.DescribeStackResourcesOutput, result2 error) {
	fake.DescribeStackResourcesWithContextStub = nil
	fake.describeStackResourcesWithContextReturns = struct {
		result1 *cloudformation.DescribeStackResourcesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackResourcesWithContextReturnsOnCall(i int, result1 *cloudformation.DescribeStackResourcesOutput, result2 error) {
	fake.DescribeStackResourcesWithContextStub = nil
	if fake.describeStackResourcesWithContextReturnsOnCall == nil {
		fake.describeStackResourcesWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.DescribeStackResourcesOutput
			result2 error
		})
	}
	fake.describeStackResourcesWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.DescribeStackResourcesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackResourcesRequest(arg1 *cloudformation.DescribeStackResourcesInput) (*request.Request, *cloudformation.DescribeStackResourcesOutput) {
	fake.describeStackResourcesRequestMutex.Lock()
	ret, specificReturn := fake.describeStackResourcesRequestReturnsOnCall[len(fake.describeStackResourcesRequestArgsForCall)]
	fake.describeStackResourcesRequestArgsForCall = append(fake.describeStackResourcesRequestArgsForCall, struct {
		arg1 *cloudformation.DescribeStackResourcesInput
	}{arg1})
	fake.recordInvocation("DescribeStackResourcesRequest", []interface{}{arg1})
	fake.describeStackResourcesRequestMutex.Unlock()
	if fake.DescribeStackResourcesRequestStub != nil {
		return fake.DescribeStackResourcesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeStackResourcesRequestReturns.result1, fake.describeStackResourcesRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) DescribeStackResourcesRequestCallCount() int {
	fake.describeStackResourcesRequestMutex.RLock()
	defer fake.describeStackResourcesRequestMutex.RUnlock()
	return len(fake.describeStackResourcesRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeStackResourcesRequestArgsForCall(i int) *cloudformation.DescribeStackResourcesInput {
	fake.describeStackResourcesRequestMutex.RLock()
	defer fake.describeStackResourcesRequestMutex.RUnlock()
	return fake.describeStackResourcesRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) DescribeStackResourcesRequestReturns(result1 *request.Request, result2 *cloudformation.DescribeStackResourcesOutput) {
	fake.DescribeStackResourcesRequestStub = nil
	fake.describeStackResourcesRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.DescribeStackResourcesOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackResourcesRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.DescribeStackResourcesOutput) {
	fake.DescribeStackResourcesRequestStub = nil
	if fake.describeStackResourcesRequestReturnsOnCall == nil {
		fake.describeStackResourcesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.DescribeStackResourcesOutput
		})
	}
	fake.describeStackResourcesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.DescribeStackResourcesOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackSet(arg1 *cloudformation.DescribeStackSetInput) (*cloudformation.DescribeStackSetOutput, error) {
	fake.describeStackSetMutex.Lock()
	ret, specificReturn := fake.describeStackSetReturnsOnCall[len(fake.describeStackSetArgsForCall)]
	fake.describeStackSetArgsForCall = append(fake.describeStackSetArgsForCall, struct {
		arg1 *cloudformation.DescribeStackSetInput
	}{arg1})
	fake.recordInvocation("DescribeStackSet", []interface{}{arg1})
	fake.describeStackSetMutex.Unlock()
	if fake.DescribeStackSetStub != nil {
		return fake.DescribeStackSetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeStackSetReturns.result1, fake.describeStackSetReturns.result2
}

func (fake *FakeCloudFormationAPI) DescribeStackSetCallCount() int {
	fake.describeStackSetMutex.RLock()
	defer fake.describeStackSetMutex.RUnlock()
	return len(fake.describeStackSetArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeStackSetArgsForCall(i int) *cloudformation.DescribeStackSetInput {
	fake.describeStackSetMutex.RLock()
	defer fake.describeStackSetMutex.RUnlock()
	return fake.describeStackSetArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) DescribeStackSetReturns(result1 *cloudformation.DescribeStackSetOutput, result2 error) {
	fake.DescribeStackSetStub = nil
	fake.describeStackSetReturns = struct {
		result1 *cloudformation.DescribeStackSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackSetReturnsOnCall(i int, result1 *cloudformation.DescribeStackSetOutput, result2 error) {
	fake.DescribeStackSetStub = nil
	if fake.describeStackSetReturnsOnCall == nil {
		fake.describeStackSetReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.DescribeStackSetOutput
			result2 error
		})
	}
	fake.describeStackSetReturnsOnCall[i] = struct {
		result1 *cloudformation.DescribeStackSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackSetWithContext(arg1 aws.Context, arg2 *cloudformation.DescribeStackSetInput, arg3 ...request.Option) (*cloudformation.DescribeStackSetOutput, error) {
	fake.describeStackSetWithContextMutex.Lock()
	ret, specificReturn := fake.describeStackSetWithContextReturnsOnCall[len(fake.describeStackSetWithContextArgsForCall)]
	fake.describeStackSetWithContextArgsForCall = append(fake.describeStackSetWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeStackSetInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeStackSetWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeStackSetWithContextMutex.Unlock()
	if fake.DescribeStackSetWithContextStub != nil {
		return fake.DescribeStackSetWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeStackSetWithContextReturns.result1, fake.describeStackSetWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) DescribeStackSetWithContextCallCount() int {
	fake.describeStackSetWithContextMutex.RLock()
	defer fake.describeStackSetWithContextMutex.RUnlock()
	return len(fake.describeStackSetWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeStackSetWithContextArgsForCall(i int) (aws.Context, *cloudformation.DescribeStackSetInput, []request.Option) {
	fake.describeStackSetWithContextMutex.RLock()
	defer fake.describeStackSetWithContextMutex.RUnlock()
	return fake.describeStackSetWithContextArgsForCall[i].arg1, fake.describeStackSetWithContextArgsForCall[i].arg2, fake.describeStackSetWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) DescribeStackSetWithContextReturns(result1 *cloudformation.DescribeStackSetOutput, result2 error) {
	fake.DescribeStackSetWithContextStub = nil
	fake.describeStackSetWithContextReturns = struct {
		result1 *cloudformation.DescribeStackSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackSetWithContextReturnsOnCall(i int, result1 *cloudformation.DescribeStackSetOutput, result2 error) {
	fake.DescribeStackSetWithContextStub = nil
	if fake.describeStackSetWithContextReturnsOnCall == nil {
		fake.describeStackSetWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.DescribeStackSetOutput
			result2 error
		})
	}
	fake.describeStackSetWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.DescribeStackSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackSetRequest(arg1 *cloudformation.DescribeStackSetInput) (*request.Request, *cloudformation.DescribeStackSetOutput) {
	fake.describeStackSetRequestMutex.Lock()
	ret, specificReturn := fake.describeStackSetRequestReturnsOnCall[len(fake.describeStackSetRequestArgsForCall)]
	fake.describeStackSetRequestArgsForCall = append(fake.describeStackSetRequestArgsForCall, struct {
		arg1 *cloudformation.DescribeStackSetInput
	}{arg1})
	fake.recordInvocation("DescribeStackSetRequest", []interface{}{arg1})
	fake.describeStackSetRequestMutex.Unlock()
	if fake.DescribeStackSetRequestStub != nil {
		return fake.DescribeStackSetRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeStackSetRequestReturns.result1, fake.describeStackSetRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) DescribeStackSetRequestCallCount() int {
	fake.describeStackSetRequestMutex.RLock()
	defer fake.describeStackSetRequestMutex.RUnlock()
	return len(fake.describeStackSetRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeStackSetRequestArgsForCall(i int) *cloudformation.DescribeStackSetInput {
	fake.describeStackSetRequestMutex.RLock()
	defer fake.describeStackSetRequestMutex.RUnlock()
	return fake.describeStackSetRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) DescribeStackSetRequestReturns(result1 *request.Request, result2 *cloudformation.DescribeStackSetOutput) {
	fake.DescribeStackSetRequestStub = nil
	fake.describeStackSetRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.DescribeStackSetOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackSetRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.DescribeStackSetOutput) {
	fake.DescribeStackSetRequestStub = nil
	if fake.describeStackSetRequestReturnsOnCall == nil {
		fake.describeStackSetRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.DescribeStackSetOutput
		})
	}
	fake.describeStackSetRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.DescribeStackSetOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackSetOperation(arg1 *cloudformation.DescribeStackSetOperationInput) (*cloudformation.DescribeStackSetOperationOutput, error) {
	fake.describeStackSetOperationMutex.Lock()
	ret, specificReturn := fake.describeStackSetOperationReturnsOnCall[len(fake.describeStackSetOperationArgsForCall)]
	fake.describeStackSetOperationArgsForCall = append(fake.describeStackSetOperationArgsForCall, struct {
		arg1 *cloudformation.DescribeStackSetOperationInput
	}{arg1})
	fake.recordInvocation("DescribeStackSetOperation", []interface{}{arg1})
	fake.describeStackSetOperationMutex.Unlock()
	if fake.DescribeStackSetOperationStub != nil {
		return fake.DescribeStackSetOperationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeStackSetOperationReturns.result1, fake.describeStackSetOperationReturns.result2
}

func (fake *FakeCloudFormationAPI) DescribeStackSetOperationCallCount() int {
	fake.describeStackSetOperationMutex.RLock()
	defer fake.describeStackSetOperationMutex.RUnlock()
	return len(fake.describeStackSetOperationArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeStackSetOperationArgsForCall(i int) *cloudformation.DescribeStackSetOperationInput {
	fake.describeStackSetOperationMutex.RLock()
	defer fake.describeStackSetOperationMutex.RUnlock()
	return fake.describeStackSetOperationArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) DescribeStackSetOperationReturns(result1 *cloudformation.DescribeStackSetOperationOutput, result2 error) {
	fake.DescribeStackSetOperationStub = nil
	fake.describeStackSetOperationReturns = struct {
		result1 *cloudformation.DescribeStackSetOperationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackSetOperationReturnsOnCall(i int, result1 *cloudformation.DescribeStackSetOperationOutput, result2 error) {
	fake.DescribeStackSetOperationStub = nil
	if fake.describeStackSetOperationReturnsOnCall == nil {
		fake.describeStackSetOperationReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.DescribeStackSetOperationOutput
			result2 error
		})
	}
	fake.describeStackSetOperationReturnsOnCall[i] = struct {
		result1 *cloudformation.DescribeStackSetOperationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackSetOperationWithContext(arg1 aws.Context, arg2 *cloudformation.DescribeStackSetOperationInput, arg3 ...request.Option) (*cloudformation.DescribeStackSetOperationOutput, error) {
	fake.describeStackSetOperationWithContextMutex.Lock()
	ret, specificReturn := fake.describeStackSetOperationWithContextReturnsOnCall[len(fake.describeStackSetOperationWithContextArgsForCall)]
	fake.describeStackSetOperationWithContextArgsForCall = append(fake.describeStackSetOperationWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeStackSetOperationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeStackSetOperationWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeStackSetOperationWithContextMutex.Unlock()
	if fake.DescribeStackSetOperationWithContextStub != nil {
		return fake.DescribeStackSetOperationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeStackSetOperationWithContextReturns.result1, fake.describeStackSetOperationWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) DescribeStackSetOperationWithContextCallCount() int {
	fake.describeStackSetOperationWithContextMutex.RLock()
	defer fake.describeStackSetOperationWithContextMutex.RUnlock()
	return len(fake.describeStackSetOperationWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeStackSetOperationWithContextArgsForCall(i int) (aws.Context, *cloudformation.DescribeStackSetOperationInput, []request.Option) {
	fake.describeStackSetOperationWithContextMutex.RLock()
	defer fake.describeStackSetOperationWithContextMutex.RUnlock()
	return fake.describeStackSetOperationWithContextArgsForCall[i].arg1, fake.describeStackSetOperationWithContextArgsForCall[i].arg2, fake.describeStackSetOperationWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) DescribeStackSetOperationWithContextReturns(result1 *cloudformation.DescribeStackSetOperationOutput, result2 error) {
	fake.DescribeStackSetOperationWithContextStub = nil
	fake.describeStackSetOperationWithContextReturns = struct {
		result1 *cloudformation.DescribeStackSetOperationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackSetOperationWithContextReturnsOnCall(i int, result1 *cloudformation.DescribeStackSetOperationOutput, result2 error) {
	fake.DescribeStackSetOperationWithContextStub = nil
	if fake.describeStackSetOperationWithContextReturnsOnCall == nil {
		fake.describeStackSetOperationWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.DescribeStackSetOperationOutput
			result2 error
		})
	}
	fake.describeStackSetOperationWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.DescribeStackSetOperationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackSetOperationRequest(arg1 *cloudformation.DescribeStackSetOperationInput) (*request.Request, *cloudformation.DescribeStackSetOperationOutput) {
	fake.describeStackSetOperationRequestMutex.Lock()
	ret, specificReturn := fake.describeStackSetOperationRequestReturnsOnCall[len(fake.describeStackSetOperationRequestArgsForCall)]
	fake.describeStackSetOperationRequestArgsForCall = append(fake.describeStackSetOperationRequestArgsForCall, struct {
		arg1 *cloudformation.DescribeStackSetOperationInput
	}{arg1})
	fake.recordInvocation("DescribeStackSetOperationRequest", []interface{}{arg1})
	fake.describeStackSetOperationRequestMutex.Unlock()
	if fake.DescribeStackSetOperationRequestStub != nil {
		return fake.DescribeStackSetOperationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeStackSetOperationRequestReturns.result1, fake.describeStackSetOperationRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) DescribeStackSetOperationRequestCallCount() int {
	fake.describeStackSetOperationRequestMutex.RLock()
	defer fake.describeStackSetOperationRequestMutex.RUnlock()
	return len(fake.describeStackSetOperationRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeStackSetOperationRequestArgsForCall(i int) *cloudformation.DescribeStackSetOperationInput {
	fake.describeStackSetOperationRequestMutex.RLock()
	defer fake.describeStackSetOperationRequestMutex.RUnlock()
	return fake.describeStackSetOperationRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) DescribeStackSetOperationRequestReturns(result1 *request.Request, result2 *cloudformation.DescribeStackSetOperationOutput) {
	fake.DescribeStackSetOperationRequestStub = nil
	fake.describeStackSetOperationRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.DescribeStackSetOperationOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStackSetOperationRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.DescribeStackSetOperationOutput) {
	fake.DescribeStackSetOperationRequestStub = nil
	if fake.describeStackSetOperationRequestReturnsOnCall == nil {
		fake.describeStackSetOperationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.DescribeStackSetOperationOutput
		})
	}
	fake.describeStackSetOperationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.DescribeStackSetOperationOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStacks(arg1 *cloudformation.DescribeStacksInput) (*cloudformation.DescribeStacksOutput, error) {
	fake.describeStacksMutex.Lock()
	ret, specificReturn := fake.describeStacksReturnsOnCall[len(fake.describeStacksArgsForCall)]
	fake.describeStacksArgsForCall = append(fake.describeStacksArgsForCall, struct {
		arg1 *cloudformation.DescribeStacksInput
	}{arg1})
	fake.recordInvocation("DescribeStacks", []interface{}{arg1})
	fake.describeStacksMutex.Unlock()
	if fake.DescribeStacksStub != nil {
		return fake.DescribeStacksStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeStacksReturns.result1, fake.describeStacksReturns.result2
}

func (fake *FakeCloudFormationAPI) DescribeStacksCallCount() int {
	fake.describeStacksMutex.RLock()
	defer fake.describeStacksMutex.RUnlock()
	return len(fake.describeStacksArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeStacksArgsForCall(i int) *cloudformation.DescribeStacksInput {
	fake.describeStacksMutex.RLock()
	defer fake.describeStacksMutex.RUnlock()
	return fake.describeStacksArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) DescribeStacksReturns(result1 *cloudformation.DescribeStacksOutput, result2 error) {
	fake.DescribeStacksStub = nil
	fake.describeStacksReturns = struct {
		result1 *cloudformation.DescribeStacksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStacksReturnsOnCall(i int, result1 *cloudformation.DescribeStacksOutput, result2 error) {
	fake.DescribeStacksStub = nil
	if fake.describeStacksReturnsOnCall == nil {
		fake.describeStacksReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.DescribeStacksOutput
			result2 error
		})
	}
	fake.describeStacksReturnsOnCall[i] = struct {
		result1 *cloudformation.DescribeStacksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStacksWithContext(arg1 aws.Context, arg2 *cloudformation.DescribeStacksInput, arg3 ...request.Option) (*cloudformation.DescribeStacksOutput, error) {
	fake.describeStacksWithContextMutex.Lock()
	ret, specificReturn := fake.describeStacksWithContextReturnsOnCall[len(fake.describeStacksWithContextArgsForCall)]
	fake.describeStacksWithContextArgsForCall = append(fake.describeStacksWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeStacksInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeStacksWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeStacksWithContextMutex.Unlock()
	if fake.DescribeStacksWithContextStub != nil {
		return fake.DescribeStacksWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeStacksWithContextReturns.result1, fake.describeStacksWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) DescribeStacksWithContextCallCount() int {
	fake.describeStacksWithContextMutex.RLock()
	defer fake.describeStacksWithContextMutex.RUnlock()
	return len(fake.describeStacksWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeStacksWithContextArgsForCall(i int) (aws.Context, *cloudformation.DescribeStacksInput, []request.Option) {
	fake.describeStacksWithContextMutex.RLock()
	defer fake.describeStacksWithContextMutex.RUnlock()
	return fake.describeStacksWithContextArgsForCall[i].arg1, fake.describeStacksWithContextArgsForCall[i].arg2, fake.describeStacksWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) DescribeStacksWithContextReturns(result1 *cloudformation.DescribeStacksOutput, result2 error) {
	fake.DescribeStacksWithContextStub = nil
	fake.describeStacksWithContextReturns = struct {
		result1 *cloudformation.DescribeStacksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStacksWithContextReturnsOnCall(i int, result1 *cloudformation.DescribeStacksOutput, result2 error) {
	fake.DescribeStacksWithContextStub = nil
	if fake.describeStacksWithContextReturnsOnCall == nil {
		fake.describeStacksWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.DescribeStacksOutput
			result2 error
		})
	}
	fake.describeStacksWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.DescribeStacksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStacksRequest(arg1 *cloudformation.DescribeStacksInput) (*request.Request, *cloudformation.DescribeStacksOutput) {
	fake.describeStacksRequestMutex.Lock()
	ret, specificReturn := fake.describeStacksRequestReturnsOnCall[len(fake.describeStacksRequestArgsForCall)]
	fake.describeStacksRequestArgsForCall = append(fake.describeStacksRequestArgsForCall, struct {
		arg1 *cloudformation.DescribeStacksInput
	}{arg1})
	fake.recordInvocation("DescribeStacksRequest", []interface{}{arg1})
	fake.describeStacksRequestMutex.Unlock()
	if fake.DescribeStacksRequestStub != nil {
		return fake.DescribeStacksRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeStacksRequestReturns.result1, fake.describeStacksRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) DescribeStacksRequestCallCount() int {
	fake.describeStacksRequestMutex.RLock()
	defer fake.describeStacksRequestMutex.RUnlock()
	return len(fake.describeStacksRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeStacksRequestArgsForCall(i int) *cloudformation.DescribeStacksInput {
	fake.describeStacksRequestMutex.RLock()
	defer fake.describeStacksRequestMutex.RUnlock()
	return fake.describeStacksRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) DescribeStacksRequestReturns(result1 *request.Request, result2 *cloudformation.DescribeStacksOutput) {
	fake.DescribeStacksRequestStub = nil
	fake.describeStacksRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.DescribeStacksOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStacksRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.DescribeStacksOutput) {
	fake.DescribeStacksRequestStub = nil
	if fake.describeStacksRequestReturnsOnCall == nil {
		fake.describeStacksRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.DescribeStacksOutput
		})
	}
	fake.describeStacksRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.DescribeStacksOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) DescribeStacksPages(arg1 *cloudformation.DescribeStacksInput, arg2 func(*cloudformation.DescribeStacksOutput, bool) bool) error {
	fake.describeStacksPagesMutex.Lock()
	ret, specificReturn := fake.describeStacksPagesReturnsOnCall[len(fake.describeStacksPagesArgsForCall)]
	fake.describeStacksPagesArgsForCall = append(fake.describeStacksPagesArgsForCall, struct {
		arg1 *cloudformation.DescribeStacksInput
		arg2 func(*cloudformation.DescribeStacksOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeStacksPages", []interface{}{arg1, arg2})
	fake.describeStacksPagesMutex.Unlock()
	if fake.DescribeStacksPagesStub != nil {
		return fake.DescribeStacksPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.describeStacksPagesReturns.result1
}

func (fake *FakeCloudFormationAPI) DescribeStacksPagesCallCount() int {
	fake.describeStacksPagesMutex.RLock()
	defer fake.describeStacksPagesMutex.RUnlock()
	return len(fake.describeStacksPagesArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeStacksPagesArgsForCall(i int) (*cloudformation.DescribeStacksInput, func(*cloudformation.DescribeStacksOutput, bool) bool) {
	fake.describeStacksPagesMutex.RLock()
	defer fake.describeStacksPagesMutex.RUnlock()
	return fake.describeStacksPagesArgsForCall[i].arg1, fake.describeStacksPagesArgsForCall[i].arg2
}

func (fake *FakeCloudFormationAPI) DescribeStacksPagesReturns(result1 error) {
	fake.DescribeStacksPagesStub = nil
	fake.describeStacksPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) DescribeStacksPagesReturnsOnCall(i int, result1 error) {
	fake.DescribeStacksPagesStub = nil
	if fake.describeStacksPagesReturnsOnCall == nil {
		fake.describeStacksPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeStacksPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) DescribeStacksPagesWithContext(arg1 aws.Context, arg2 *cloudformation.DescribeStacksInput, arg3 func(*cloudformation.DescribeStacksOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeStacksPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeStacksPagesWithContextReturnsOnCall[len(fake.describeStacksPagesWithContextArgsForCall)]
	fake.describeStacksPagesWithContextArgsForCall = append(fake.describeStacksPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeStacksInput
		arg3 func(*cloudformation.DescribeStacksOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeStacksPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeStacksPagesWithContextMutex.Unlock()
	if fake.DescribeStacksPagesWithContextStub != nil {
		return fake.DescribeStacksPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.describeStacksPagesWithContextReturns.result1
}

func (fake *FakeCloudFormationAPI) DescribeStacksPagesWithContextCallCount() int {
	fake.describeStacksPagesWithContextMutex.RLock()
	defer fake.describeStacksPagesWithContextMutex.RUnlock()
	return len(fake.describeStacksPagesWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) DescribeStacksPagesWithContextArgsForCall(i int) (aws.Context, *cloudformation.DescribeStacksInput, func(*cloudformation.DescribeStacksOutput, bool) bool, []request.Option) {
	fake.describeStacksPagesWithContextMutex.RLock()
	defer fake.describeStacksPagesWithContextMutex.RUnlock()
	return fake.describeStacksPagesWithContextArgsForCall[i].arg1, fake.describeStacksPagesWithContextArgsForCall[i].arg2, fake.describeStacksPagesWithContextArgsForCall[i].arg3, fake.describeStacksPagesWithContextArgsForCall[i].arg4
}

func (fake *FakeCloudFormationAPI) DescribeStacksPagesWithContextReturns(result1 error) {
	fake.DescribeStacksPagesWithContextStub = nil
	fake.describeStacksPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) DescribeStacksPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.DescribeStacksPagesWithContextStub = nil
	if fake.describeStacksPagesWithContextReturnsOnCall == nil {
		fake.describeStacksPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeStacksPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) EstimateTemplateCost(arg1 *cloudformation.EstimateTemplateCostInput) (*cloudformation.EstimateTemplateCostOutput, error) {
	fake.estimateTemplateCostMutex.Lock()
	ret, specificReturn := fake.estimateTemplateCostReturnsOnCall[len(fake.estimateTemplateCostArgsForCall)]
	fake.estimateTemplateCostArgsForCall = append(fake.estimateTemplateCostArgsForCall, struct {
		arg1 *cloudformation.EstimateTemplateCostInput
	}{arg1})
	fake.recordInvocation("EstimateTemplateCost", []interface{}{arg1})
	fake.estimateTemplateCostMutex.Unlock()
	if fake.EstimateTemplateCostStub != nil {
		return fake.EstimateTemplateCostStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.estimateTemplateCostReturns.result1, fake.estimateTemplateCostReturns.result2
}

func (fake *FakeCloudFormationAPI) EstimateTemplateCostCallCount() int {
	fake.estimateTemplateCostMutex.RLock()
	defer fake.estimateTemplateCostMutex.RUnlock()
	return len(fake.estimateTemplateCostArgsForCall)
}

func (fake *FakeCloudFormationAPI) EstimateTemplateCostArgsForCall(i int) *cloudformation.EstimateTemplateCostInput {
	fake.estimateTemplateCostMutex.RLock()
	defer fake.estimateTemplateCostMutex.RUnlock()
	return fake.estimateTemplateCostArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) EstimateTemplateCostReturns(result1 *cloudformation.EstimateTemplateCostOutput, result2 error) {
	fake.EstimateTemplateCostStub = nil
	fake.estimateTemplateCostReturns = struct {
		result1 *cloudformation.EstimateTemplateCostOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) EstimateTemplateCostReturnsOnCall(i int, result1 *cloudformation.EstimateTemplateCostOutput, result2 error) {
	fake.EstimateTemplateCostStub = nil
	if fake.estimateTemplateCostReturnsOnCall == nil {
		fake.estimateTemplateCostReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.EstimateTemplateCostOutput
			result2 error
		})
	}
	fake.estimateTemplateCostReturnsOnCall[i] = struct {
		result1 *cloudformation.EstimateTemplateCostOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) EstimateTemplateCostWithContext(arg1 aws.Context, arg2 *cloudformation.EstimateTemplateCostInput, arg3 ...request.Option) (*cloudformation.EstimateTemplateCostOutput, error) {
	fake.estimateTemplateCostWithContextMutex.Lock()
	ret, specificReturn := fake.estimateTemplateCostWithContextReturnsOnCall[len(fake.estimateTemplateCostWithContextArgsForCall)]
	fake.estimateTemplateCostWithContextArgsForCall = append(fake.estimateTemplateCostWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.EstimateTemplateCostInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("EstimateTemplateCostWithContext", []interface{}{arg1, arg2, arg3})
	fake.estimateTemplateCostWithContextMutex.Unlock()
	if fake.EstimateTemplateCostWithContextStub != nil {
		return fake.EstimateTemplateCostWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.estimateTemplateCostWithContextReturns.result1, fake.estimateTemplateCostWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) EstimateTemplateCostWithContextCallCount() int {
	fake.estimateTemplateCostWithContextMutex.RLock()
	defer fake.estimateTemplateCostWithContextMutex.RUnlock()
	return len(fake.estimateTemplateCostWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) EstimateTemplateCostWithContextArgsForCall(i int) (aws.Context, *cloudformation.EstimateTemplateCostInput, []request.Option) {
	fake.estimateTemplateCostWithContextMutex.RLock()
	defer fake.estimateTemplateCostWithContextMutex.RUnlock()
	return fake.estimateTemplateCostWithContextArgsForCall[i].arg1, fake.estimateTemplateCostWithContextArgsForCall[i].arg2, fake.estimateTemplateCostWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) EstimateTemplateCostWithContextReturns(result1 *cloudformation.EstimateTemplateCostOutput, result2 error) {
	fake.EstimateTemplateCostWithContextStub = nil
	fake.estimateTemplateCostWithContextReturns = struct {
		result1 *cloudformation.EstimateTemplateCostOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) EstimateTemplateCostWithContextReturnsOnCall(i int, result1 *cloudformation.EstimateTemplateCostOutput, result2 error) {
	fake.EstimateTemplateCostWithContextStub = nil
	if fake.estimateTemplateCostWithContextReturnsOnCall == nil {
		fake.estimateTemplateCostWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.EstimateTemplateCostOutput
			result2 error
		})
	}
	fake.estimateTemplateCostWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.EstimateTemplateCostOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) EstimateTemplateCostRequest(arg1 *cloudformation.EstimateTemplateCostInput) (*request.Request, *cloudformation.EstimateTemplateCostOutput) {
	fake.estimateTemplateCostRequestMutex.Lock()
	ret, specificReturn := fake.estimateTemplateCostRequestReturnsOnCall[len(fake.estimateTemplateCostRequestArgsForCall)]
	fake.estimateTemplateCostRequestArgsForCall = append(fake.estimateTemplateCostRequestArgsForCall, struct {
		arg1 *cloudformation.EstimateTemplateCostInput
	}{arg1})
	fake.recordInvocation("EstimateTemplateCostRequest", []interface{}{arg1})
	fake.estimateTemplateCostRequestMutex.Unlock()
	if fake.EstimateTemplateCostRequestStub != nil {
		return fake.EstimateTemplateCostRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.estimateTemplateCostRequestReturns.result1, fake.estimateTemplateCostRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) EstimateTemplateCostRequestCallCount() int {
	fake.estimateTemplateCostRequestMutex.RLock()
	defer fake.estimateTemplateCostRequestMutex.RUnlock()
	return len(fake.estimateTemplateCostRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) EstimateTemplateCostRequestArgsForCall(i int) *cloudformation.EstimateTemplateCostInput {
	fake.estimateTemplateCostRequestMutex.RLock()
	defer fake.estimateTemplateCostRequestMutex.RUnlock()
	return fake.estimateTemplateCostRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) EstimateTemplateCostRequestReturns(result1 *request.Request, result2 *cloudformation.EstimateTemplateCostOutput) {
	fake.EstimateTemplateCostRequestStub = nil
	fake.estimateTemplateCostRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.EstimateTemplateCostOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) EstimateTemplateCostRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.EstimateTemplateCostOutput) {
	fake.EstimateTemplateCostRequestStub = nil
	if fake.estimateTemplateCostRequestReturnsOnCall == nil {
		fake.estimateTemplateCostRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.EstimateTemplateCostOutput
		})
	}
	fake.estimateTemplateCostRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.EstimateTemplateCostOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ExecuteChangeSet(arg1 *cloudformation.ExecuteChangeSetInput) (*cloudformation.ExecuteChangeSetOutput, error) {
	fake.executeChangeSetMutex.Lock()
	ret, specificReturn := fake.executeChangeSetReturnsOnCall[len(fake.executeChangeSetArgsForCall)]
	fake.executeChangeSetArgsForCall = append(fake.executeChangeSetArgsForCall, struct {
		arg1 *cloudformation.ExecuteChangeSetInput
	}{arg1})
	fake.recordInvocation("ExecuteChangeSet", []interface{}{arg1})
	fake.executeChangeSetMutex.Unlock()
	if fake.ExecuteChangeSetStub != nil {
		return fake.ExecuteChangeSetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.executeChangeSetReturns.result1, fake.executeChangeSetReturns.result2
}

func (fake *FakeCloudFormationAPI) ExecuteChangeSetCallCount() int {
	fake.executeChangeSetMutex.RLock()
	defer fake.executeChangeSetMutex.RUnlock()
	return len(fake.executeChangeSetArgsForCall)
}

func (fake *FakeCloudFormationAPI) ExecuteChangeSetArgsForCall(i int) *cloudformation.ExecuteChangeSetInput {
	fake.executeChangeSetMutex.RLock()
	defer fake.executeChangeSetMutex.RUnlock()
	return fake.executeChangeSetArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) ExecuteChangeSetReturns(result1 *cloudformation.ExecuteChangeSetOutput, result2 error) {
	fake.ExecuteChangeSetStub = nil
	fake.executeChangeSetReturns = struct {
		result1 *cloudformation.ExecuteChangeSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ExecuteChangeSetReturnsOnCall(i int, result1 *cloudformation.ExecuteChangeSetOutput, result2 error) {
	fake.ExecuteChangeSetStub = nil
	if fake.executeChangeSetReturnsOnCall == nil {
		fake.executeChangeSetReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.ExecuteChangeSetOutput
			result2 error
		})
	}
	fake.executeChangeSetReturnsOnCall[i] = struct {
		result1 *cloudformation.ExecuteChangeSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ExecuteChangeSetWithContext(arg1 aws.Context, arg2 *cloudformation.ExecuteChangeSetInput, arg3 ...request.Option) (*cloudformation.ExecuteChangeSetOutput, error) {
	fake.executeChangeSetWithContextMutex.Lock()
	ret, specificReturn := fake.executeChangeSetWithContextReturnsOnCall[len(fake.executeChangeSetWithContextArgsForCall)]
	fake.executeChangeSetWithContextArgsForCall = append(fake.executeChangeSetWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.ExecuteChangeSetInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ExecuteChangeSetWithContext", []interface{}{arg1, arg2, arg3})
	fake.executeChangeSetWithContextMutex.Unlock()
	if fake.ExecuteChangeSetWithContextStub != nil {
		return fake.ExecuteChangeSetWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.executeChangeSetWithContextReturns.result1, fake.executeChangeSetWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) ExecuteChangeSetWithContextCallCount() int {
	fake.executeChangeSetWithContextMutex.RLock()
	defer fake.executeChangeSetWithContextMutex.RUnlock()
	return len(fake.executeChangeSetWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) ExecuteChangeSetWithContextArgsForCall(i int) (aws.Context, *cloudformation.ExecuteChangeSetInput, []request.Option) {
	fake.executeChangeSetWithContextMutex.RLock()
	defer fake.executeChangeSetWithContextMutex.RUnlock()
	return fake.executeChangeSetWithContextArgsForCall[i].arg1, fake.executeChangeSetWithContextArgsForCall[i].arg2, fake.executeChangeSetWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) ExecuteChangeSetWithContextReturns(result1 *cloudformation.ExecuteChangeSetOutput, result2 error) {
	fake.ExecuteChangeSetWithContextStub = nil
	fake.executeChangeSetWithContextReturns = struct {
		result1 *cloudformation.ExecuteChangeSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ExecuteChangeSetWithContextReturnsOnCall(i int, result1 *cloudformation.ExecuteChangeSetOutput, result2 error) {
	fake.ExecuteChangeSetWithContextStub = nil
	if fake.executeChangeSetWithContextReturnsOnCall == nil {
		fake.executeChangeSetWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.ExecuteChangeSetOutput
			result2 error
		})
	}
	fake.executeChangeSetWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.ExecuteChangeSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ExecuteChangeSetRequest(arg1 *cloudformation.ExecuteChangeSetInput) (*request.Request, *cloudformation.ExecuteChangeSetOutput) {
	fake.executeChangeSetRequestMutex.Lock()
	ret, specificReturn := fake.executeChangeSetRequestReturnsOnCall[len(fake.executeChangeSetRequestArgsForCall)]
	fake.executeChangeSetRequestArgsForCall = append(fake.executeChangeSetRequestArgsForCall, struct {
		arg1 *cloudformation.ExecuteChangeSetInput
	}{arg1})
	fake.recordInvocation("ExecuteChangeSetRequest", []interface{}{arg1})
	fake.executeChangeSetRequestMutex.Unlock()
	if fake.ExecuteChangeSetRequestStub != nil {
		return fake.ExecuteChangeSetRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.executeChangeSetRequestReturns.result1, fake.executeChangeSetRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) ExecuteChangeSetRequestCallCount() int {
	fake.executeChangeSetRequestMutex.RLock()
	defer fake.executeChangeSetRequestMutex.RUnlock()
	return len(fake.executeChangeSetRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) ExecuteChangeSetRequestArgsForCall(i int) *cloudformation.ExecuteChangeSetInput {
	fake.executeChangeSetRequestMutex.RLock()
	defer fake.executeChangeSetRequestMutex.RUnlock()
	return fake.executeChangeSetRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) ExecuteChangeSetRequestReturns(result1 *request.Request, result2 *cloudformation.ExecuteChangeSetOutput) {
	fake.ExecuteChangeSetRequestStub = nil
	fake.executeChangeSetRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.ExecuteChangeSetOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ExecuteChangeSetRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.ExecuteChangeSetOutput) {
	fake.ExecuteChangeSetRequestStub = nil
	if fake.executeChangeSetRequestReturnsOnCall == nil {
		fake.executeChangeSetRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.ExecuteChangeSetOutput
		})
	}
	fake.executeChangeSetRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.ExecuteChangeSetOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) GetStackPolicy(arg1 *cloudformation.GetStackPolicyInput) (*cloudformation.GetStackPolicyOutput, error) {
	fake.getStackPolicyMutex.Lock()
	ret, specificReturn := fake.getStackPolicyReturnsOnCall[len(fake.getStackPolicyArgsForCall)]
	fake.getStackPolicyArgsForCall = append(fake.getStackPolicyArgsForCall, struct {
		arg1 *cloudformation.GetStackPolicyInput
	}{arg1})
	fake.recordInvocation("GetStackPolicy", []interface{}{arg1})
	fake.getStackPolicyMutex.Unlock()
	if fake.GetStackPolicyStub != nil {
		return fake.GetStackPolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getStackPolicyReturns.result1, fake.getStackPolicyReturns.result2
}

func (fake *FakeCloudFormationAPI) GetStackPolicyCallCount() int {
	fake.getStackPolicyMutex.RLock()
	defer fake.getStackPolicyMutex.RUnlock()
	return len(fake.getStackPolicyArgsForCall)
}

func (fake *FakeCloudFormationAPI) GetStackPolicyArgsForCall(i int) *cloudformation.GetStackPolicyInput {
	fake.getStackPolicyMutex.RLock()
	defer fake.getStackPolicyMutex.RUnlock()
	return fake.getStackPolicyArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) GetStackPolicyReturns(result1 *cloudformation.GetStackPolicyOutput, result2 error) {
	fake.GetStackPolicyStub = nil
	fake.getStackPolicyReturns = struct {
		result1 *cloudformation.GetStackPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) GetStackPolicyReturnsOnCall(i int, result1 *cloudformation.GetStackPolicyOutput, result2 error) {
	fake.GetStackPolicyStub = nil
	if fake.getStackPolicyReturnsOnCall == nil {
		fake.getStackPolicyReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.GetStackPolicyOutput
			result2 error
		})
	}
	fake.getStackPolicyReturnsOnCall[i] = struct {
		result1 *cloudformation.GetStackPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) GetStackPolicyWithContext(arg1 aws.Context, arg2 *cloudformation.GetStackPolicyInput, arg3 ...request.Option) (*cloudformation.GetStackPolicyOutput, error) {
	fake.getStackPolicyWithContextMutex.Lock()
	ret, specificReturn := fake.getStackPolicyWithContextReturnsOnCall[len(fake.getStackPolicyWithContextArgsForCall)]
	fake.getStackPolicyWithContextArgsForCall = append(fake.getStackPolicyWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.GetStackPolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetStackPolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.getStackPolicyWithContextMutex.Unlock()
	if fake.GetStackPolicyWithContextStub != nil {
		return fake.GetStackPolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getStackPolicyWithContextReturns.result1, fake.getStackPolicyWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) GetStackPolicyWithContextCallCount() int {
	fake.getStackPolicyWithContextMutex.RLock()
	defer fake.getStackPolicyWithContextMutex.RUnlock()
	return len(fake.getStackPolicyWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) GetStackPolicyWithContextArgsForCall(i int) (aws.Context, *cloudformation.GetStackPolicyInput, []request.Option) {
	fake.getStackPolicyWithContextMutex.RLock()
	defer fake.getStackPolicyWithContextMutex.RUnlock()
	return fake.getStackPolicyWithContextArgsForCall[i].arg1, fake.getStackPolicyWithContextArgsForCall[i].arg2, fake.getStackPolicyWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) GetStackPolicyWithContextReturns(result1 *cloudformation.GetStackPolicyOutput, result2 error) {
	fake.GetStackPolicyWithContextStub = nil
	fake.getStackPolicyWithContextReturns = struct {
		result1 *cloudformation.GetStackPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) GetStackPolicyWithContextReturnsOnCall(i int, result1 *cloudformation.GetStackPolicyOutput, result2 error) {
	fake.GetStackPolicyWithContextStub = nil
	if fake.getStackPolicyWithContextReturnsOnCall == nil {
		fake.getStackPolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.GetStackPolicyOutput
			result2 error
		})
	}
	fake.getStackPolicyWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.GetStackPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) GetStackPolicyRequest(arg1 *cloudformation.GetStackPolicyInput) (*request.Request, *cloudformation.GetStackPolicyOutput) {
	fake.getStackPolicyRequestMutex.Lock()
	ret, specificReturn := fake.getStackPolicyRequestReturnsOnCall[len(fake.getStackPolicyRequestArgsForCall)]
	fake.getStackPolicyRequestArgsForCall = append(fake.getStackPolicyRequestArgsForCall, struct {
		arg1 *cloudformation.GetStackPolicyInput
	}{arg1})
	fake.recordInvocation("GetStackPolicyRequest", []interface{}{arg1})
	fake.getStackPolicyRequestMutex.Unlock()
	if fake.GetStackPolicyRequestStub != nil {
		return fake.GetStackPolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getStackPolicyRequestReturns.result1, fake.getStackPolicyRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) GetStackPolicyRequestCallCount() int {
	fake.getStackPolicyRequestMutex.RLock()
	defer fake.getStackPolicyRequestMutex.RUnlock()
	return len(fake.getStackPolicyRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) GetStackPolicyRequestArgsForCall(i int) *cloudformation.GetStackPolicyInput {
	fake.getStackPolicyRequestMutex.RLock()
	defer fake.getStackPolicyRequestMutex.RUnlock()
	return fake.getStackPolicyRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) GetStackPolicyRequestReturns(result1 *request.Request, result2 *cloudformation.GetStackPolicyOutput) {
	fake.GetStackPolicyRequestStub = nil
	fake.getStackPolicyRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.GetStackPolicyOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) GetStackPolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.GetStackPolicyOutput) {
	fake.GetStackPolicyRequestStub = nil
	if fake.getStackPolicyRequestReturnsOnCall == nil {
		fake.getStackPolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.GetStackPolicyOutput
		})
	}
	fake.getStackPolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.GetStackPolicyOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) GetTemplate(arg1 *cloudformation.GetTemplateInput) (*cloudformation.GetTemplateOutput, error) {
	fake.getTemplateMutex.Lock()
	ret, specificReturn := fake.getTemplateReturnsOnCall[len(fake.getTemplateArgsForCall)]
	fake.getTemplateArgsForCall = append(fake.getTemplateArgsForCall, struct {
		arg1 *cloudformation.GetTemplateInput
	}{arg1})
	fake.recordInvocation("GetTemplate", []interface{}{arg1})
	fake.getTemplateMutex.Unlock()
	if fake.GetTemplateStub != nil {
		return fake.GetTemplateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getTemplateReturns.result1, fake.getTemplateReturns.result2
}

func (fake *FakeCloudFormationAPI) GetTemplateCallCount() int {
	fake.getTemplateMutex.RLock()
	defer fake.getTemplateMutex.RUnlock()
	return len(fake.getTemplateArgsForCall)
}

func (fake *FakeCloudFormationAPI) GetTemplateArgsForCall(i int) *cloudformation.GetTemplateInput {
	fake.getTemplateMutex.RLock()
	defer fake.getTemplateMutex.RUnlock()
	return fake.getTemplateArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) GetTemplateReturns(result1 *cloudformation.GetTemplateOutput, result2 error) {
	fake.GetTemplateStub = nil
	fake.getTemplateReturns = struct {
		result1 *cloudformation.GetTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) GetTemplateReturnsOnCall(i int, result1 *cloudformation.GetTemplateOutput, result2 error) {
	fake.GetTemplateStub = nil
	if fake.getTemplateReturnsOnCall == nil {
		fake.getTemplateReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.GetTemplateOutput
			result2 error
		})
	}
	fake.getTemplateReturnsOnCall[i] = struct {
		result1 *cloudformation.GetTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) GetTemplateWithContext(arg1 aws.Context, arg2 *cloudformation.GetTemplateInput, arg3 ...request.Option) (*cloudformation.GetTemplateOutput, error) {
	fake.getTemplateWithContextMutex.Lock()
	ret, specificReturn := fake.getTemplateWithContextReturnsOnCall[len(fake.getTemplateWithContextArgsForCall)]
	fake.getTemplateWithContextArgsForCall = append(fake.getTemplateWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.GetTemplateInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetTemplateWithContext", []interface{}{arg1, arg2, arg3})
	fake.getTemplateWithContextMutex.Unlock()
	if fake.GetTemplateWithContextStub != nil {
		return fake.GetTemplateWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getTemplateWithContextReturns.result1, fake.getTemplateWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) GetTemplateWithContextCallCount() int {
	fake.getTemplateWithContextMutex.RLock()
	defer fake.getTemplateWithContextMutex.RUnlock()
	return len(fake.getTemplateWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) GetTemplateWithContextArgsForCall(i int) (aws.Context, *cloudformation.GetTemplateInput, []request.Option) {
	fake.getTemplateWithContextMutex.RLock()
	defer fake.getTemplateWithContextMutex.RUnlock()
	return fake.getTemplateWithContextArgsForCall[i].arg1, fake.getTemplateWithContextArgsForCall[i].arg2, fake.getTemplateWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) GetTemplateWithContextReturns(result1 *cloudformation.GetTemplateOutput, result2 error) {
	fake.GetTemplateWithContextStub = nil
	fake.getTemplateWithContextReturns = struct {
		result1 *cloudformation.GetTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) GetTemplateWithContextReturnsOnCall(i int, result1 *cloudformation.GetTemplateOutput, result2 error) {
	fake.GetTemplateWithContextStub = nil
	if fake.getTemplateWithContextReturnsOnCall == nil {
		fake.getTemplateWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.GetTemplateOutput
			result2 error
		})
	}
	fake.getTemplateWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.GetTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) GetTemplateRequest(arg1 *cloudformation.GetTemplateInput) (*request.Request, *cloudformation.GetTemplateOutput) {
	fake.getTemplateRequestMutex.Lock()
	ret, specificReturn := fake.getTemplateRequestReturnsOnCall[len(fake.getTemplateRequestArgsForCall)]
	fake.getTemplateRequestArgsForCall = append(fake.getTemplateRequestArgsForCall, struct {
		arg1 *cloudformation.GetTemplateInput
	}{arg1})
	fake.recordInvocation("GetTemplateRequest", []interface{}{arg1})
	fake.getTemplateRequestMutex.Unlock()
	if fake.GetTemplateRequestStub != nil {
		return fake.GetTemplateRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getTemplateRequestReturns.result1, fake.getTemplateRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) GetTemplateRequestCallCount() int {
	fake.getTemplateRequestMutex.RLock()
	defer fake.getTemplateRequestMutex.RUnlock()
	return len(fake.getTemplateRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) GetTemplateRequestArgsForCall(i int) *cloudformation.GetTemplateInput {
	fake.getTemplateRequestMutex.RLock()
	defer fake.getTemplateRequestMutex.RUnlock()
	return fake.getTemplateRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) GetTemplateRequestReturns(result1 *request.Request, result2 *cloudformation.GetTemplateOutput) {
	fake.GetTemplateRequestStub = nil
	fake.getTemplateRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.GetTemplateOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) GetTemplateRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.GetTemplateOutput) {
	fake.GetTemplateRequestStub = nil
	if fake.getTemplateRequestReturnsOnCall == nil {
		fake.getTemplateRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.GetTemplateOutput
		})
	}
	fake.getTemplateRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.GetTemplateOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) GetTemplateSummary(arg1 *cloudformation.GetTemplateSummaryInput) (*cloudformation.GetTemplateSummaryOutput, error) {
	fake.getTemplateSummaryMutex.Lock()
	ret, specificReturn := fake.getTemplateSummaryReturnsOnCall[len(fake.getTemplateSummaryArgsForCall)]
	fake.getTemplateSummaryArgsForCall = append(fake.getTemplateSummaryArgsForCall, struct {
		arg1 *cloudformation.GetTemplateSummaryInput
	}{arg1})
	fake.recordInvocation("GetTemplateSummary", []interface{}{arg1})
	fake.getTemplateSummaryMutex.Unlock()
	if fake.GetTemplateSummaryStub != nil {
		return fake.GetTemplateSummaryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getTemplateSummaryReturns.result1, fake.getTemplateSummaryReturns.result2
}

func (fake *FakeCloudFormationAPI) GetTemplateSummaryCallCount() int {
	fake.getTemplateSummaryMutex.RLock()
	defer fake.getTemplateSummaryMutex.RUnlock()
	return len(fake.getTemplateSummaryArgsForCall)
}

func (fake *FakeCloudFormationAPI) GetTemplateSummaryArgsForCall(i int) *cloudformation.GetTemplateSummaryInput {
	fake.getTemplateSummaryMutex.RLock()
	defer fake.getTemplateSummaryMutex.RUnlock()
	return fake.getTemplateSummaryArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) GetTemplateSummaryReturns(result1 *cloudformation.GetTemplateSummaryOutput, result2 error) {
	fake.GetTemplateSummaryStub = nil
	fake.getTemplateSummaryReturns = struct {
		result1 *cloudformation.GetTemplateSummaryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) GetTemplateSummaryReturnsOnCall(i int, result1 *cloudformation.GetTemplateSummaryOutput, result2 error) {
	fake.GetTemplateSummaryStub = nil
	if fake.getTemplateSummaryReturnsOnCall == nil {
		fake.getTemplateSummaryReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.GetTemplateSummaryOutput
			result2 error
		})
	}
	fake.getTemplateSummaryReturnsOnCall[i] = struct {
		result1 *cloudformation.GetTemplateSummaryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) GetTemplateSummaryWithContext(arg1 aws.Context, arg2 *cloudformation.GetTemplateSummaryInput, arg3 ...request.Option) (*cloudformation.GetTemplateSummaryOutput, error) {
	fake.getTemplateSummaryWithContextMutex.Lock()
	ret, specificReturn := fake.getTemplateSummaryWithContextReturnsOnCall[len(fake.getTemplateSummaryWithContextArgsForCall)]
	fake.getTemplateSummaryWithContextArgsForCall = append(fake.getTemplateSummaryWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.GetTemplateSummaryInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetTemplateSummaryWithContext", []interface{}{arg1, arg2, arg3})
	fake.getTemplateSummaryWithContextMutex.Unlock()
	if fake.GetTemplateSummaryWithContextStub != nil {
		return fake.GetTemplateSummaryWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getTemplateSummaryWithContextReturns.result1, fake.getTemplateSummaryWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) GetTemplateSummaryWithContextCallCount() int {
	fake.getTemplateSummaryWithContextMutex.RLock()
	defer fake.getTemplateSummaryWithContextMutex.RUnlock()
	return len(fake.getTemplateSummaryWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) GetTemplateSummaryWithContextArgsForCall(i int) (aws.Context, *cloudformation.GetTemplateSummaryInput, []request.Option) {
	fake.getTemplateSummaryWithContextMutex.RLock()
	defer fake.getTemplateSummaryWithContextMutex.RUnlock()
	return fake.getTemplateSummaryWithContextArgsForCall[i].arg1, fake.getTemplateSummaryWithContextArgsForCall[i].arg2, fake.getTemplateSummaryWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) GetTemplateSummaryWithContextReturns(result1 *cloudformation.GetTemplateSummaryOutput, result2 error) {
	fake.GetTemplateSummaryWithContextStub = nil
	fake.getTemplateSummaryWithContextReturns = struct {
		result1 *cloudformation.GetTemplateSummaryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) GetTemplateSummaryWithContextReturnsOnCall(i int, result1 *cloudformation.GetTemplateSummaryOutput, result2 error) {
	fake.GetTemplateSummaryWithContextStub = nil
	if fake.getTemplateSummaryWithContextReturnsOnCall == nil {
		fake.getTemplateSummaryWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.GetTemplateSummaryOutput
			result2 error
		})
	}
	fake.getTemplateSummaryWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.GetTemplateSummaryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) GetTemplateSummaryRequest(arg1 *cloudformation.GetTemplateSummaryInput) (*request.Request, *cloudformation.GetTemplateSummaryOutput) {
	fake.getTemplateSummaryRequestMutex.Lock()
	ret, specificReturn := fake.getTemplateSummaryRequestReturnsOnCall[len(fake.getTemplateSummaryRequestArgsForCall)]
	fake.getTemplateSummaryRequestArgsForCall = append(fake.getTemplateSummaryRequestArgsForCall, struct {
		arg1 *cloudformation.GetTemplateSummaryInput
	}{arg1})
	fake.recordInvocation("GetTemplateSummaryRequest", []interface{}{arg1})
	fake.getTemplateSummaryRequestMutex.Unlock()
	if fake.GetTemplateSummaryRequestStub != nil {
		return fake.GetTemplateSummaryRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getTemplateSummaryRequestReturns.result1, fake.getTemplateSummaryRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) GetTemplateSummaryRequestCallCount() int {
	fake.getTemplateSummaryRequestMutex.RLock()
	defer fake.getTemplateSummaryRequestMutex.RUnlock()
	return len(fake.getTemplateSummaryRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) GetTemplateSummaryRequestArgsForCall(i int) *cloudformation.GetTemplateSummaryInput {
	fake.getTemplateSummaryRequestMutex.RLock()
	defer fake.getTemplateSummaryRequestMutex.RUnlock()
	return fake.getTemplateSummaryRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) GetTemplateSummaryRequestReturns(result1 *request.Request, result2 *cloudformation.GetTemplateSummaryOutput) {
	fake.GetTemplateSummaryRequestStub = nil
	fake.getTemplateSummaryRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.GetTemplateSummaryOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) GetTemplateSummaryRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.GetTemplateSummaryOutput) {
	fake.GetTemplateSummaryRequestStub = nil
	if fake.getTemplateSummaryRequestReturnsOnCall == nil {
		fake.getTemplateSummaryRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.GetTemplateSummaryOutput
		})
	}
	fake.getTemplateSummaryRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.GetTemplateSummaryOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListChangeSets(arg1 *cloudformation.ListChangeSetsInput) (*cloudformation.ListChangeSetsOutput, error) {
	fake.listChangeSetsMutex.Lock()
	ret, specificReturn := fake.listChangeSetsReturnsOnCall[len(fake.listChangeSetsArgsForCall)]
	fake.listChangeSetsArgsForCall = append(fake.listChangeSetsArgsForCall, struct {
		arg1 *cloudformation.ListChangeSetsInput
	}{arg1})
	fake.recordInvocation("ListChangeSets", []interface{}{arg1})
	fake.listChangeSetsMutex.Unlock()
	if fake.ListChangeSetsStub != nil {
		return fake.ListChangeSetsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listChangeSetsReturns.result1, fake.listChangeSetsReturns.result2
}

func (fake *FakeCloudFormationAPI) ListChangeSetsCallCount() int {
	fake.listChangeSetsMutex.RLock()
	defer fake.listChangeSetsMutex.RUnlock()
	return len(fake.listChangeSetsArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListChangeSetsArgsForCall(i int) *cloudformation.ListChangeSetsInput {
	fake.listChangeSetsMutex.RLock()
	defer fake.listChangeSetsMutex.RUnlock()
	return fake.listChangeSetsArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) ListChangeSetsReturns(result1 *cloudformation.ListChangeSetsOutput, result2 error) {
	fake.ListChangeSetsStub = nil
	fake.listChangeSetsReturns = struct {
		result1 *cloudformation.ListChangeSetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListChangeSetsReturnsOnCall(i int, result1 *cloudformation.ListChangeSetsOutput, result2 error) {
	fake.ListChangeSetsStub = nil
	if fake.listChangeSetsReturnsOnCall == nil {
		fake.listChangeSetsReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.ListChangeSetsOutput
			result2 error
		})
	}
	fake.listChangeSetsReturnsOnCall[i] = struct {
		result1 *cloudformation.ListChangeSetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListChangeSetsWithContext(arg1 aws.Context, arg2 *cloudformation.ListChangeSetsInput, arg3 ...request.Option) (*cloudformation.ListChangeSetsOutput, error) {
	fake.listChangeSetsWithContextMutex.Lock()
	ret, specificReturn := fake.listChangeSetsWithContextReturnsOnCall[len(fake.listChangeSetsWithContextArgsForCall)]
	fake.listChangeSetsWithContextArgsForCall = append(fake.listChangeSetsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.ListChangeSetsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListChangeSetsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listChangeSetsWithContextMutex.Unlock()
	if fake.ListChangeSetsWithContextStub != nil {
		return fake.ListChangeSetsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listChangeSetsWithContextReturns.result1, fake.listChangeSetsWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) ListChangeSetsWithContextCallCount() int {
	fake.listChangeSetsWithContextMutex.RLock()
	defer fake.listChangeSetsWithContextMutex.RUnlock()
	return len(fake.listChangeSetsWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListChangeSetsWithContextArgsForCall(i int) (aws.Context, *cloudformation.ListChangeSetsInput, []request.Option) {
	fake.listChangeSetsWithContextMutex.RLock()
	defer fake.listChangeSetsWithContextMutex.RUnlock()
	return fake.listChangeSetsWithContextArgsForCall[i].arg1, fake.listChangeSetsWithContextArgsForCall[i].arg2, fake.listChangeSetsWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) ListChangeSetsWithContextReturns(result1 *cloudformation.ListChangeSetsOutput, result2 error) {
	fake.ListChangeSetsWithContextStub = nil
	fake.listChangeSetsWithContextReturns = struct {
		result1 *cloudformation.ListChangeSetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListChangeSetsWithContextReturnsOnCall(i int, result1 *cloudformation.ListChangeSetsOutput, result2 error) {
	fake.ListChangeSetsWithContextStub = nil
	if fake.listChangeSetsWithContextReturnsOnCall == nil {
		fake.listChangeSetsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.ListChangeSetsOutput
			result2 error
		})
	}
	fake.listChangeSetsWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.ListChangeSetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListChangeSetsRequest(arg1 *cloudformation.ListChangeSetsInput) (*request.Request, *cloudformation.ListChangeSetsOutput) {
	fake.listChangeSetsRequestMutex.Lock()
	ret, specificReturn := fake.listChangeSetsRequestReturnsOnCall[len(fake.listChangeSetsRequestArgsForCall)]
	fake.listChangeSetsRequestArgsForCall = append(fake.listChangeSetsRequestArgsForCall, struct {
		arg1 *cloudformation.ListChangeSetsInput
	}{arg1})
	fake.recordInvocation("ListChangeSetsRequest", []interface{}{arg1})
	fake.listChangeSetsRequestMutex.Unlock()
	if fake.ListChangeSetsRequestStub != nil {
		return fake.ListChangeSetsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listChangeSetsRequestReturns.result1, fake.listChangeSetsRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) ListChangeSetsRequestCallCount() int {
	fake.listChangeSetsRequestMutex.RLock()
	defer fake.listChangeSetsRequestMutex.RUnlock()
	return len(fake.listChangeSetsRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListChangeSetsRequestArgsForCall(i int) *cloudformation.ListChangeSetsInput {
	fake.listChangeSetsRequestMutex.RLock()
	defer fake.listChangeSetsRequestMutex.RUnlock()
	return fake.listChangeSetsRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) ListChangeSetsRequestReturns(result1 *request.Request, result2 *cloudformation.ListChangeSetsOutput) {
	fake.ListChangeSetsRequestStub = nil
	fake.listChangeSetsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.ListChangeSetsOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListChangeSetsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.ListChangeSetsOutput) {
	fake.ListChangeSetsRequestStub = nil
	if fake.listChangeSetsRequestReturnsOnCall == nil {
		fake.listChangeSetsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.ListChangeSetsOutput
		})
	}
	fake.listChangeSetsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.ListChangeSetsOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListExports(arg1 *cloudformation.ListExportsInput) (*cloudformation.ListExportsOutput, error) {
	fake.listExportsMutex.Lock()
	ret, specificReturn := fake.listExportsReturnsOnCall[len(fake.listExportsArgsForCall)]
	fake.listExportsArgsForCall = append(fake.listExportsArgsForCall, struct {
		arg1 *cloudformation.ListExportsInput
	}{arg1})
	fake.recordInvocation("ListExports", []interface{}{arg1})
	fake.listExportsMutex.Unlock()
	if fake.ListExportsStub != nil {
		return fake.ListExportsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listExportsReturns.result1, fake.listExportsReturns.result2
}

func (fake *FakeCloudFormationAPI) ListExportsCallCount() int {
	fake.listExportsMutex.RLock()
	defer fake.listExportsMutex.RUnlock()
	return len(fake.listExportsArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListExportsArgsForCall(i int) *cloudformation.ListExportsInput {
	fake.listExportsMutex.RLock()
	defer fake.listExportsMutex.RUnlock()
	return fake.listExportsArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) ListExportsReturns(result1 *cloudformation.ListExportsOutput, result2 error) {
	fake.ListExportsStub = nil
	fake.listExportsReturns = struct {
		result1 *cloudformation.ListExportsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListExportsReturnsOnCall(i int, result1 *cloudformation.ListExportsOutput, result2 error) {
	fake.ListExportsStub = nil
	if fake.listExportsReturnsOnCall == nil {
		fake.listExportsReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.ListExportsOutput
			result2 error
		})
	}
	fake.listExportsReturnsOnCall[i] = struct {
		result1 *cloudformation.ListExportsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListExportsWithContext(arg1 aws.Context, arg2 *cloudformation.ListExportsInput, arg3 ...request.Option) (*cloudformation.ListExportsOutput, error) {
	fake.listExportsWithContextMutex.Lock()
	ret, specificReturn := fake.listExportsWithContextReturnsOnCall[len(fake.listExportsWithContextArgsForCall)]
	fake.listExportsWithContextArgsForCall = append(fake.listExportsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.ListExportsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListExportsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listExportsWithContextMutex.Unlock()
	if fake.ListExportsWithContextStub != nil {
		return fake.ListExportsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listExportsWithContextReturns.result1, fake.listExportsWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) ListExportsWithContextCallCount() int {
	fake.listExportsWithContextMutex.RLock()
	defer fake.listExportsWithContextMutex.RUnlock()
	return len(fake.listExportsWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListExportsWithContextArgsForCall(i int) (aws.Context, *cloudformation.ListExportsInput, []request.Option) {
	fake.listExportsWithContextMutex.RLock()
	defer fake.listExportsWithContextMutex.RUnlock()
	return fake.listExportsWithContextArgsForCall[i].arg1, fake.listExportsWithContextArgsForCall[i].arg2, fake.listExportsWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) ListExportsWithContextReturns(result1 *cloudformation.ListExportsOutput, result2 error) {
	fake.ListExportsWithContextStub = nil
	fake.listExportsWithContextReturns = struct {
		result1 *cloudformation.ListExportsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListExportsWithContextReturnsOnCall(i int, result1 *cloudformation.ListExportsOutput, result2 error) {
	fake.ListExportsWithContextStub = nil
	if fake.listExportsWithContextReturnsOnCall == nil {
		fake.listExportsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.ListExportsOutput
			result2 error
		})
	}
	fake.listExportsWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.ListExportsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListExportsRequest(arg1 *cloudformation.ListExportsInput) (*request.Request, *cloudformation.ListExportsOutput) {
	fake.listExportsRequestMutex.Lock()
	ret, specificReturn := fake.listExportsRequestReturnsOnCall[len(fake.listExportsRequestArgsForCall)]
	fake.listExportsRequestArgsForCall = append(fake.listExportsRequestArgsForCall, struct {
		arg1 *cloudformation.ListExportsInput
	}{arg1})
	fake.recordInvocation("ListExportsRequest", []interface{}{arg1})
	fake.listExportsRequestMutex.Unlock()
	if fake.ListExportsRequestStub != nil {
		return fake.ListExportsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listExportsRequestReturns.result1, fake.listExportsRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) ListExportsRequestCallCount() int {
	fake.listExportsRequestMutex.RLock()
	defer fake.listExportsRequestMutex.RUnlock()
	return len(fake.listExportsRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListExportsRequestArgsForCall(i int) *cloudformation.ListExportsInput {
	fake.listExportsRequestMutex.RLock()
	defer fake.listExportsRequestMutex.RUnlock()
	return fake.listExportsRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) ListExportsRequestReturns(result1 *request.Request, result2 *cloudformation.ListExportsOutput) {
	fake.ListExportsRequestStub = nil
	fake.listExportsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.ListExportsOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListExportsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.ListExportsOutput) {
	fake.ListExportsRequestStub = nil
	if fake.listExportsRequestReturnsOnCall == nil {
		fake.listExportsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.ListExportsOutput
		})
	}
	fake.listExportsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.ListExportsOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListExportsPages(arg1 *cloudformation.ListExportsInput, arg2 func(*cloudformation.ListExportsOutput, bool) bool) error {
	fake.listExportsPagesMutex.Lock()
	ret, specificReturn := fake.listExportsPagesReturnsOnCall[len(fake.listExportsPagesArgsForCall)]
	fake.listExportsPagesArgsForCall = append(fake.listExportsPagesArgsForCall, struct {
		arg1 *cloudformation.ListExportsInput
		arg2 func(*cloudformation.ListExportsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListExportsPages", []interface{}{arg1, arg2})
	fake.listExportsPagesMutex.Unlock()
	if fake.ListExportsPagesStub != nil {
		return fake.ListExportsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.listExportsPagesReturns.result1
}

func (fake *FakeCloudFormationAPI) ListExportsPagesCallCount() int {
	fake.listExportsPagesMutex.RLock()
	defer fake.listExportsPagesMutex.RUnlock()
	return len(fake.listExportsPagesArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListExportsPagesArgsForCall(i int) (*cloudformation.ListExportsInput, func(*cloudformation.ListExportsOutput, bool) bool) {
	fake.listExportsPagesMutex.RLock()
	defer fake.listExportsPagesMutex.RUnlock()
	return fake.listExportsPagesArgsForCall[i].arg1, fake.listExportsPagesArgsForCall[i].arg2
}

func (fake *FakeCloudFormationAPI) ListExportsPagesReturns(result1 error) {
	fake.ListExportsPagesStub = nil
	fake.listExportsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) ListExportsPagesReturnsOnCall(i int, result1 error) {
	fake.ListExportsPagesStub = nil
	if fake.listExportsPagesReturnsOnCall == nil {
		fake.listExportsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listExportsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) ListExportsPagesWithContext(arg1 aws.Context, arg2 *cloudformation.ListExportsInput, arg3 func(*cloudformation.ListExportsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listExportsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listExportsPagesWithContextReturnsOnCall[len(fake.listExportsPagesWithContextArgsForCall)]
	fake.listExportsPagesWithContextArgsForCall = append(fake.listExportsPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.ListExportsInput
		arg3 func(*cloudformation.ListExportsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListExportsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listExportsPagesWithContextMutex.Unlock()
	if fake.ListExportsPagesWithContextStub != nil {
		return fake.ListExportsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.listExportsPagesWithContextReturns.result1
}

func (fake *FakeCloudFormationAPI) ListExportsPagesWithContextCallCount() int {
	fake.listExportsPagesWithContextMutex.RLock()
	defer fake.listExportsPagesWithContextMutex.RUnlock()
	return len(fake.listExportsPagesWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListExportsPagesWithContextArgsForCall(i int) (aws.Context, *cloudformation.ListExportsInput, func(*cloudformation.ListExportsOutput, bool) bool, []request.Option) {
	fake.listExportsPagesWithContextMutex.RLock()
	defer fake.listExportsPagesWithContextMutex.RUnlock()
	return fake.listExportsPagesWithContextArgsForCall[i].arg1, fake.listExportsPagesWithContextArgsForCall[i].arg2, fake.listExportsPagesWithContextArgsForCall[i].arg3, fake.listExportsPagesWithContextArgsForCall[i].arg4
}

func (fake *FakeCloudFormationAPI) ListExportsPagesWithContextReturns(result1 error) {
	fake.ListExportsPagesWithContextStub = nil
	fake.listExportsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) ListExportsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.ListExportsPagesWithContextStub = nil
	if fake.listExportsPagesWithContextReturnsOnCall == nil {
		fake.listExportsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listExportsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) ListImports(arg1 *cloudformation.ListImportsInput) (*cloudformation.ListImportsOutput, error) {
	fake.listImportsMutex.Lock()
	ret, specificReturn := fake.listImportsReturnsOnCall[len(fake.listImportsArgsForCall)]
	fake.listImportsArgsForCall = append(fake.listImportsArgsForCall, struct {
		arg1 *cloudformation.ListImportsInput
	}{arg1})
	fake.recordInvocation("ListImports", []interface{}{arg1})
	fake.listImportsMutex.Unlock()
	if fake.ListImportsStub != nil {
		return fake.ListImportsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listImportsReturns.result1, fake.listImportsReturns.result2
}

func (fake *FakeCloudFormationAPI) ListImportsCallCount() int {
	fake.listImportsMutex.RLock()
	defer fake.listImportsMutex.RUnlock()
	return len(fake.listImportsArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListImportsArgsForCall(i int) *cloudformation.ListImportsInput {
	fake.listImportsMutex.RLock()
	defer fake.listImportsMutex.RUnlock()
	return fake.listImportsArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) ListImportsReturns(result1 *cloudformation.ListImportsOutput, result2 error) {
	fake.ListImportsStub = nil
	fake.listImportsReturns = struct {
		result1 *cloudformation.ListImportsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListImportsReturnsOnCall(i int, result1 *cloudformation.ListImportsOutput, result2 error) {
	fake.ListImportsStub = nil
	if fake.listImportsReturnsOnCall == nil {
		fake.listImportsReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.ListImportsOutput
			result2 error
		})
	}
	fake.listImportsReturnsOnCall[i] = struct {
		result1 *cloudformation.ListImportsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListImportsWithContext(arg1 aws.Context, arg2 *cloudformation.ListImportsInput, arg3 ...request.Option) (*cloudformation.ListImportsOutput, error) {
	fake.listImportsWithContextMutex.Lock()
	ret, specificReturn := fake.listImportsWithContextReturnsOnCall[len(fake.listImportsWithContextArgsForCall)]
	fake.listImportsWithContextArgsForCall = append(fake.listImportsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.ListImportsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListImportsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listImportsWithContextMutex.Unlock()
	if fake.ListImportsWithContextStub != nil {
		return fake.ListImportsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listImportsWithContextReturns.result1, fake.listImportsWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) ListImportsWithContextCallCount() int {
	fake.listImportsWithContextMutex.RLock()
	defer fake.listImportsWithContextMutex.RUnlock()
	return len(fake.listImportsWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListImportsWithContextArgsForCall(i int) (aws.Context, *cloudformation.ListImportsInput, []request.Option) {
	fake.listImportsWithContextMutex.RLock()
	defer fake.listImportsWithContextMutex.RUnlock()
	return fake.listImportsWithContextArgsForCall[i].arg1, fake.listImportsWithContextArgsForCall[i].arg2, fake.listImportsWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) ListImportsWithContextReturns(result1 *cloudformation.ListImportsOutput, result2 error) {
	fake.ListImportsWithContextStub = nil
	fake.listImportsWithContextReturns = struct {
		result1 *cloudformation.ListImportsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListImportsWithContextReturnsOnCall(i int, result1 *cloudformation.ListImportsOutput, result2 error) {
	fake.ListImportsWithContextStub = nil
	if fake.listImportsWithContextReturnsOnCall == nil {
		fake.listImportsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.ListImportsOutput
			result2 error
		})
	}
	fake.listImportsWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.ListImportsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListImportsRequest(arg1 *cloudformation.ListImportsInput) (*request.Request, *cloudformation.ListImportsOutput) {
	fake.listImportsRequestMutex.Lock()
	ret, specificReturn := fake.listImportsRequestReturnsOnCall[len(fake.listImportsRequestArgsForCall)]
	fake.listImportsRequestArgsForCall = append(fake.listImportsRequestArgsForCall, struct {
		arg1 *cloudformation.ListImportsInput
	}{arg1})
	fake.recordInvocation("ListImportsRequest", []interface{}{arg1})
	fake.listImportsRequestMutex.Unlock()
	if fake.ListImportsRequestStub != nil {
		return fake.ListImportsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listImportsRequestReturns.result1, fake.listImportsRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) ListImportsRequestCallCount() int {
	fake.listImportsRequestMutex.RLock()
	defer fake.listImportsRequestMutex.RUnlock()
	return len(fake.listImportsRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListImportsRequestArgsForCall(i int) *cloudformation.ListImportsInput {
	fake.listImportsRequestMutex.RLock()
	defer fake.listImportsRequestMutex.RUnlock()
	return fake.listImportsRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) ListImportsRequestReturns(result1 *request.Request, result2 *cloudformation.ListImportsOutput) {
	fake.ListImportsRequestStub = nil
	fake.listImportsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.ListImportsOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListImportsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.ListImportsOutput) {
	fake.ListImportsRequestStub = nil
	if fake.listImportsRequestReturnsOnCall == nil {
		fake.listImportsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.ListImportsOutput
		})
	}
	fake.listImportsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.ListImportsOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListImportsPages(arg1 *cloudformation.ListImportsInput, arg2 func(*cloudformation.ListImportsOutput, bool) bool) error {
	fake.listImportsPagesMutex.Lock()
	ret, specificReturn := fake.listImportsPagesReturnsOnCall[len(fake.listImportsPagesArgsForCall)]
	fake.listImportsPagesArgsForCall = append(fake.listImportsPagesArgsForCall, struct {
		arg1 *cloudformation.ListImportsInput
		arg2 func(*cloudformation.ListImportsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListImportsPages", []interface{}{arg1, arg2})
	fake.listImportsPagesMutex.Unlock()
	if fake.ListImportsPagesStub != nil {
		return fake.ListImportsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.listImportsPagesReturns.result1
}

func (fake *FakeCloudFormationAPI) ListImportsPagesCallCount() int {
	fake.listImportsPagesMutex.RLock()
	defer fake.listImportsPagesMutex.RUnlock()
	return len(fake.listImportsPagesArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListImportsPagesArgsForCall(i int) (*cloudformation.ListImportsInput, func(*cloudformation.ListImportsOutput, bool) bool) {
	fake.listImportsPagesMutex.RLock()
	defer fake.listImportsPagesMutex.RUnlock()
	return fake.listImportsPagesArgsForCall[i].arg1, fake.listImportsPagesArgsForCall[i].arg2
}

func (fake *FakeCloudFormationAPI) ListImportsPagesReturns(result1 error) {
	fake.ListImportsPagesStub = nil
	fake.listImportsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) ListImportsPagesReturnsOnCall(i int, result1 error) {
	fake.ListImportsPagesStub = nil
	if fake.listImportsPagesReturnsOnCall == nil {
		fake.listImportsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listImportsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) ListImportsPagesWithContext(arg1 aws.Context, arg2 *cloudformation.ListImportsInput, arg3 func(*cloudformation.ListImportsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listImportsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listImportsPagesWithContextReturnsOnCall[len(fake.listImportsPagesWithContextArgsForCall)]
	fake.listImportsPagesWithContextArgsForCall = append(fake.listImportsPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.ListImportsInput
		arg3 func(*cloudformation.ListImportsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListImportsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listImportsPagesWithContextMutex.Unlock()
	if fake.ListImportsPagesWithContextStub != nil {
		return fake.ListImportsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.listImportsPagesWithContextReturns.result1
}

func (fake *FakeCloudFormationAPI) ListImportsPagesWithContextCallCount() int {
	fake.listImportsPagesWithContextMutex.RLock()
	defer fake.listImportsPagesWithContextMutex.RUnlock()
	return len(fake.listImportsPagesWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListImportsPagesWithContextArgsForCall(i int) (aws.Context, *cloudformation.ListImportsInput, func(*cloudformation.ListImportsOutput, bool) bool, []request.Option) {
	fake.listImportsPagesWithContextMutex.RLock()
	defer fake.listImportsPagesWithContextMutex.RUnlock()
	return fake.listImportsPagesWithContextArgsForCall[i].arg1, fake.listImportsPagesWithContextArgsForCall[i].arg2, fake.listImportsPagesWithContextArgsForCall[i].arg3, fake.listImportsPagesWithContextArgsForCall[i].arg4
}

func (fake *FakeCloudFormationAPI) ListImportsPagesWithContextReturns(result1 error) {
	fake.ListImportsPagesWithContextStub = nil
	fake.listImportsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) ListImportsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.ListImportsPagesWithContextStub = nil
	if fake.listImportsPagesWithContextReturnsOnCall == nil {
		fake.listImportsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listImportsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) ListStackInstances(arg1 *cloudformation.ListStackInstancesInput) (*cloudformation.ListStackInstancesOutput, error) {
	fake.listStackInstancesMutex.Lock()
	ret, specificReturn := fake.listStackInstancesReturnsOnCall[len(fake.listStackInstancesArgsForCall)]
	fake.listStackInstancesArgsForCall = append(fake.listStackInstancesArgsForCall, struct {
		arg1 *cloudformation.ListStackInstancesInput
	}{arg1})
	fake.recordInvocation("ListStackInstances", []interface{}{arg1})
	fake.listStackInstancesMutex.Unlock()
	if fake.ListStackInstancesStub != nil {
		return fake.ListStackInstancesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listStackInstancesReturns.result1, fake.listStackInstancesReturns.result2
}

func (fake *FakeCloudFormationAPI) ListStackInstancesCallCount() int {
	fake.listStackInstancesMutex.RLock()
	defer fake.listStackInstancesMutex.RUnlock()
	return len(fake.listStackInstancesArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListStackInstancesArgsForCall(i int) *cloudformation.ListStackInstancesInput {
	fake.listStackInstancesMutex.RLock()
	defer fake.listStackInstancesMutex.RUnlock()
	return fake.listStackInstancesArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) ListStackInstancesReturns(result1 *cloudformation.ListStackInstancesOutput, result2 error) {
	fake.ListStackInstancesStub = nil
	fake.listStackInstancesReturns = struct {
		result1 *cloudformation.ListStackInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStackInstancesReturnsOnCall(i int, result1 *cloudformation.ListStackInstancesOutput, result2 error) {
	fake.ListStackInstancesStub = nil
	if fake.listStackInstancesReturnsOnCall == nil {
		fake.listStackInstancesReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.ListStackInstancesOutput
			result2 error
		})
	}
	fake.listStackInstancesReturnsOnCall[i] = struct {
		result1 *cloudformation.ListStackInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStackInstancesWithContext(arg1 aws.Context, arg2 *cloudformation.ListStackInstancesInput, arg3 ...request.Option) (*cloudformation.ListStackInstancesOutput, error) {
	fake.listStackInstancesWithContextMutex.Lock()
	ret, specificReturn := fake.listStackInstancesWithContextReturnsOnCall[len(fake.listStackInstancesWithContextArgsForCall)]
	fake.listStackInstancesWithContextArgsForCall = append(fake.listStackInstancesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.ListStackInstancesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListStackInstancesWithContext", []interface{}{arg1, arg2, arg3})
	fake.listStackInstancesWithContextMutex.Unlock()
	if fake.ListStackInstancesWithContextStub != nil {
		return fake.ListStackInstancesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listStackInstancesWithContextReturns.result1, fake.listStackInstancesWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) ListStackInstancesWithContextCallCount() int {
	fake.listStackInstancesWithContextMutex.RLock()
	defer fake.listStackInstancesWithContextMutex.RUnlock()
	return len(fake.listStackInstancesWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListStackInstancesWithContextArgsForCall(i int) (aws.Context, *cloudformation.ListStackInstancesInput, []request.Option) {
	fake.listStackInstancesWithContextMutex.RLock()
	defer fake.listStackInstancesWithContextMutex.RUnlock()
	return fake.listStackInstancesWithContextArgsForCall[i].arg1, fake.listStackInstancesWithContextArgsForCall[i].arg2, fake.listStackInstancesWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) ListStackInstancesWithContextReturns(result1 *cloudformation.ListStackInstancesOutput, result2 error) {
	fake.ListStackInstancesWithContextStub = nil
	fake.listStackInstancesWithContextReturns = struct {
		result1 *cloudformation.ListStackInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStackInstancesWithContextReturnsOnCall(i int, result1 *cloudformation.ListStackInstancesOutput, result2 error) {
	fake.ListStackInstancesWithContextStub = nil
	if fake.listStackInstancesWithContextReturnsOnCall == nil {
		fake.listStackInstancesWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.ListStackInstancesOutput
			result2 error
		})
	}
	fake.listStackInstancesWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.ListStackInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStackInstancesRequest(arg1 *cloudformation.ListStackInstancesInput) (*request.Request, *cloudformation.ListStackInstancesOutput) {
	fake.listStackInstancesRequestMutex.Lock()
	ret, specificReturn := fake.listStackInstancesRequestReturnsOnCall[len(fake.listStackInstancesRequestArgsForCall)]
	fake.listStackInstancesRequestArgsForCall = append(fake.listStackInstancesRequestArgsForCall, struct {
		arg1 *cloudformation.ListStackInstancesInput
	}{arg1})
	fake.recordInvocation("ListStackInstancesRequest", []interface{}{arg1})
	fake.listStackInstancesRequestMutex.Unlock()
	if fake.ListStackInstancesRequestStub != nil {
		return fake.ListStackInstancesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listStackInstancesRequestReturns.result1, fake.listStackInstancesRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) ListStackInstancesRequestCallCount() int {
	fake.listStackInstancesRequestMutex.RLock()
	defer fake.listStackInstancesRequestMutex.RUnlock()
	return len(fake.listStackInstancesRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListStackInstancesRequestArgsForCall(i int) *cloudformation.ListStackInstancesInput {
	fake.listStackInstancesRequestMutex.RLock()
	defer fake.listStackInstancesRequestMutex.RUnlock()
	return fake.listStackInstancesRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) ListStackInstancesRequestReturns(result1 *request.Request, result2 *cloudformation.ListStackInstancesOutput) {
	fake.ListStackInstancesRequestStub = nil
	fake.listStackInstancesRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.ListStackInstancesOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStackInstancesRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.ListStackInstancesOutput) {
	fake.ListStackInstancesRequestStub = nil
	if fake.listStackInstancesRequestReturnsOnCall == nil {
		fake.listStackInstancesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.ListStackInstancesOutput
		})
	}
	fake.listStackInstancesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.ListStackInstancesOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStackResources(arg1 *cloudformation.ListStackResourcesInput) (*cloudformation.ListStackResourcesOutput, error) {
	fake.listStackResourcesMutex.Lock()
	ret, specificReturn := fake.listStackResourcesReturnsOnCall[len(fake.listStackResourcesArgsForCall)]
	fake.listStackResourcesArgsForCall = append(fake.listStackResourcesArgsForCall, struct {
		arg1 *cloudformation.ListStackResourcesInput
	}{arg1})
	fake.recordInvocation("ListStackResources", []interface{}{arg1})
	fake.listStackResourcesMutex.Unlock()
	if fake.ListStackResourcesStub != nil {
		return fake.ListStackResourcesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listStackResourcesReturns.result1, fake.listStackResourcesReturns.result2
}

func (fake *FakeCloudFormationAPI) ListStackResourcesCallCount() int {
	fake.listStackResourcesMutex.RLock()
	defer fake.listStackResourcesMutex.RUnlock()
	return len(fake.listStackResourcesArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListStackResourcesArgsForCall(i int) *cloudformation.ListStackResourcesInput {
	fake.listStackResourcesMutex.RLock()
	defer fake.listStackResourcesMutex.RUnlock()
	return fake.listStackResourcesArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) ListStackResourcesReturns(result1 *cloudformation.ListStackResourcesOutput, result2 error) {
	fake.ListStackResourcesStub = nil
	fake.listStackResourcesReturns = struct {
		result1 *cloudformation.ListStackResourcesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStackResourcesReturnsOnCall(i int, result1 *cloudformation.ListStackResourcesOutput, result2 error) {
	fake.ListStackResourcesStub = nil
	if fake.listStackResourcesReturnsOnCall == nil {
		fake.listStackResourcesReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.ListStackResourcesOutput
			result2 error
		})
	}
	fake.listStackResourcesReturnsOnCall[i] = struct {
		result1 *cloudformation.ListStackResourcesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStackResourcesWithContext(arg1 aws.Context, arg2 *cloudformation.ListStackResourcesInput, arg3 ...request.Option) (*cloudformation.ListStackResourcesOutput, error) {
	fake.listStackResourcesWithContextMutex.Lock()
	ret, specificReturn := fake.listStackResourcesWithContextReturnsOnCall[len(fake.listStackResourcesWithContextArgsForCall)]
	fake.listStackResourcesWithContextArgsForCall = append(fake.listStackResourcesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.ListStackResourcesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListStackResourcesWithContext", []interface{}{arg1, arg2, arg3})
	fake.listStackResourcesWithContextMutex.Unlock()
	if fake.ListStackResourcesWithContextStub != nil {
		return fake.ListStackResourcesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listStackResourcesWithContextReturns.result1, fake.listStackResourcesWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) ListStackResourcesWithContextCallCount() int {
	fake.listStackResourcesWithContextMutex.RLock()
	defer fake.listStackResourcesWithContextMutex.RUnlock()
	return len(fake.listStackResourcesWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListStackResourcesWithContextArgsForCall(i int) (aws.Context, *cloudformation.ListStackResourcesInput, []request.Option) {
	fake.listStackResourcesWithContextMutex.RLock()
	defer fake.listStackResourcesWithContextMutex.RUnlock()
	return fake.listStackResourcesWithContextArgsForCall[i].arg1, fake.listStackResourcesWithContextArgsForCall[i].arg2, fake.listStackResourcesWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) ListStackResourcesWithContextReturns(result1 *cloudformation.ListStackResourcesOutput, result2 error) {
	fake.ListStackResourcesWithContextStub = nil
	fake.listStackResourcesWithContextReturns = struct {
		result1 *cloudformation.ListStackResourcesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStackResourcesWithContextReturnsOnCall(i int, result1 *cloudformation.ListStackResourcesOutput, result2 error) {
	fake.ListStackResourcesWithContextStub = nil
	if fake.listStackResourcesWithContextReturnsOnCall == nil {
		fake.listStackResourcesWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.ListStackResourcesOutput
			result2 error
		})
	}
	fake.listStackResourcesWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.ListStackResourcesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStackResourcesRequest(arg1 *cloudformation.ListStackResourcesInput) (*request.Request, *cloudformation.ListStackResourcesOutput) {
	fake.listStackResourcesRequestMutex.Lock()
	ret, specificReturn := fake.listStackResourcesRequestReturnsOnCall[len(fake.listStackResourcesRequestArgsForCall)]
	fake.listStackResourcesRequestArgsForCall = append(fake.listStackResourcesRequestArgsForCall, struct {
		arg1 *cloudformation.ListStackResourcesInput
	}{arg1})
	fake.recordInvocation("ListStackResourcesRequest", []interface{}{arg1})
	fake.listStackResourcesRequestMutex.Unlock()
	if fake.ListStackResourcesRequestStub != nil {
		return fake.ListStackResourcesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listStackResourcesRequestReturns.result1, fake.listStackResourcesRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) ListStackResourcesRequestCallCount() int {
	fake.listStackResourcesRequestMutex.RLock()
	defer fake.listStackResourcesRequestMutex.RUnlock()
	return len(fake.listStackResourcesRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListStackResourcesRequestArgsForCall(i int) *cloudformation.ListStackResourcesInput {
	fake.listStackResourcesRequestMutex.RLock()
	defer fake.listStackResourcesRequestMutex.RUnlock()
	return fake.listStackResourcesRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) ListStackResourcesRequestReturns(result1 *request.Request, result2 *cloudformation.ListStackResourcesOutput) {
	fake.ListStackResourcesRequestStub = nil
	fake.listStackResourcesRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.ListStackResourcesOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStackResourcesRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.ListStackResourcesOutput) {
	fake.ListStackResourcesRequestStub = nil
	if fake.listStackResourcesRequestReturnsOnCall == nil {
		fake.listStackResourcesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.ListStackResourcesOutput
		})
	}
	fake.listStackResourcesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.ListStackResourcesOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStackResourcesPages(arg1 *cloudformation.ListStackResourcesInput, arg2 func(*cloudformation.ListStackResourcesOutput, bool) bool) error {
	fake.listStackResourcesPagesMutex.Lock()
	ret, specificReturn := fake.listStackResourcesPagesReturnsOnCall[len(fake.listStackResourcesPagesArgsForCall)]
	fake.listStackResourcesPagesArgsForCall = append(fake.listStackResourcesPagesArgsForCall, struct {
		arg1 *cloudformation.ListStackResourcesInput
		arg2 func(*cloudformation.ListStackResourcesOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListStackResourcesPages", []interface{}{arg1, arg2})
	fake.listStackResourcesPagesMutex.Unlock()
	if fake.ListStackResourcesPagesStub != nil {
		return fake.ListStackResourcesPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.listStackResourcesPagesReturns.result1
}

func (fake *FakeCloudFormationAPI) ListStackResourcesPagesCallCount() int {
	fake.listStackResourcesPagesMutex.RLock()
	defer fake.listStackResourcesPagesMutex.RUnlock()
	return len(fake.listStackResourcesPagesArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListStackResourcesPagesArgsForCall(i int) (*cloudformation.ListStackResourcesInput, func(*cloudformation.ListStackResourcesOutput, bool) bool) {
	fake.listStackResourcesPagesMutex.RLock()
	defer fake.listStackResourcesPagesMutex.RUnlock()
	return fake.listStackResourcesPagesArgsForCall[i].arg1, fake.listStackResourcesPagesArgsForCall[i].arg2
}

func (fake *FakeCloudFormationAPI) ListStackResourcesPagesReturns(result1 error) {
	fake.ListStackResourcesPagesStub = nil
	fake.listStackResourcesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) ListStackResourcesPagesReturnsOnCall(i int, result1 error) {
	fake.ListStackResourcesPagesStub = nil
	if fake.listStackResourcesPagesReturnsOnCall == nil {
		fake.listStackResourcesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listStackResourcesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) ListStackResourcesPagesWithContext(arg1 aws.Context, arg2 *cloudformation.ListStackResourcesInput, arg3 func(*cloudformation.ListStackResourcesOutput, bool) bool, arg4 ...request.Option) error {
	fake.listStackResourcesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listStackResourcesPagesWithContextReturnsOnCall[len(fake.listStackResourcesPagesWithContextArgsForCall)]
	fake.listStackResourcesPagesWithContextArgsForCall = append(fake.listStackResourcesPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.ListStackResourcesInput
		arg3 func(*cloudformation.ListStackResourcesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListStackResourcesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listStackResourcesPagesWithContextMutex.Unlock()
	if fake.ListStackResourcesPagesWithContextStub != nil {
		return fake.ListStackResourcesPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.listStackResourcesPagesWithContextReturns.result1
}

func (fake *FakeCloudFormationAPI) ListStackResourcesPagesWithContextCallCount() int {
	fake.listStackResourcesPagesWithContextMutex.RLock()
	defer fake.listStackResourcesPagesWithContextMutex.RUnlock()
	return len(fake.listStackResourcesPagesWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListStackResourcesPagesWithContextArgsForCall(i int) (aws.Context, *cloudformation.ListStackResourcesInput, func(*cloudformation.ListStackResourcesOutput, bool) bool, []request.Option) {
	fake.listStackResourcesPagesWithContextMutex.RLock()
	defer fake.listStackResourcesPagesWithContextMutex.RUnlock()
	return fake.listStackResourcesPagesWithContextArgsForCall[i].arg1, fake.listStackResourcesPagesWithContextArgsForCall[i].arg2, fake.listStackResourcesPagesWithContextArgsForCall[i].arg3, fake.listStackResourcesPagesWithContextArgsForCall[i].arg4
}

func (fake *FakeCloudFormationAPI) ListStackResourcesPagesWithContextReturns(result1 error) {
	fake.ListStackResourcesPagesWithContextStub = nil
	fake.listStackResourcesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) ListStackResourcesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.ListStackResourcesPagesWithContextStub = nil
	if fake.listStackResourcesPagesWithContextReturnsOnCall == nil {
		fake.listStackResourcesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listStackResourcesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) ListStackSetOperationResults(arg1 *cloudformation.ListStackSetOperationResultsInput) (*cloudformation.ListStackSetOperationResultsOutput, error) {
	fake.listStackSetOperationResultsMutex.Lock()
	ret, specificReturn := fake.listStackSetOperationResultsReturnsOnCall[len(fake.listStackSetOperationResultsArgsForCall)]
	fake.listStackSetOperationResultsArgsForCall = append(fake.listStackSetOperationResultsArgsForCall, struct {
		arg1 *cloudformation.ListStackSetOperationResultsInput
	}{arg1})
	fake.recordInvocation("ListStackSetOperationResults", []interface{}{arg1})
	fake.listStackSetOperationResultsMutex.Unlock()
	if fake.ListStackSetOperationResultsStub != nil {
		return fake.ListStackSetOperationResultsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listStackSetOperationResultsReturns.result1, fake.listStackSetOperationResultsReturns.result2
}

func (fake *FakeCloudFormationAPI) ListStackSetOperationResultsCallCount() int {
	fake.listStackSetOperationResultsMutex.RLock()
	defer fake.listStackSetOperationResultsMutex.RUnlock()
	return len(fake.listStackSetOperationResultsArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListStackSetOperationResultsArgsForCall(i int) *cloudformation.ListStackSetOperationResultsInput {
	fake.listStackSetOperationResultsMutex.RLock()
	defer fake.listStackSetOperationResultsMutex.RUnlock()
	return fake.listStackSetOperationResultsArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) ListStackSetOperationResultsReturns(result1 *cloudformation.ListStackSetOperationResultsOutput, result2 error) {
	fake.ListStackSetOperationResultsStub = nil
	fake.listStackSetOperationResultsReturns = struct {
		result1 *cloudformation.ListStackSetOperationResultsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStackSetOperationResultsReturnsOnCall(i int, result1 *cloudformation.ListStackSetOperationResultsOutput, result2 error) {
	fake.ListStackSetOperationResultsStub = nil
	if fake.listStackSetOperationResultsReturnsOnCall == nil {
		fake.listStackSetOperationResultsReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.ListStackSetOperationResultsOutput
			result2 error
		})
	}
	fake.listStackSetOperationResultsReturnsOnCall[i] = struct {
		result1 *cloudformation.ListStackSetOperationResultsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStackSetOperationResultsWithContext(arg1 aws.Context, arg2 *cloudformation.ListStackSetOperationResultsInput, arg3 ...request.Option) (*cloudformation.ListStackSetOperationResultsOutput, error) {
	fake.listStackSetOperationResultsWithContextMutex.Lock()
	ret, specificReturn := fake.listStackSetOperationResultsWithContextReturnsOnCall[len(fake.listStackSetOperationResultsWithContextArgsForCall)]
	fake.listStackSetOperationResultsWithContextArgsForCall = append(fake.listStackSetOperationResultsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.ListStackSetOperationResultsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListStackSetOperationResultsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listStackSetOperationResultsWithContextMutex.Unlock()
	if fake.ListStackSetOperationResultsWithContextStub != nil {
		return fake.ListStackSetOperationResultsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listStackSetOperationResultsWithContextReturns.result1, fake.listStackSetOperationResultsWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) ListStackSetOperationResultsWithContextCallCount() int {
	fake.listStackSetOperationResultsWithContextMutex.RLock()
	defer fake.listStackSetOperationResultsWithContextMutex.RUnlock()
	return len(fake.listStackSetOperationResultsWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListStackSetOperationResultsWithContextArgsForCall(i int) (aws.Context, *cloudformation.ListStackSetOperationResultsInput, []request.Option) {
	fake.listStackSetOperationResultsWithContextMutex.RLock()
	defer fake.listStackSetOperationResultsWithContextMutex.RUnlock()
	return fake.listStackSetOperationResultsWithContextArgsForCall[i].arg1, fake.listStackSetOperationResultsWithContextArgsForCall[i].arg2, fake.listStackSetOperationResultsWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) ListStackSetOperationResultsWithContextReturns(result1 *cloudformation.ListStackSetOperationResultsOutput, result2 error) {
	fake.ListStackSetOperationResultsWithContextStub = nil
	fake.listStackSetOperationResultsWithContextReturns = struct {
		result1 *cloudformation.ListStackSetOperationResultsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStackSetOperationResultsWithContextReturnsOnCall(i int, result1 *cloudformation.ListStackSetOperationResultsOutput, result2 error) {
	fake.ListStackSetOperationResultsWithContextStub = nil
	if fake.listStackSetOperationResultsWithContextReturnsOnCall == nil {
		fake.listStackSetOperationResultsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.ListStackSetOperationResultsOutput
			result2 error
		})
	}
	fake.listStackSetOperationResultsWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.ListStackSetOperationResultsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStackSetOperationResultsRequest(arg1 *cloudformation.ListStackSetOperationResultsInput) (*request.Request, *cloudformation.ListStackSetOperationResultsOutput) {
	fake.listStackSetOperationResultsRequestMutex.Lock()
	ret, specificReturn := fake.listStackSetOperationResultsRequestReturnsOnCall[len(fake.listStackSetOperationResultsRequestArgsForCall)]
	fake.listStackSetOperationResultsRequestArgsForCall = append(fake.listStackSetOperationResultsRequestArgsForCall, struct {
		arg1 *cloudformation.ListStackSetOperationResultsInput
	}{arg1})
	fake.recordInvocation("ListStackSetOperationResultsRequest", []interface{}{arg1})
	fake.listStackSetOperationResultsRequestMutex.Unlock()
	if fake.ListStackSetOperationResultsRequestStub != nil {
		return fake.ListStackSetOperationResultsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listStackSetOperationResultsRequestReturns.result1, fake.listStackSetOperationResultsRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) ListStackSetOperationResultsRequestCallCount() int {
	fake.listStackSetOperationResultsRequestMutex.RLock()
	defer fake.listStackSetOperationResultsRequestMutex.RUnlock()
	return len(fake.listStackSetOperationResultsRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListStackSetOperationResultsRequestArgsForCall(i int) *cloudformation.ListStackSetOperationResultsInput {
	fake.listStackSetOperationResultsRequestMutex.RLock()
	defer fake.listStackSetOperationResultsRequestMutex.RUnlock()
	return fake.listStackSetOperationResultsRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) ListStackSetOperationResultsRequestReturns(result1 *request.Request, result2 *cloudformation.ListStackSetOperationResultsOutput) {
	fake.ListStackSetOperationResultsRequestStub = nil
	fake.listStackSetOperationResultsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.ListStackSetOperationResultsOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStackSetOperationResultsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.ListStackSetOperationResultsOutput) {
	fake.ListStackSetOperationResultsRequestStub = nil
	if fake.listStackSetOperationResultsRequestReturnsOnCall == nil {
		fake.listStackSetOperationResultsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.ListStackSetOperationResultsOutput
		})
	}
	fake.listStackSetOperationResultsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.ListStackSetOperationResultsOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStackSetOperations(arg1 *cloudformation.ListStackSetOperationsInput) (*cloudformation.ListStackSetOperationsOutput, error) {
	fake.listStackSetOperationsMutex.Lock()
	ret, specificReturn := fake.listStackSetOperationsReturnsOnCall[len(fake.listStackSetOperationsArgsForCall)]
	fake.listStackSetOperationsArgsForCall = append(fake.listStackSetOperationsArgsForCall, struct {
		arg1 *cloudformation.ListStackSetOperationsInput
	}{arg1})
	fake.recordInvocation("ListStackSetOperations", []interface{}{arg1})
	fake.listStackSetOperationsMutex.Unlock()
	if fake.ListStackSetOperationsStub != nil {
		return fake.ListStackSetOperationsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listStackSetOperationsReturns.result1, fake.listStackSetOperationsReturns.result2
}

func (fake *FakeCloudFormationAPI) ListStackSetOperationsCallCount() int {
	fake.listStackSetOperationsMutex.RLock()
	defer fake.listStackSetOperationsMutex.RUnlock()
	return len(fake.listStackSetOperationsArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListStackSetOperationsArgsForCall(i int) *cloudformation.ListStackSetOperationsInput {
	fake.listStackSetOperationsMutex.RLock()
	defer fake.listStackSetOperationsMutex.RUnlock()
	return fake.listStackSetOperationsArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) ListStackSetOperationsReturns(result1 *cloudformation.ListStackSetOperationsOutput, result2 error) {
	fake.ListStackSetOperationsStub = nil
	fake.listStackSetOperationsReturns = struct {
		result1 *cloudformation.ListStackSetOperationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStackSetOperationsReturnsOnCall(i int, result1 *cloudformation.ListStackSetOperationsOutput, result2 error) {
	fake.ListStackSetOperationsStub = nil
	if fake.listStackSetOperationsReturnsOnCall == nil {
		fake.listStackSetOperationsReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.ListStackSetOperationsOutput
			result2 error
		})
	}
	fake.listStackSetOperationsReturnsOnCall[i] = struct {
		result1 *cloudformation.ListStackSetOperationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStackSetOperationsWithContext(arg1 aws.Context, arg2 *cloudformation.ListStackSetOperationsInput, arg3 ...request.Option) (*cloudformation.ListStackSetOperationsOutput, error) {
	fake.listStackSetOperationsWithContextMutex.Lock()
	ret, specificReturn := fake.listStackSetOperationsWithContextReturnsOnCall[len(fake.listStackSetOperationsWithContextArgsForCall)]
	fake.listStackSetOperationsWithContextArgsForCall = append(fake.listStackSetOperationsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.ListStackSetOperationsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListStackSetOperationsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listStackSetOperationsWithContextMutex.Unlock()
	if fake.ListStackSetOperationsWithContextStub != nil {
		return fake.ListStackSetOperationsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listStackSetOperationsWithContextReturns.result1, fake.listStackSetOperationsWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) ListStackSetOperationsWithContextCallCount() int {
	fake.listStackSetOperationsWithContextMutex.RLock()
	defer fake.listStackSetOperationsWithContextMutex.RUnlock()
	return len(fake.listStackSetOperationsWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListStackSetOperationsWithContextArgsForCall(i int) (aws.Context, *cloudformation.ListStackSetOperationsInput, []request.Option) {
	fake.listStackSetOperationsWithContextMutex.RLock()
	defer fake.listStackSetOperationsWithContextMutex.RUnlock()
	return fake.listStackSetOperationsWithContextArgsForCall[i].arg1, fake.listStackSetOperationsWithContextArgsForCall[i].arg2, fake.listStackSetOperationsWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) ListStackSetOperationsWithContextReturns(result1 *cloudformation.ListStackSetOperationsOutput, result2 error) {
	fake.ListStackSetOperationsWithContextStub = nil
	fake.listStackSetOperationsWithContextReturns = struct {
		result1 *cloudformation.ListStackSetOperationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStackSetOperationsWithContextReturnsOnCall(i int, result1 *cloudformation.ListStackSetOperationsOutput, result2 error) {
	fake.ListStackSetOperationsWithContextStub = nil
	if fake.listStackSetOperationsWithContextReturnsOnCall == nil {
		fake.listStackSetOperationsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.ListStackSetOperationsOutput
			result2 error
		})
	}
	fake.listStackSetOperationsWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.ListStackSetOperationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStackSetOperationsRequest(arg1 *cloudformation.ListStackSetOperationsInput) (*request.Request, *cloudformation.ListStackSetOperationsOutput) {
	fake.listStackSetOperationsRequestMutex.Lock()
	ret, specificReturn := fake.listStackSetOperationsRequestReturnsOnCall[len(fake.listStackSetOperationsRequestArgsForCall)]
	fake.listStackSetOperationsRequestArgsForCall = append(fake.listStackSetOperationsRequestArgsForCall, struct {
		arg1 *cloudformation.ListStackSetOperationsInput
	}{arg1})
	fake.recordInvocation("ListStackSetOperationsRequest", []interface{}{arg1})
	fake.listStackSetOperationsRequestMutex.Unlock()
	if fake.ListStackSetOperationsRequestStub != nil {
		return fake.ListStackSetOperationsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listStackSetOperationsRequestReturns.result1, fake.listStackSetOperationsRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) ListStackSetOperationsRequestCallCount() int {
	fake.listStackSetOperationsRequestMutex.RLock()
	defer fake.listStackSetOperationsRequestMutex.RUnlock()
	return len(fake.listStackSetOperationsRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListStackSetOperationsRequestArgsForCall(i int) *cloudformation.ListStackSetOperationsInput {
	fake.listStackSetOperationsRequestMutex.RLock()
	defer fake.listStackSetOperationsRequestMutex.RUnlock()
	return fake.listStackSetOperationsRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) ListStackSetOperationsRequestReturns(result1 *request.Request, result2 *cloudformation.ListStackSetOperationsOutput) {
	fake.ListStackSetOperationsRequestStub = nil
	fake.listStackSetOperationsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.ListStackSetOperationsOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStackSetOperationsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.ListStackSetOperationsOutput) {
	fake.ListStackSetOperationsRequestStub = nil
	if fake.listStackSetOperationsRequestReturnsOnCall == nil {
		fake.listStackSetOperationsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.ListStackSetOperationsOutput
		})
	}
	fake.listStackSetOperationsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.ListStackSetOperationsOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStackSets(arg1 *cloudformation.ListStackSetsInput) (*cloudformation.ListStackSetsOutput, error) {
	fake.listStackSetsMutex.Lock()
	ret, specificReturn := fake.listStackSetsReturnsOnCall[len(fake.listStackSetsArgsForCall)]
	fake.listStackSetsArgsForCall = append(fake.listStackSetsArgsForCall, struct {
		arg1 *cloudformation.ListStackSetsInput
	}{arg1})
	fake.recordInvocation("ListStackSets", []interface{}{arg1})
	fake.listStackSetsMutex.Unlock()
	if fake.ListStackSetsStub != nil {
		return fake.ListStackSetsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listStackSetsReturns.result1, fake.listStackSetsReturns.result2
}

func (fake *FakeCloudFormationAPI) ListStackSetsCallCount() int {
	fake.listStackSetsMutex.RLock()
	defer fake.listStackSetsMutex.RUnlock()
	return len(fake.listStackSetsArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListStackSetsArgsForCall(i int) *cloudformation.ListStackSetsInput {
	fake.listStackSetsMutex.RLock()
	defer fake.listStackSetsMutex.RUnlock()
	return fake.listStackSetsArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) ListStackSetsReturns(result1 *cloudformation.ListStackSetsOutput, result2 error) {
	fake.ListStackSetsStub = nil
	fake.listStackSetsReturns = struct {
		result1 *cloudformation.ListStackSetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStackSetsReturnsOnCall(i int, result1 *cloudformation.ListStackSetsOutput, result2 error) {
	fake.ListStackSetsStub = nil
	if fake.listStackSetsReturnsOnCall == nil {
		fake.listStackSetsReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.ListStackSetsOutput
			result2 error
		})
	}
	fake.listStackSetsReturnsOnCall[i] = struct {
		result1 *cloudformation.ListStackSetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStackSetsWithContext(arg1 aws.Context, arg2 *cloudformation.ListStackSetsInput, arg3 ...request.Option) (*cloudformation.ListStackSetsOutput, error) {
	fake.listStackSetsWithContextMutex.Lock()
	ret, specificReturn := fake.listStackSetsWithContextReturnsOnCall[len(fake.listStackSetsWithContextArgsForCall)]
	fake.listStackSetsWithContextArgsForCall = append(fake.listStackSetsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.ListStackSetsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListStackSetsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listStackSetsWithContextMutex.Unlock()
	if fake.ListStackSetsWithContextStub != nil {
		return fake.ListStackSetsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listStackSetsWithContextReturns.result1, fake.listStackSetsWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) ListStackSetsWithContextCallCount() int {
	fake.listStackSetsWithContextMutex.RLock()
	defer fake.listStackSetsWithContextMutex.RUnlock()
	return len(fake.listStackSetsWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListStackSetsWithContextArgsForCall(i int) (aws.Context, *cloudformation.ListStackSetsInput, []request.Option) {
	fake.listStackSetsWithContextMutex.RLock()
	defer fake.listStackSetsWithContextMutex.RUnlock()
	return fake.listStackSetsWithContextArgsForCall[i].arg1, fake.listStackSetsWithContextArgsForCall[i].arg2, fake.listStackSetsWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) ListStackSetsWithContextReturns(result1 *cloudformation.ListStackSetsOutput, result2 error) {
	fake.ListStackSetsWithContextStub = nil
	fake.listStackSetsWithContextReturns = struct {
		result1 *cloudformation.ListStackSetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStackSetsWithContextReturnsOnCall(i int, result1 *cloudformation.ListStackSetsOutput, result2 error) {
	fake.ListStackSetsWithContextStub = nil
	if fake.listStackSetsWithContextReturnsOnCall == nil {
		fake.listStackSetsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.ListStackSetsOutput
			result2 error
		})
	}
	fake.listStackSetsWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.ListStackSetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStackSetsRequest(arg1 *cloudformation.ListStackSetsInput) (*request.Request, *cloudformation.ListStackSetsOutput) {
	fake.listStackSetsRequestMutex.Lock()
	ret, specificReturn := fake.listStackSetsRequestReturnsOnCall[len(fake.listStackSetsRequestArgsForCall)]
	fake.listStackSetsRequestArgsForCall = append(fake.listStackSetsRequestArgsForCall, struct {
		arg1 *cloudformation.ListStackSetsInput
	}{arg1})
	fake.recordInvocation("ListStackSetsRequest", []interface{}{arg1})
	fake.listStackSetsRequestMutex.Unlock()
	if fake.ListStackSetsRequestStub != nil {
		return fake.ListStackSetsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listStackSetsRequestReturns.result1, fake.listStackSetsRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) ListStackSetsRequestCallCount() int {
	fake.listStackSetsRequestMutex.RLock()
	defer fake.listStackSetsRequestMutex.RUnlock()
	return len(fake.listStackSetsRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListStackSetsRequestArgsForCall(i int) *cloudformation.ListStackSetsInput {
	fake.listStackSetsRequestMutex.RLock()
	defer fake.listStackSetsRequestMutex.RUnlock()
	return fake.listStackSetsRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) ListStackSetsRequestReturns(result1 *request.Request, result2 *cloudformation.ListStackSetsOutput) {
	fake.ListStackSetsRequestStub = nil
	fake.listStackSetsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.ListStackSetsOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStackSetsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.ListStackSetsOutput) {
	fake.ListStackSetsRequestStub = nil
	if fake.listStackSetsRequestReturnsOnCall == nil {
		fake.listStackSetsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.ListStackSetsOutput
		})
	}
	fake.listStackSetsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.ListStackSetsOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStacks(arg1 *cloudformation.ListStacksInput) (*cloudformation.ListStacksOutput, error) {
	fake.listStacksMutex.Lock()
	ret, specificReturn := fake.listStacksReturnsOnCall[len(fake.listStacksArgsForCall)]
	fake.listStacksArgsForCall = append(fake.listStacksArgsForCall, struct {
		arg1 *cloudformation.ListStacksInput
	}{arg1})
	fake.recordInvocation("ListStacks", []interface{}{arg1})
	fake.listStacksMutex.Unlock()
	if fake.ListStacksStub != nil {
		return fake.ListStacksStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listStacksReturns.result1, fake.listStacksReturns.result2
}

func (fake *FakeCloudFormationAPI) ListStacksCallCount() int {
	fake.listStacksMutex.RLock()
	defer fake.listStacksMutex.RUnlock()
	return len(fake.listStacksArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListStacksArgsForCall(i int) *cloudformation.ListStacksInput {
	fake.listStacksMutex.RLock()
	defer fake.listStacksMutex.RUnlock()
	return fake.listStacksArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) ListStacksReturns(result1 *cloudformation.ListStacksOutput, result2 error) {
	fake.ListStacksStub = nil
	fake.listStacksReturns = struct {
		result1 *cloudformation.ListStacksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStacksReturnsOnCall(i int, result1 *cloudformation.ListStacksOutput, result2 error) {
	fake.ListStacksStub = nil
	if fake.listStacksReturnsOnCall == nil {
		fake.listStacksReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.ListStacksOutput
			result2 error
		})
	}
	fake.listStacksReturnsOnCall[i] = struct {
		result1 *cloudformation.ListStacksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStacksWithContext(arg1 aws.Context, arg2 *cloudformation.ListStacksInput, arg3 ...request.Option) (*cloudformation.ListStacksOutput, error) {
	fake.listStacksWithContextMutex.Lock()
	ret, specificReturn := fake.listStacksWithContextReturnsOnCall[len(fake.listStacksWithContextArgsForCall)]
	fake.listStacksWithContextArgsForCall = append(fake.listStacksWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.ListStacksInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListStacksWithContext", []interface{}{arg1, arg2, arg3})
	fake.listStacksWithContextMutex.Unlock()
	if fake.ListStacksWithContextStub != nil {
		return fake.ListStacksWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listStacksWithContextReturns.result1, fake.listStacksWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) ListStacksWithContextCallCount() int {
	fake.listStacksWithContextMutex.RLock()
	defer fake.listStacksWithContextMutex.RUnlock()
	return len(fake.listStacksWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListStacksWithContextArgsForCall(i int) (aws.Context, *cloudformation.ListStacksInput, []request.Option) {
	fake.listStacksWithContextMutex.RLock()
	defer fake.listStacksWithContextMutex.RUnlock()
	return fake.listStacksWithContextArgsForCall[i].arg1, fake.listStacksWithContextArgsForCall[i].arg2, fake.listStacksWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) ListStacksWithContextReturns(result1 *cloudformation.ListStacksOutput, result2 error) {
	fake.ListStacksWithContextStub = nil
	fake.listStacksWithContextReturns = struct {
		result1 *cloudformation.ListStacksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStacksWithContextReturnsOnCall(i int, result1 *cloudformation.ListStacksOutput, result2 error) {
	fake.ListStacksWithContextStub = nil
	if fake.listStacksWithContextReturnsOnCall == nil {
		fake.listStacksWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.ListStacksOutput
			result2 error
		})
	}
	fake.listStacksWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.ListStacksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStacksRequest(arg1 *cloudformation.ListStacksInput) (*request.Request, *cloudformation.ListStacksOutput) {
	fake.listStacksRequestMutex.Lock()
	ret, specificReturn := fake.listStacksRequestReturnsOnCall[len(fake.listStacksRequestArgsForCall)]
	fake.listStacksRequestArgsForCall = append(fake.listStacksRequestArgsForCall, struct {
		arg1 *cloudformation.ListStacksInput
	}{arg1})
	fake.recordInvocation("ListStacksRequest", []interface{}{arg1})
	fake.listStacksRequestMutex.Unlock()
	if fake.ListStacksRequestStub != nil {
		return fake.ListStacksRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listStacksRequestReturns.result1, fake.listStacksRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) ListStacksRequestCallCount() int {
	fake.listStacksRequestMutex.RLock()
	defer fake.listStacksRequestMutex.RUnlock()
	return len(fake.listStacksRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListStacksRequestArgsForCall(i int) *cloudformation.ListStacksInput {
	fake.listStacksRequestMutex.RLock()
	defer fake.listStacksRequestMutex.RUnlock()
	return fake.listStacksRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) ListStacksRequestReturns(result1 *request.Request, result2 *cloudformation.ListStacksOutput) {
	fake.ListStacksRequestStub = nil
	fake.listStacksRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.ListStacksOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStacksRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.ListStacksOutput) {
	fake.ListStacksRequestStub = nil
	if fake.listStacksRequestReturnsOnCall == nil {
		fake.listStacksRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.ListStacksOutput
		})
	}
	fake.listStacksRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.ListStacksOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ListStacksPages(arg1 *cloudformation.ListStacksInput, arg2 func(*cloudformation.ListStacksOutput, bool) bool) error {
	fake.listStacksPagesMutex.Lock()
	ret, specificReturn := fake.listStacksPagesReturnsOnCall[len(fake.listStacksPagesArgsForCall)]
	fake.listStacksPagesArgsForCall = append(fake.listStacksPagesArgsForCall, struct {
		arg1 *cloudformation.ListStacksInput
		arg2 func(*cloudformation.ListStacksOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListStacksPages", []interface{}{arg1, arg2})
	fake.listStacksPagesMutex.Unlock()
	if fake.ListStacksPagesStub != nil {
		return fake.ListStacksPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.listStacksPagesReturns.result1
}

func (fake *FakeCloudFormationAPI) ListStacksPagesCallCount() int {
	fake.listStacksPagesMutex.RLock()
	defer fake.listStacksPagesMutex.RUnlock()
	return len(fake.listStacksPagesArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListStacksPagesArgsForCall(i int) (*cloudformation.ListStacksInput, func(*cloudformation.ListStacksOutput, bool) bool) {
	fake.listStacksPagesMutex.RLock()
	defer fake.listStacksPagesMutex.RUnlock()
	return fake.listStacksPagesArgsForCall[i].arg1, fake.listStacksPagesArgsForCall[i].arg2
}

func (fake *FakeCloudFormationAPI) ListStacksPagesReturns(result1 error) {
	fake.ListStacksPagesStub = nil
	fake.listStacksPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) ListStacksPagesReturnsOnCall(i int, result1 error) {
	fake.ListStacksPagesStub = nil
	if fake.listStacksPagesReturnsOnCall == nil {
		fake.listStacksPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listStacksPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) ListStacksPagesWithContext(arg1 aws.Context, arg2 *cloudformation.ListStacksInput, arg3 func(*cloudformation.ListStacksOutput, bool) bool, arg4 ...request.Option) error {
	fake.listStacksPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listStacksPagesWithContextReturnsOnCall[len(fake.listStacksPagesWithContextArgsForCall)]
	fake.listStacksPagesWithContextArgsForCall = append(fake.listStacksPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.ListStacksInput
		arg3 func(*cloudformation.ListStacksOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListStacksPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listStacksPagesWithContextMutex.Unlock()
	if fake.ListStacksPagesWithContextStub != nil {
		return fake.ListStacksPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.listStacksPagesWithContextReturns.result1
}

func (fake *FakeCloudFormationAPI) ListStacksPagesWithContextCallCount() int {
	fake.listStacksPagesWithContextMutex.RLock()
	defer fake.listStacksPagesWithContextMutex.RUnlock()
	return len(fake.listStacksPagesWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) ListStacksPagesWithContextArgsForCall(i int) (aws.Context, *cloudformation.ListStacksInput, func(*cloudformation.ListStacksOutput, bool) bool, []request.Option) {
	fake.listStacksPagesWithContextMutex.RLock()
	defer fake.listStacksPagesWithContextMutex.RUnlock()
	return fake.listStacksPagesWithContextArgsForCall[i].arg1, fake.listStacksPagesWithContextArgsForCall[i].arg2, fake.listStacksPagesWithContextArgsForCall[i].arg3, fake.listStacksPagesWithContextArgsForCall[i].arg4
}

func (fake *FakeCloudFormationAPI) ListStacksPagesWithContextReturns(result1 error) {
	fake.ListStacksPagesWithContextStub = nil
	fake.listStacksPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) ListStacksPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.ListStacksPagesWithContextStub = nil
	if fake.listStacksPagesWithContextReturnsOnCall == nil {
		fake.listStacksPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listStacksPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) SetStackPolicy(arg1 *cloudformation.SetStackPolicyInput) (*cloudformation.SetStackPolicyOutput, error) {
	fake.setStackPolicyMutex.Lock()
	ret, specificReturn := fake.setStackPolicyReturnsOnCall[len(fake.setStackPolicyArgsForCall)]
	fake.setStackPolicyArgsForCall = append(fake.setStackPolicyArgsForCall, struct {
		arg1 *cloudformation.SetStackPolicyInput
	}{arg1})
	fake.recordInvocation("SetStackPolicy", []interface{}{arg1})
	fake.setStackPolicyMutex.Unlock()
	if fake.SetStackPolicyStub != nil {
		return fake.SetStackPolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.setStackPolicyReturns.result1, fake.setStackPolicyReturns.result2
}

func (fake *FakeCloudFormationAPI) SetStackPolicyCallCount() int {
	fake.setStackPolicyMutex.RLock()
	defer fake.setStackPolicyMutex.RUnlock()
	return len(fake.setStackPolicyArgsForCall)
}

func (fake *FakeCloudFormationAPI) SetStackPolicyArgsForCall(i int) *cloudformation.SetStackPolicyInput {
	fake.setStackPolicyMutex.RLock()
	defer fake.setStackPolicyMutex.RUnlock()
	return fake.setStackPolicyArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) SetStackPolicyReturns(result1 *cloudformation.SetStackPolicyOutput, result2 error) {
	fake.SetStackPolicyStub = nil
	fake.setStackPolicyReturns = struct {
		result1 *cloudformation.SetStackPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) SetStackPolicyReturnsOnCall(i int, result1 *cloudformation.SetStackPolicyOutput, result2 error) {
	fake.SetStackPolicyStub = nil
	if fake.setStackPolicyReturnsOnCall == nil {
		fake.setStackPolicyReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.SetStackPolicyOutput
			result2 error
		})
	}
	fake.setStackPolicyReturnsOnCall[i] = struct {
		result1 *cloudformation.SetStackPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) SetStackPolicyWithContext(arg1 aws.Context, arg2 *cloudformation.SetStackPolicyInput, arg3 ...request.Option) (*cloudformation.SetStackPolicyOutput, error) {
	fake.setStackPolicyWithContextMutex.Lock()
	ret, specificReturn := fake.setStackPolicyWithContextReturnsOnCall[len(fake.setStackPolicyWithContextArgsForCall)]
	fake.setStackPolicyWithContextArgsForCall = append(fake.setStackPolicyWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.SetStackPolicyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("SetStackPolicyWithContext", []interface{}{arg1, arg2, arg3})
	fake.setStackPolicyWithContextMutex.Unlock()
	if fake.SetStackPolicyWithContextStub != nil {
		return fake.SetStackPolicyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.setStackPolicyWithContextReturns.result1, fake.setStackPolicyWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) SetStackPolicyWithContextCallCount() int {
	fake.setStackPolicyWithContextMutex.RLock()
	defer fake.setStackPolicyWithContextMutex.RUnlock()
	return len(fake.setStackPolicyWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) SetStackPolicyWithContextArgsForCall(i int) (aws.Context, *cloudformation.SetStackPolicyInput, []request.Option) {
	fake.setStackPolicyWithContextMutex.RLock()
	defer fake.setStackPolicyWithContextMutex.RUnlock()
	return fake.setStackPolicyWithContextArgsForCall[i].arg1, fake.setStackPolicyWithContextArgsForCall[i].arg2, fake.setStackPolicyWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) SetStackPolicyWithContextReturns(result1 *cloudformation.SetStackPolicyOutput, result2 error) {
	fake.SetStackPolicyWithContextStub = nil
	fake.setStackPolicyWithContextReturns = struct {
		result1 *cloudformation.SetStackPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) SetStackPolicyWithContextReturnsOnCall(i int, result1 *cloudformation.SetStackPolicyOutput, result2 error) {
	fake.SetStackPolicyWithContextStub = nil
	if fake.setStackPolicyWithContextReturnsOnCall == nil {
		fake.setStackPolicyWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.SetStackPolicyOutput
			result2 error
		})
	}
	fake.setStackPolicyWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.SetStackPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) SetStackPolicyRequest(arg1 *cloudformation.SetStackPolicyInput) (*request.Request, *cloudformation.SetStackPolicyOutput) {
	fake.setStackPolicyRequestMutex.Lock()
	ret, specificReturn := fake.setStackPolicyRequestReturnsOnCall[len(fake.setStackPolicyRequestArgsForCall)]
	fake.setStackPolicyRequestArgsForCall = append(fake.setStackPolicyRequestArgsForCall, struct {
		arg1 *cloudformation.SetStackPolicyInput
	}{arg1})
	fake.recordInvocation("SetStackPolicyRequest", []interface{}{arg1})
	fake.setStackPolicyRequestMutex.Unlock()
	if fake.SetStackPolicyRequestStub != nil {
		return fake.SetStackPolicyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.setStackPolicyRequestReturns.result1, fake.setStackPolicyRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) SetStackPolicyRequestCallCount() int {
	fake.setStackPolicyRequestMutex.RLock()
	defer fake.setStackPolicyRequestMutex.RUnlock()
	return len(fake.setStackPolicyRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) SetStackPolicyRequestArgsForCall(i int) *cloudformation.SetStackPolicyInput {
	fake.setStackPolicyRequestMutex.RLock()
	defer fake.setStackPolicyRequestMutex.RUnlock()
	return fake.setStackPolicyRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) SetStackPolicyRequestReturns(result1 *request.Request, result2 *cloudformation.SetStackPolicyOutput) {
	fake.SetStackPolicyRequestStub = nil
	fake.setStackPolicyRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.SetStackPolicyOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) SetStackPolicyRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.SetStackPolicyOutput) {
	fake.SetStackPolicyRequestStub = nil
	if fake.setStackPolicyRequestReturnsOnCall == nil {
		fake.setStackPolicyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.SetStackPolicyOutput
		})
	}
	fake.setStackPolicyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.SetStackPolicyOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) SignalResource(arg1 *cloudformation.SignalResourceInput) (*cloudformation.SignalResourceOutput, error) {
	fake.signalResourceMutex.Lock()
	ret, specificReturn := fake.signalResourceReturnsOnCall[len(fake.signalResourceArgsForCall)]
	fake.signalResourceArgsForCall = append(fake.signalResourceArgsForCall, struct {
		arg1 *cloudformation.SignalResourceInput
	}{arg1})
	fake.recordInvocation("SignalResource", []interface{}{arg1})
	fake.signalResourceMutex.Unlock()
	if fake.SignalResourceStub != nil {
		return fake.SignalResourceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.signalResourceReturns.result1, fake.signalResourceReturns.result2
}

func (fake *FakeCloudFormationAPI) SignalResourceCallCount() int {
	fake.signalResourceMutex.RLock()
	defer fake.signalResourceMutex.RUnlock()
	return len(fake.signalResourceArgsForCall)
}

func (fake *FakeCloudFormationAPI) SignalResourceArgsForCall(i int) *cloudformation.SignalResourceInput {
	fake.signalResourceMutex.RLock()
	defer fake.signalResourceMutex.RUnlock()
	return fake.signalResourceArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) SignalResourceReturns(result1 *cloudformation.SignalResourceOutput, result2 error) {
	fake.SignalResourceStub = nil
	fake.signalResourceReturns = struct {
		result1 *cloudformation.SignalResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) SignalResourceReturnsOnCall(i int, result1 *cloudformation.SignalResourceOutput, result2 error) {
	fake.SignalResourceStub = nil
	if fake.signalResourceReturnsOnCall == nil {
		fake.signalResourceReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.SignalResourceOutput
			result2 error
		})
	}
	fake.signalResourceReturnsOnCall[i] = struct {
		result1 *cloudformation.SignalResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) SignalResourceWithContext(arg1 aws.Context, arg2 *cloudformation.SignalResourceInput, arg3 ...request.Option) (*cloudformation.SignalResourceOutput, error) {
	fake.signalResourceWithContextMutex.Lock()
	ret, specificReturn := fake.signalResourceWithContextReturnsOnCall[len(fake.signalResourceWithContextArgsForCall)]
	fake.signalResourceWithContextArgsForCall = append(fake.signalResourceWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.SignalResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("SignalResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.signalResourceWithContextMutex.Unlock()
	if fake.SignalResourceWithContextStub != nil {
		return fake.SignalResourceWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.signalResourceWithContextReturns.result1, fake.signalResourceWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) SignalResourceWithContextCallCount() int {
	fake.signalResourceWithContextMutex.RLock()
	defer fake.signalResourceWithContextMutex.RUnlock()
	return len(fake.signalResourceWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) SignalResourceWithContextArgsForCall(i int) (aws.Context, *cloudformation.SignalResourceInput, []request.Option) {
	fake.signalResourceWithContextMutex.RLock()
	defer fake.signalResourceWithContextMutex.RUnlock()
	return fake.signalResourceWithContextArgsForCall[i].arg1, fake.signalResourceWithContextArgsForCall[i].arg2, fake.signalResourceWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) SignalResourceWithContextReturns(result1 *cloudformation.SignalResourceOutput, result2 error) {
	fake.SignalResourceWithContextStub = nil
	fake.signalResourceWithContextReturns = struct {
		result1 *cloudformation.SignalResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) SignalResourceWithContextReturnsOnCall(i int, result1 *cloudformation.SignalResourceOutput, result2 error) {
	fake.SignalResourceWithContextStub = nil
	if fake.signalResourceWithContextReturnsOnCall == nil {
		fake.signalResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.SignalResourceOutput
			result2 error
		})
	}
	fake.signalResourceWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.SignalResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) SignalResourceRequest(arg1 *cloudformation.SignalResourceInput) (*request.Request, *cloudformation.SignalResourceOutput) {
	fake.signalResourceRequestMutex.Lock()
	ret, specificReturn := fake.signalResourceRequestReturnsOnCall[len(fake.signalResourceRequestArgsForCall)]
	fake.signalResourceRequestArgsForCall = append(fake.signalResourceRequestArgsForCall, struct {
		arg1 *cloudformation.SignalResourceInput
	}{arg1})
	fake.recordInvocation("SignalResourceRequest", []interface{}{arg1})
	fake.signalResourceRequestMutex.Unlock()
	if fake.SignalResourceRequestStub != nil {
		return fake.SignalResourceRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.signalResourceRequestReturns.result1, fake.signalResourceRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) SignalResourceRequestCallCount() int {
	fake.signalResourceRequestMutex.RLock()
	defer fake.signalResourceRequestMutex.RUnlock()
	return len(fake.signalResourceRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) SignalResourceRequestArgsForCall(i int) *cloudformation.SignalResourceInput {
	fake.signalResourceRequestMutex.RLock()
	defer fake.signalResourceRequestMutex.RUnlock()
	return fake.signalResourceRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) SignalResourceRequestReturns(result1 *request.Request, result2 *cloudformation.SignalResourceOutput) {
	fake.SignalResourceRequestStub = nil
	fake.signalResourceRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.SignalResourceOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) SignalResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.SignalResourceOutput) {
	fake.SignalResourceRequestStub = nil
	if fake.signalResourceRequestReturnsOnCall == nil {
		fake.signalResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.SignalResourceOutput
		})
	}
	fake.signalResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.SignalResourceOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) StopStackSetOperation(arg1 *cloudformation.StopStackSetOperationInput) (*cloudformation.StopStackSetOperationOutput, error) {
	fake.stopStackSetOperationMutex.Lock()
	ret, specificReturn := fake.stopStackSetOperationReturnsOnCall[len(fake.stopStackSetOperationArgsForCall)]
	fake.stopStackSetOperationArgsForCall = append(fake.stopStackSetOperationArgsForCall, struct {
		arg1 *cloudformation.StopStackSetOperationInput
	}{arg1})
	fake.recordInvocation("StopStackSetOperation", []interface{}{arg1})
	fake.stopStackSetOperationMutex.Unlock()
	if fake.StopStackSetOperationStub != nil {
		return fake.StopStackSetOperationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.stopStackSetOperationReturns.result1, fake.stopStackSetOperationReturns.result2
}

func (fake *FakeCloudFormationAPI) StopStackSetOperationCallCount() int {
	fake.stopStackSetOperationMutex.RLock()
	defer fake.stopStackSetOperationMutex.RUnlock()
	return len(fake.stopStackSetOperationArgsForCall)
}

func (fake *FakeCloudFormationAPI) StopStackSetOperationArgsForCall(i int) *cloudformation.StopStackSetOperationInput {
	fake.stopStackSetOperationMutex.RLock()
	defer fake.stopStackSetOperationMutex.RUnlock()
	return fake.stopStackSetOperationArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) StopStackSetOperationReturns(result1 *cloudformation.StopStackSetOperationOutput, result2 error) {
	fake.StopStackSetOperationStub = nil
	fake.stopStackSetOperationReturns = struct {
		result1 *cloudformation.StopStackSetOperationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) StopStackSetOperationReturnsOnCall(i int, result1 *cloudformation.StopStackSetOperationOutput, result2 error) {
	fake.StopStackSetOperationStub = nil
	if fake.stopStackSetOperationReturnsOnCall == nil {
		fake.stopStackSetOperationReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.StopStackSetOperationOutput
			result2 error
		})
	}
	fake.stopStackSetOperationReturnsOnCall[i] = struct {
		result1 *cloudformation.StopStackSetOperationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) StopStackSetOperationWithContext(arg1 aws.Context, arg2 *cloudformation.StopStackSetOperationInput, arg3 ...request.Option) (*cloudformation.StopStackSetOperationOutput, error) {
	fake.stopStackSetOperationWithContextMutex.Lock()
	ret, specificReturn := fake.stopStackSetOperationWithContextReturnsOnCall[len(fake.stopStackSetOperationWithContextArgsForCall)]
	fake.stopStackSetOperationWithContextArgsForCall = append(fake.stopStackSetOperationWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.StopStackSetOperationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("StopStackSetOperationWithContext", []interface{}{arg1, arg2, arg3})
	fake.stopStackSetOperationWithContextMutex.Unlock()
	if fake.StopStackSetOperationWithContextStub != nil {
		return fake.StopStackSetOperationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.stopStackSetOperationWithContextReturns.result1, fake.stopStackSetOperationWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) StopStackSetOperationWithContextCallCount() int {
	fake.stopStackSetOperationWithContextMutex.RLock()
	defer fake.stopStackSetOperationWithContextMutex.RUnlock()
	return len(fake.stopStackSetOperationWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) StopStackSetOperationWithContextArgsForCall(i int) (aws.Context, *cloudformation.StopStackSetOperationInput, []request.Option) {
	fake.stopStackSetOperationWithContextMutex.RLock()
	defer fake.stopStackSetOperationWithContextMutex.RUnlock()
	return fake.stopStackSetOperationWithContextArgsForCall[i].arg1, fake.stopStackSetOperationWithContextArgsForCall[i].arg2, fake.stopStackSetOperationWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) StopStackSetOperationWithContextReturns(result1 *cloudformation.StopStackSetOperationOutput, result2 error) {
	fake.StopStackSetOperationWithContextStub = nil
	fake.stopStackSetOperationWithContextReturns = struct {
		result1 *cloudformation.StopStackSetOperationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) StopStackSetOperationWithContextReturnsOnCall(i int, result1 *cloudformation.StopStackSetOperationOutput, result2 error) {
	fake.StopStackSetOperationWithContextStub = nil
	if fake.stopStackSetOperationWithContextReturnsOnCall == nil {
		fake.stopStackSetOperationWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.StopStackSetOperationOutput
			result2 error
		})
	}
	fake.stopStackSetOperationWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.StopStackSetOperationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) StopStackSetOperationRequest(arg1 *cloudformation.StopStackSetOperationInput) (*request.Request, *cloudformation.StopStackSetOperationOutput) {
	fake.stopStackSetOperationRequestMutex.Lock()
	ret, specificReturn := fake.stopStackSetOperationRequestReturnsOnCall[len(fake.stopStackSetOperationRequestArgsForCall)]
	fake.stopStackSetOperationRequestArgsForCall = append(fake.stopStackSetOperationRequestArgsForCall, struct {
		arg1 *cloudformation.StopStackSetOperationInput
	}{arg1})
	fake.recordInvocation("StopStackSetOperationRequest", []interface{}{arg1})
	fake.stopStackSetOperationRequestMutex.Unlock()
	if fake.StopStackSetOperationRequestStub != nil {
		return fake.StopStackSetOperationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.stopStackSetOperationRequestReturns.result1, fake.stopStackSetOperationRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) StopStackSetOperationRequestCallCount() int {
	fake.stopStackSetOperationRequestMutex.RLock()
	defer fake.stopStackSetOperationRequestMutex.RUnlock()
	return len(fake.stopStackSetOperationRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) StopStackSetOperationRequestArgsForCall(i int) *cloudformation.StopStackSetOperationInput {
	fake.stopStackSetOperationRequestMutex.RLock()
	defer fake.stopStackSetOperationRequestMutex.RUnlock()
	return fake.stopStackSetOperationRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) StopStackSetOperationRequestReturns(result1 *request.Request, result2 *cloudformation.StopStackSetOperationOutput) {
	fake.StopStackSetOperationRequestStub = nil
	fake.stopStackSetOperationRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.StopStackSetOperationOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) StopStackSetOperationRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.StopStackSetOperationOutput) {
	fake.StopStackSetOperationRequestStub = nil
	if fake.stopStackSetOperationRequestReturnsOnCall == nil {
		fake.stopStackSetOperationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.StopStackSetOperationOutput
		})
	}
	fake.stopStackSetOperationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.StopStackSetOperationOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) UpdateStack(arg1 *cloudformation.UpdateStackInput) (*cloudformation.UpdateStackOutput, error) {
	fake.updateStackMutex.Lock()
	ret, specificReturn := fake.updateStackReturnsOnCall[len(fake.updateStackArgsForCall)]
	fake.updateStackArgsForCall = append(fake.updateStackArgsForCall, struct {
		arg1 *cloudformation.UpdateStackInput
	}{arg1})
	fake.recordInvocation("UpdateStack", []interface{}{arg1})
	fake.updateStackMutex.Unlock()
	if fake.UpdateStackStub != nil {
		return fake.UpdateStackStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateStackReturns.result1, fake.updateStackReturns.result2
}

func (fake *FakeCloudFormationAPI) UpdateStackCallCount() int {
	fake.updateStackMutex.RLock()
	defer fake.updateStackMutex.RUnlock()
	return len(fake.updateStackArgsForCall)
}

func (fake *FakeCloudFormationAPI) UpdateStackArgsForCall(i int) *cloudformation.UpdateStackInput {
	fake.updateStackMutex.RLock()
	defer fake.updateStackMutex.RUnlock()
	return fake.updateStackArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) UpdateStackReturns(result1 *cloudformation.UpdateStackOutput, result2 error) {
	fake.UpdateStackStub = nil
	fake.updateStackReturns = struct {
		result1 *cloudformation.UpdateStackOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) UpdateStackReturnsOnCall(i int, result1 *cloudformation.UpdateStackOutput, result2 error) {
	fake.UpdateStackStub = nil
	if fake.updateStackReturnsOnCall == nil {
		fake.updateStackReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.UpdateStackOutput
			result2 error
		})
	}
	fake.updateStackReturnsOnCall[i] = struct {
		result1 *cloudformation.UpdateStackOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) UpdateStackWithContext(arg1 aws.Context, arg2 *cloudformation.UpdateStackInput, arg3 ...request.Option) (*cloudformation.UpdateStackOutput, error) {
	fake.updateStackWithContextMutex.Lock()
	ret, specificReturn := fake.updateStackWithContextReturnsOnCall[len(fake.updateStackWithContextArgsForCall)]
	fake.updateStackWithContextArgsForCall = append(fake.updateStackWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.UpdateStackInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateStackWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateStackWithContextMutex.Unlock()
	if fake.UpdateStackWithContextStub != nil {
		return fake.UpdateStackWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateStackWithContextReturns.result1, fake.updateStackWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) UpdateStackWithContextCallCount() int {
	fake.updateStackWithContextMutex.RLock()
	defer fake.updateStackWithContextMutex.RUnlock()
	return len(fake.updateStackWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) UpdateStackWithContextArgsForCall(i int) (aws.Context, *cloudformation.UpdateStackInput, []request.Option) {
	fake.updateStackWithContextMutex.RLock()
	defer fake.updateStackWithContextMutex.RUnlock()
	return fake.updateStackWithContextArgsForCall[i].arg1, fake.updateStackWithContextArgsForCall[i].arg2, fake.updateStackWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) UpdateStackWithContextReturns(result1 *cloudformation.UpdateStackOutput, result2 error) {
	fake.UpdateStackWithContextStub = nil
	fake.updateStackWithContextReturns = struct {
		result1 *cloudformation.UpdateStackOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) UpdateStackWithContextReturnsOnCall(i int, result1 *cloudformation.UpdateStackOutput, result2 error) {
	fake.UpdateStackWithContextStub = nil
	if fake.updateStackWithContextReturnsOnCall == nil {
		fake.updateStackWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.UpdateStackOutput
			result2 error
		})
	}
	fake.updateStackWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.UpdateStackOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) UpdateStackRequest(arg1 *cloudformation.UpdateStackInput) (*request.Request, *cloudformation.UpdateStackOutput) {
	fake.updateStackRequestMutex.Lock()
	ret, specificReturn := fake.updateStackRequestReturnsOnCall[len(fake.updateStackRequestArgsForCall)]
	fake.updateStackRequestArgsForCall = append(fake.updateStackRequestArgsForCall, struct {
		arg1 *cloudformation.UpdateStackInput
	}{arg1})
	fake.recordInvocation("UpdateStackRequest", []interface{}{arg1})
	fake.updateStackRequestMutex.Unlock()
	if fake.UpdateStackRequestStub != nil {
		return fake.UpdateStackRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateStackRequestReturns.result1, fake.updateStackRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) UpdateStackRequestCallCount() int {
	fake.updateStackRequestMutex.RLock()
	defer fake.updateStackRequestMutex.RUnlock()
	return len(fake.updateStackRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) UpdateStackRequestArgsForCall(i int) *cloudformation.UpdateStackInput {
	fake.updateStackRequestMutex.RLock()
	defer fake.updateStackRequestMutex.RUnlock()
	return fake.updateStackRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) UpdateStackRequestReturns(result1 *request.Request, result2 *cloudformation.UpdateStackOutput) {
	fake.UpdateStackRequestStub = nil
	fake.updateStackRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.UpdateStackOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) UpdateStackRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.UpdateStackOutput) {
	fake.UpdateStackRequestStub = nil
	if fake.updateStackRequestReturnsOnCall == nil {
		fake.updateStackRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.UpdateStackOutput
		})
	}
	fake.updateStackRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.UpdateStackOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) UpdateStackInstances(arg1 *cloudformation.UpdateStackInstancesInput) (*cloudformation.UpdateStackInstancesOutput, error) {
	fake.updateStackInstancesMutex.Lock()
	ret, specificReturn := fake.updateStackInstancesReturnsOnCall[len(fake.updateStackInstancesArgsForCall)]
	fake.updateStackInstancesArgsForCall = append(fake.updateStackInstancesArgsForCall, struct {
		arg1 *cloudformation.UpdateStackInstancesInput
	}{arg1})
	fake.recordInvocation("UpdateStackInstances", []interface{}{arg1})
	fake.updateStackInstancesMutex.Unlock()
	if fake.UpdateStackInstancesStub != nil {
		return fake.UpdateStackInstancesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateStackInstancesReturns.result1, fake.updateStackInstancesReturns.result2
}

func (fake *FakeCloudFormationAPI) UpdateStackInstancesCallCount() int {
	fake.updateStackInstancesMutex.RLock()
	defer fake.updateStackInstancesMutex.RUnlock()
	return len(fake.updateStackInstancesArgsForCall)
}

func (fake *FakeCloudFormationAPI) UpdateStackInstancesArgsForCall(i int) *cloudformation.UpdateStackInstancesInput {
	fake.updateStackInstancesMutex.RLock()
	defer fake.updateStackInstancesMutex.RUnlock()
	return fake.updateStackInstancesArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) UpdateStackInstancesReturns(result1 *cloudformation.UpdateStackInstancesOutput, result2 error) {
	fake.UpdateStackInstancesStub = nil
	fake.updateStackInstancesReturns = struct {
		result1 *cloudformation.UpdateStackInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) UpdateStackInstancesReturnsOnCall(i int, result1 *cloudformation.UpdateStackInstancesOutput, result2 error) {
	fake.UpdateStackInstancesStub = nil
	if fake.updateStackInstancesReturnsOnCall == nil {
		fake.updateStackInstancesReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.UpdateStackInstancesOutput
			result2 error
		})
	}
	fake.updateStackInstancesReturnsOnCall[i] = struct {
		result1 *cloudformation.UpdateStackInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) UpdateStackInstancesWithContext(arg1 aws.Context, arg2 *cloudformation.UpdateStackInstancesInput, arg3 ...request.Option) (*cloudformation.UpdateStackInstancesOutput, error) {
	fake.updateStackInstancesWithContextMutex.Lock()
	ret, specificReturn := fake.updateStackInstancesWithContextReturnsOnCall[len(fake.updateStackInstancesWithContextArgsForCall)]
	fake.updateStackInstancesWithContextArgsForCall = append(fake.updateStackInstancesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.UpdateStackInstancesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateStackInstancesWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateStackInstancesWithContextMutex.Unlock()
	if fake.UpdateStackInstancesWithContextStub != nil {
		return fake.UpdateStackInstancesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateStackInstancesWithContextReturns.result1, fake.updateStackInstancesWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) UpdateStackInstancesWithContextCallCount() int {
	fake.updateStackInstancesWithContextMutex.RLock()
	defer fake.updateStackInstancesWithContextMutex.RUnlock()
	return len(fake.updateStackInstancesWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) UpdateStackInstancesWithContextArgsForCall(i int) (aws.Context, *cloudformation.UpdateStackInstancesInput, []request.Option) {
	fake.updateStackInstancesWithContextMutex.RLock()
	defer fake.updateStackInstancesWithContextMutex.RUnlock()
	return fake.updateStackInstancesWithContextArgsForCall[i].arg1, fake.updateStackInstancesWithContextArgsForCall[i].arg2, fake.updateStackInstancesWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) UpdateStackInstancesWithContextReturns(result1 *cloudformation.UpdateStackInstancesOutput, result2 error) {
	fake.UpdateStackInstancesWithContextStub = nil
	fake.updateStackInstancesWithContextReturns = struct {
		result1 *cloudformation.UpdateStackInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) UpdateStackInstancesWithContextReturnsOnCall(i int, result1 *cloudformation.UpdateStackInstancesOutput, result2 error) {
	fake.UpdateStackInstancesWithContextStub = nil
	if fake.updateStackInstancesWithContextReturnsOnCall == nil {
		fake.updateStackInstancesWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.UpdateStackInstancesOutput
			result2 error
		})
	}
	fake.updateStackInstancesWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.UpdateStackInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) UpdateStackInstancesRequest(arg1 *cloudformation.UpdateStackInstancesInput) (*request.Request, *cloudformation.UpdateStackInstancesOutput) {
	fake.updateStackInstancesRequestMutex.Lock()
	ret, specificReturn := fake.updateStackInstancesRequestReturnsOnCall[len(fake.updateStackInstancesRequestArgsForCall)]
	fake.updateStackInstancesRequestArgsForCall = append(fake.updateStackInstancesRequestArgsForCall, struct {
		arg1 *cloudformation.UpdateStackInstancesInput
	}{arg1})
	fake.recordInvocation("UpdateStackInstancesRequest", []interface{}{arg1})
	fake.updateStackInstancesRequestMutex.Unlock()
	if fake.UpdateStackInstancesRequestStub != nil {
		return fake.UpdateStackInstancesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateStackInstancesRequestReturns.result1, fake.updateStackInstancesRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) UpdateStackInstancesRequestCallCount() int {
	fake.updateStackInstancesRequestMutex.RLock()
	defer fake.updateStackInstancesRequestMutex.RUnlock()
	return len(fake.updateStackInstancesRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) UpdateStackInstancesRequestArgsForCall(i int) *cloudformation.UpdateStackInstancesInput {
	fake.updateStackInstancesRequestMutex.RLock()
	defer fake.updateStackInstancesRequestMutex.RUnlock()
	return fake.updateStackInstancesRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) UpdateStackInstancesRequestReturns(result1 *request.Request, result2 *cloudformation.UpdateStackInstancesOutput) {
	fake.UpdateStackInstancesRequestStub = nil
	fake.updateStackInstancesRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.UpdateStackInstancesOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) UpdateStackInstancesRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.UpdateStackInstancesOutput) {
	fake.UpdateStackInstancesRequestStub = nil
	if fake.updateStackInstancesRequestReturnsOnCall == nil {
		fake.updateStackInstancesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.UpdateStackInstancesOutput
		})
	}
	fake.updateStackInstancesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.UpdateStackInstancesOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) UpdateStackSet(arg1 *cloudformation.UpdateStackSetInput) (*cloudformation.UpdateStackSetOutput, error) {
	fake.updateStackSetMutex.Lock()
	ret, specificReturn := fake.updateStackSetReturnsOnCall[len(fake.updateStackSetArgsForCall)]
	fake.updateStackSetArgsForCall = append(fake.updateStackSetArgsForCall, struct {
		arg1 *cloudformation.UpdateStackSetInput
	}{arg1})
	fake.recordInvocation("UpdateStackSet", []interface{}{arg1})
	fake.updateStackSetMutex.Unlock()
	if fake.UpdateStackSetStub != nil {
		return fake.UpdateStackSetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateStackSetReturns.result1, fake.updateStackSetReturns.result2
}

func (fake *FakeCloudFormationAPI) UpdateStackSetCallCount() int {
	fake.updateStackSetMutex.RLock()
	defer fake.updateStackSetMutex.RUnlock()
	return len(fake.updateStackSetArgsForCall)
}

func (fake *FakeCloudFormationAPI) UpdateStackSetArgsForCall(i int) *cloudformation.UpdateStackSetInput {
	fake.updateStackSetMutex.RLock()
	defer fake.updateStackSetMutex.RUnlock()
	return fake.updateStackSetArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) UpdateStackSetReturns(result1 *cloudformation.UpdateStackSetOutput, result2 error) {
	fake.UpdateStackSetStub = nil
	fake.updateStackSetReturns = struct {
		result1 *cloudformation.UpdateStackSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) UpdateStackSetReturnsOnCall(i int, result1 *cloudformation.UpdateStackSetOutput, result2 error) {
	fake.UpdateStackSetStub = nil
	if fake.updateStackSetReturnsOnCall == nil {
		fake.updateStackSetReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.UpdateStackSetOutput
			result2 error
		})
	}
	fake.updateStackSetReturnsOnCall[i] = struct {
		result1 *cloudformation.UpdateStackSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) UpdateStackSetWithContext(arg1 aws.Context, arg2 *cloudformation.UpdateStackSetInput, arg3 ...request.Option) (*cloudformation.UpdateStackSetOutput, error) {
	fake.updateStackSetWithContextMutex.Lock()
	ret, specificReturn := fake.updateStackSetWithContextReturnsOnCall[len(fake.updateStackSetWithContextArgsForCall)]
	fake.updateStackSetWithContextArgsForCall = append(fake.updateStackSetWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.UpdateStackSetInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateStackSetWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateStackSetWithContextMutex.Unlock()
	if fake.UpdateStackSetWithContextStub != nil {
		return fake.UpdateStackSetWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateStackSetWithContextReturns.result1, fake.updateStackSetWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) UpdateStackSetWithContextCallCount() int {
	fake.updateStackSetWithContextMutex.RLock()
	defer fake.updateStackSetWithContextMutex.RUnlock()
	return len(fake.updateStackSetWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) UpdateStackSetWithContextArgsForCall(i int) (aws.Context, *cloudformation.UpdateStackSetInput, []request.Option) {
	fake.updateStackSetWithContextMutex.RLock()
	defer fake.updateStackSetWithContextMutex.RUnlock()
	return fake.updateStackSetWithContextArgsForCall[i].arg1, fake.updateStackSetWithContextArgsForCall[i].arg2, fake.updateStackSetWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) UpdateStackSetWithContextReturns(result1 *cloudformation.UpdateStackSetOutput, result2 error) {
	fake.UpdateStackSetWithContextStub = nil
	fake.updateStackSetWithContextReturns = struct {
		result1 *cloudformation.UpdateStackSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) UpdateStackSetWithContextReturnsOnCall(i int, result1 *cloudformation.UpdateStackSetOutput, result2 error) {
	fake.UpdateStackSetWithContextStub = nil
	if fake.updateStackSetWithContextReturnsOnCall == nil {
		fake.updateStackSetWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.UpdateStackSetOutput
			result2 error
		})
	}
	fake.updateStackSetWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.UpdateStackSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) UpdateStackSetRequest(arg1 *cloudformation.UpdateStackSetInput) (*request.Request, *cloudformation.UpdateStackSetOutput) {
	fake.updateStackSetRequestMutex.Lock()
	ret, specificReturn := fake.updateStackSetRequestReturnsOnCall[len(fake.updateStackSetRequestArgsForCall)]
	fake.updateStackSetRequestArgsForCall = append(fake.updateStackSetRequestArgsForCall, struct {
		arg1 *cloudformation.UpdateStackSetInput
	}{arg1})
	fake.recordInvocation("UpdateStackSetRequest", []interface{}{arg1})
	fake.updateStackSetRequestMutex.Unlock()
	if fake.UpdateStackSetRequestStub != nil {
		return fake.UpdateStackSetRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateStackSetRequestReturns.result1, fake.updateStackSetRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) UpdateStackSetRequestCallCount() int {
	fake.updateStackSetRequestMutex.RLock()
	defer fake.updateStackSetRequestMutex.RUnlock()
	return len(fake.updateStackSetRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) UpdateStackSetRequestArgsForCall(i int) *cloudformation.UpdateStackSetInput {
	fake.updateStackSetRequestMutex.RLock()
	defer fake.updateStackSetRequestMutex.RUnlock()
	return fake.updateStackSetRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) UpdateStackSetRequestReturns(result1 *request.Request, result2 *cloudformation.UpdateStackSetOutput) {
	fake.UpdateStackSetRequestStub = nil
	fake.updateStackSetRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.UpdateStackSetOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) UpdateStackSetRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.UpdateStackSetOutput) {
	fake.UpdateStackSetRequestStub = nil
	if fake.updateStackSetRequestReturnsOnCall == nil {
		fake.updateStackSetRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.UpdateStackSetOutput
		})
	}
	fake.updateStackSetRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.UpdateStackSetOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) UpdateTerminationProtection(arg1 *cloudformation.UpdateTerminationProtectionInput) (*cloudformation.UpdateTerminationProtectionOutput, error) {
	fake.updateTerminationProtectionMutex.Lock()
	ret, specificReturn := fake.updateTerminationProtectionReturnsOnCall[len(fake.updateTerminationProtectionArgsForCall)]
	fake.updateTerminationProtectionArgsForCall = append(fake.updateTerminationProtectionArgsForCall, struct {
		arg1 *cloudformation.UpdateTerminationProtectionInput
	}{arg1})
	fake.recordInvocation("UpdateTerminationProtection", []interface{}{arg1})
	fake.updateTerminationProtectionMutex.Unlock()
	if fake.UpdateTerminationProtectionStub != nil {
		return fake.UpdateTerminationProtectionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateTerminationProtectionReturns.result1, fake.updateTerminationProtectionReturns.result2
}

func (fake *FakeCloudFormationAPI) UpdateTerminationProtectionCallCount() int {
	fake.updateTerminationProtectionMutex.RLock()
	defer fake.updateTerminationProtectionMutex.RUnlock()
	return len(fake.updateTerminationProtectionArgsForCall)
}

func (fake *FakeCloudFormationAPI) UpdateTerminationProtectionArgsForCall(i int) *cloudformation.UpdateTerminationProtectionInput {
	fake.updateTerminationProtectionMutex.RLock()
	defer fake.updateTerminationProtectionMutex.RUnlock()
	return fake.updateTerminationProtectionArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) UpdateTerminationProtectionReturns(result1 *cloudformation.UpdateTerminationProtectionOutput, result2 error) {
	fake.UpdateTerminationProtectionStub = nil
	fake.updateTerminationProtectionReturns = struct {
		result1 *cloudformation.UpdateTerminationProtectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) UpdateTerminationProtectionReturnsOnCall(i int, result1 *cloudformation.UpdateTerminationProtectionOutput, result2 error) {
	fake.UpdateTerminationProtectionStub = nil
	if fake.updateTerminationProtectionReturnsOnCall == nil {
		fake.updateTerminationProtectionReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.UpdateTerminationProtectionOutput
			result2 error
		})
	}
	fake.updateTerminationProtectionReturnsOnCall[i] = struct {
		result1 *cloudformation.UpdateTerminationProtectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) UpdateTerminationProtectionWithContext(arg1 aws.Context, arg2 *cloudformation.UpdateTerminationProtectionInput, arg3 ...request.Option) (*cloudformation.UpdateTerminationProtectionOutput, error) {
	fake.updateTerminationProtectionWithContextMutex.Lock()
	ret, specificReturn := fake.updateTerminationProtectionWithContextReturnsOnCall[len(fake.updateTerminationProtectionWithContextArgsForCall)]
	fake.updateTerminationProtectionWithContextArgsForCall = append(fake.updateTerminationProtectionWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.UpdateTerminationProtectionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateTerminationProtectionWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateTerminationProtectionWithContextMutex.Unlock()
	if fake.UpdateTerminationProtectionWithContextStub != nil {
		return fake.UpdateTerminationProtectionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateTerminationProtectionWithContextReturns.result1, fake.updateTerminationProtectionWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) UpdateTerminationProtectionWithContextCallCount() int {
	fake.updateTerminationProtectionWithContextMutex.RLock()
	defer fake.updateTerminationProtectionWithContextMutex.RUnlock()
	return len(fake.updateTerminationProtectionWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) UpdateTerminationProtectionWithContextArgsForCall(i int) (aws.Context, *cloudformation.UpdateTerminationProtectionInput, []request.Option) {
	fake.updateTerminationProtectionWithContextMutex.RLock()
	defer fake.updateTerminationProtectionWithContextMutex.RUnlock()
	return fake.updateTerminationProtectionWithContextArgsForCall[i].arg1, fake.updateTerminationProtectionWithContextArgsForCall[i].arg2, fake.updateTerminationProtectionWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) UpdateTerminationProtectionWithContextReturns(result1 *cloudformation.UpdateTerminationProtectionOutput, result2 error) {
	fake.UpdateTerminationProtectionWithContextStub = nil
	fake.updateTerminationProtectionWithContextReturns = struct {
		result1 *cloudformation.UpdateTerminationProtectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) UpdateTerminationProtectionWithContextReturnsOnCall(i int, result1 *cloudformation.UpdateTerminationProtectionOutput, result2 error) {
	fake.UpdateTerminationProtectionWithContextStub = nil
	if fake.updateTerminationProtectionWithContextReturnsOnCall == nil {
		fake.updateTerminationProtectionWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.UpdateTerminationProtectionOutput
			result2 error
		})
	}
	fake.updateTerminationProtectionWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.UpdateTerminationProtectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) UpdateTerminationProtectionRequest(arg1 *cloudformation.UpdateTerminationProtectionInput) (*request.Request, *cloudformation.UpdateTerminationProtectionOutput) {
	fake.updateTerminationProtectionRequestMutex.Lock()
	ret, specificReturn := fake.updateTerminationProtectionRequestReturnsOnCall[len(fake.updateTerminationProtectionRequestArgsForCall)]
	fake.updateTerminationProtectionRequestArgsForCall = append(fake.updateTerminationProtectionRequestArgsForCall, struct {
		arg1 *cloudformation.UpdateTerminationProtectionInput
	}{arg1})
	fake.recordInvocation("UpdateTerminationProtectionRequest", []interface{}{arg1})
	fake.updateTerminationProtectionRequestMutex.Unlock()
	if fake.UpdateTerminationProtectionRequestStub != nil {
		return fake.UpdateTerminationProtectionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateTerminationProtectionRequestReturns.result1, fake.updateTerminationProtectionRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) UpdateTerminationProtectionRequestCallCount() int {
	fake.updateTerminationProtectionRequestMutex.RLock()
	defer fake.updateTerminationProtectionRequestMutex.RUnlock()
	return len(fake.updateTerminationProtectionRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) UpdateTerminationProtectionRequestArgsForCall(i int) *cloudformation.UpdateTerminationProtectionInput {
	fake.updateTerminationProtectionRequestMutex.RLock()
	defer fake.updateTerminationProtectionRequestMutex.RUnlock()
	return fake.updateTerminationProtectionRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) UpdateTerminationProtectionRequestReturns(result1 *request.Request, result2 *cloudformation.UpdateTerminationProtectionOutput) {
	fake.UpdateTerminationProtectionRequestStub = nil
	fake.updateTerminationProtectionRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.UpdateTerminationProtectionOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) UpdateTerminationProtectionRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.UpdateTerminationProtectionOutput) {
	fake.UpdateTerminationProtectionRequestStub = nil
	if fake.updateTerminationProtectionRequestReturnsOnCall == nil {
		fake.updateTerminationProtectionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.UpdateTerminationProtectionOutput
		})
	}
	fake.updateTerminationProtectionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.UpdateTerminationProtectionOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ValidateTemplate(arg1 *cloudformation.ValidateTemplateInput) (*cloudformation.ValidateTemplateOutput, error) {
	fake.validateTemplateMutex.Lock()
	ret, specificReturn := fake.validateTemplateReturnsOnCall[len(fake.validateTemplateArgsForCall)]
	fake.validateTemplateArgsForCall = append(fake.validateTemplateArgsForCall, struct {
		arg1 *cloudformation.ValidateTemplateInput
	}{arg1})
	fake.recordInvocation("ValidateTemplate", []interface{}{arg1})
	fake.validateTemplateMutex.Unlock()
	if fake.ValidateTemplateStub != nil {
		return fake.ValidateTemplateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.validateTemplateReturns.result1, fake.validateTemplateReturns.result2
}

func (fake *FakeCloudFormationAPI) ValidateTemplateCallCount() int {
	fake.validateTemplateMutex.RLock()
	defer fake.validateTemplateMutex.RUnlock()
	return len(fake.validateTemplateArgsForCall)
}

func (fake *FakeCloudFormationAPI) ValidateTemplateArgsForCall(i int) *cloudformation.ValidateTemplateInput {
	fake.validateTemplateMutex.RLock()
	defer fake.validateTemplateMutex.RUnlock()
	return fake.validateTemplateArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) ValidateTemplateReturns(result1 *cloudformation.ValidateTemplateOutput, result2 error) {
	fake.ValidateTemplateStub = nil
	fake.validateTemplateReturns = struct {
		result1 *cloudformation.ValidateTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ValidateTemplateReturnsOnCall(i int, result1 *cloudformation.ValidateTemplateOutput, result2 error) {
	fake.ValidateTemplateStub = nil
	if fake.validateTemplateReturnsOnCall == nil {
		fake.validateTemplateReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.ValidateTemplateOutput
			result2 error
		})
	}
	fake.validateTemplateReturnsOnCall[i] = struct {
		result1 *cloudformation.ValidateTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ValidateTemplateWithContext(arg1 aws.Context, arg2 *cloudformation.ValidateTemplateInput, arg3 ...request.Option) (*cloudformation.ValidateTemplateOutput, error) {
	fake.validateTemplateWithContextMutex.Lock()
	ret, specificReturn := fake.validateTemplateWithContextReturnsOnCall[len(fake.validateTemplateWithContextArgsForCall)]
	fake.validateTemplateWithContextArgsForCall = append(fake.validateTemplateWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.ValidateTemplateInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ValidateTemplateWithContext", []interface{}{arg1, arg2, arg3})
	fake.validateTemplateWithContextMutex.Unlock()
	if fake.ValidateTemplateWithContextStub != nil {
		return fake.ValidateTemplateWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.validateTemplateWithContextReturns.result1, fake.validateTemplateWithContextReturns.result2
}

func (fake *FakeCloudFormationAPI) ValidateTemplateWithContextCallCount() int {
	fake.validateTemplateWithContextMutex.RLock()
	defer fake.validateTemplateWithContextMutex.RUnlock()
	return len(fake.validateTemplateWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) ValidateTemplateWithContextArgsForCall(i int) (aws.Context, *cloudformation.ValidateTemplateInput, []request.Option) {
	fake.validateTemplateWithContextMutex.RLock()
	defer fake.validateTemplateWithContextMutex.RUnlock()
	return fake.validateTemplateWithContextArgsForCall[i].arg1, fake.validateTemplateWithContextArgsForCall[i].arg2, fake.validateTemplateWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) ValidateTemplateWithContextReturns(result1 *cloudformation.ValidateTemplateOutput, result2 error) {
	fake.ValidateTemplateWithContextStub = nil
	fake.validateTemplateWithContextReturns = struct {
		result1 *cloudformation.ValidateTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ValidateTemplateWithContextReturnsOnCall(i int, result1 *cloudformation.ValidateTemplateOutput, result2 error) {
	fake.ValidateTemplateWithContextStub = nil
	if fake.validateTemplateWithContextReturnsOnCall == nil {
		fake.validateTemplateWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.ValidateTemplateOutput
			result2 error
		})
	}
	fake.validateTemplateWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.ValidateTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ValidateTemplateRequest(arg1 *cloudformation.ValidateTemplateInput) (*request.Request, *cloudformation.ValidateTemplateOutput) {
	fake.validateTemplateRequestMutex.Lock()
	ret, specificReturn := fake.validateTemplateRequestReturnsOnCall[len(fake.validateTemplateRequestArgsForCall)]
	fake.validateTemplateRequestArgsForCall = append(fake.validateTemplateRequestArgsForCall, struct {
		arg1 *cloudformation.ValidateTemplateInput
	}{arg1})
	fake.recordInvocation("ValidateTemplateRequest", []interface{}{arg1})
	fake.validateTemplateRequestMutex.Unlock()
	if fake.ValidateTemplateRequestStub != nil {
		return fake.ValidateTemplateRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.validateTemplateRequestReturns.result1, fake.validateTemplateRequestReturns.result2
}

func (fake *FakeCloudFormationAPI) ValidateTemplateRequestCallCount() int {
	fake.validateTemplateRequestMutex.RLock()
	defer fake.validateTemplateRequestMutex.RUnlock()
	return len(fake.validateTemplateRequestArgsForCall)
}

func (fake *FakeCloudFormationAPI) ValidateTemplateRequestArgsForCall(i int) *cloudformation.ValidateTemplateInput {
	fake.validateTemplateRequestMutex.RLock()
	defer fake.validateTemplateRequestMutex.RUnlock()
	return fake.validateTemplateRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) ValidateTemplateRequestReturns(result1 *request.Request, result2 *cloudformation.ValidateTemplateOutput) {
	fake.ValidateTemplateRequestStub = nil
	fake.validateTemplateRequestReturns = struct {
		result1 *request.Request
		result2 *cloudformation.ValidateTemplateOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) ValidateTemplateRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudformation.ValidateTemplateOutput) {
	fake.ValidateTemplateRequestStub = nil
	if fake.validateTemplateRequestReturnsOnCall == nil {
		fake.validateTemplateRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudformation.ValidateTemplateOutput
		})
	}
	fake.validateTemplateRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudformation.ValidateTemplateOutput
	}{result1, result2}
}

func (fake *FakeCloudFormationAPI) WaitUntilChangeSetCreateComplete(arg1 *cloudformation.DescribeChangeSetInput) error {
	fake.waitUntilChangeSetCreateCompleteMutex.Lock()
	ret, specificReturn := fake.waitUntilChangeSetCreateCompleteReturnsOnCall[len(fake.waitUntilChangeSetCreateCompleteArgsForCall)]
	fake.waitUntilChangeSetCreateCompleteArgsForCall = append(fake.waitUntilChangeSetCreateCompleteArgsForCall, struct {
		arg1 *cloudformation.DescribeChangeSetInput
	}{arg1})
	fake.recordInvocation("WaitUntilChangeSetCreateComplete", []interface{}{arg1})
	fake.waitUntilChangeSetCreateCompleteMutex.Unlock()
	if fake.WaitUntilChangeSetCreateCompleteStub != nil {
		return fake.WaitUntilChangeSetCreateCompleteStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.waitUntilChangeSetCreateCompleteReturns.result1
}

func (fake *FakeCloudFormationAPI) WaitUntilChangeSetCreateCompleteCallCount() int {
	fake.waitUntilChangeSetCreateCompleteMutex.RLock()
	defer fake.waitUntilChangeSetCreateCompleteMutex.RUnlock()
	return len(fake.waitUntilChangeSetCreateCompleteArgsForCall)
}

func (fake *FakeCloudFormationAPI) WaitUntilChangeSetCreateCompleteArgsForCall(i int) *cloudformation.DescribeChangeSetInput {
	fake.waitUntilChangeSetCreateCompleteMutex.RLock()
	defer fake.waitUntilChangeSetCreateCompleteMutex.RUnlock()
	return fake.waitUntilChangeSetCreateCompleteArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) WaitUntilChangeSetCreateCompleteReturns(result1 error) {
	fake.WaitUntilChangeSetCreateCompleteStub = nil
	fake.waitUntilChangeSetCreateCompleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) WaitUntilChangeSetCreateCompleteReturnsOnCall(i int, result1 error) {
	fake.WaitUntilChangeSetCreateCompleteStub = nil
	if fake.waitUntilChangeSetCreateCompleteReturnsOnCall == nil {
		fake.waitUntilChangeSetCreateCompleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilChangeSetCreateCompleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) WaitUntilChangeSetCreateCompleteWithContext(arg1 aws.Context, arg2 *cloudformation.DescribeChangeSetInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilChangeSetCreateCompleteWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilChangeSetCreateCompleteWithContextReturnsOnCall[len(fake.waitUntilChangeSetCreateCompleteWithContextArgsForCall)]
	fake.waitUntilChangeSetCreateCompleteWithContextArgsForCall = append(fake.waitUntilChangeSetCreateCompleteWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeChangeSetInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilChangeSetCreateCompleteWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilChangeSetCreateCompleteWithContextMutex.Unlock()
	if fake.WaitUntilChangeSetCreateCompleteWithContextStub != nil {
		return fake.WaitUntilChangeSetCreateCompleteWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.waitUntilChangeSetCreateCompleteWithContextReturns.result1
}

func (fake *FakeCloudFormationAPI) WaitUntilChangeSetCreateCompleteWithContextCallCount() int {
	fake.waitUntilChangeSetCreateCompleteWithContextMutex.RLock()
	defer fake.waitUntilChangeSetCreateCompleteWithContextMutex.RUnlock()
	return len(fake.waitUntilChangeSetCreateCompleteWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) WaitUntilChangeSetCreateCompleteWithContextArgsForCall(i int) (aws.Context, *cloudformation.DescribeChangeSetInput, []request.WaiterOption) {
	fake.waitUntilChangeSetCreateCompleteWithContextMutex.RLock()
	defer fake.waitUntilChangeSetCreateCompleteWithContextMutex.RUnlock()
	return fake.waitUntilChangeSetCreateCompleteWithContextArgsForCall[i].arg1, fake.waitUntilChangeSetCreateCompleteWithContextArgsForCall[i].arg2, fake.waitUntilChangeSetCreateCompleteWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) WaitUntilChangeSetCreateCompleteWithContextReturns(result1 error) {
	fake.WaitUntilChangeSetCreateCompleteWithContextStub = nil
	fake.waitUntilChangeSetCreateCompleteWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) WaitUntilChangeSetCreateCompleteWithContextReturnsOnCall(i int, result1 error) {
	fake.WaitUntilChangeSetCreateCompleteWithContextStub = nil
	if fake.waitUntilChangeSetCreateCompleteWithContextReturnsOnCall == nil {
		fake.waitUntilChangeSetCreateCompleteWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilChangeSetCreateCompleteWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) WaitUntilStackCreateComplete(arg1 *cloudformation.DescribeStacksInput) error {
	fake.waitUntilStackCreateCompleteMutex.Lock()
	ret, specificReturn := fake.waitUntilStackCreateCompleteReturnsOnCall[len(fake.waitUntilStackCreateCompleteArgsForCall)]
	fake.waitUntilStackCreateCompleteArgsForCall = append(fake.waitUntilStackCreateCompleteArgsForCall, struct {
		arg1 *cloudformation.DescribeStacksInput
	}{arg1})
	fake.recordInvocation("WaitUntilStackCreateComplete", []interface{}{arg1})
	fake.waitUntilStackCreateCompleteMutex.Unlock()
	if fake.WaitUntilStackCreateCompleteStub != nil {
		return fake.WaitUntilStackCreateCompleteStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.waitUntilStackCreateCompleteReturns.result1
}

func (fake *FakeCloudFormationAPI) WaitUntilStackCreateCompleteCallCount() int {
	fake.waitUntilStackCreateCompleteMutex.RLock()
	defer fake.waitUntilStackCreateCompleteMutex.RUnlock()
	return len(fake.waitUntilStackCreateCompleteArgsForCall)
}

func (fake *FakeCloudFormationAPI) WaitUntilStackCreateCompleteArgsForCall(i int) *cloudformation.DescribeStacksInput {
	fake.waitUntilStackCreateCompleteMutex.RLock()
	defer fake.waitUntilStackCreateCompleteMutex.RUnlock()
	return fake.waitUntilStackCreateCompleteArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) WaitUntilStackCreateCompleteReturns(result1 error) {
	fake.WaitUntilStackCreateCompleteStub = nil
	fake.waitUntilStackCreateCompleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) WaitUntilStackCreateCompleteReturnsOnCall(i int, result1 error) {
	fake.WaitUntilStackCreateCompleteStub = nil
	if fake.waitUntilStackCreateCompleteReturnsOnCall == nil {
		fake.waitUntilStackCreateCompleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilStackCreateCompleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) WaitUntilStackCreateCompleteWithContext(arg1 aws.Context, arg2 *cloudformation.DescribeStacksInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilStackCreateCompleteWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilStackCreateCompleteWithContextReturnsOnCall[len(fake.waitUntilStackCreateCompleteWithContextArgsForCall)]
	fake.waitUntilStackCreateCompleteWithContextArgsForCall = append(fake.waitUntilStackCreateCompleteWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeStacksInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilStackCreateCompleteWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilStackCreateCompleteWithContextMutex.Unlock()
	if fake.WaitUntilStackCreateCompleteWithContextStub != nil {
		return fake.WaitUntilStackCreateCompleteWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.waitUntilStackCreateCompleteWithContextReturns.result1
}

func (fake *FakeCloudFormationAPI) WaitUntilStackCreateCompleteWithContextCallCount() int {
	fake.waitUntilStackCreateCompleteWithContextMutex.RLock()
	defer fake.waitUntilStackCreateCompleteWithContextMutex.RUnlock()
	return len(fake.waitUntilStackCreateCompleteWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) WaitUntilStackCreateCompleteWithContextArgsForCall(i int) (aws.Context, *cloudformation.DescribeStacksInput, []request.WaiterOption) {
	fake.waitUntilStackCreateCompleteWithContextMutex.RLock()
	defer fake.waitUntilStackCreateCompleteWithContextMutex.RUnlock()
	return fake.waitUntilStackCreateCompleteWithContextArgsForCall[i].arg1, fake.waitUntilStackCreateCompleteWithContextArgsForCall[i].arg2, fake.waitUntilStackCreateCompleteWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) WaitUntilStackCreateCompleteWithContextReturns(result1 error) {
	fake.WaitUntilStackCreateCompleteWithContextStub = nil
	fake.waitUntilStackCreateCompleteWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) WaitUntilStackCreateCompleteWithContextReturnsOnCall(i int, result1 error) {
	fake.WaitUntilStackCreateCompleteWithContextStub = nil
	if fake.waitUntilStackCreateCompleteWithContextReturnsOnCall == nil {
		fake.waitUntilStackCreateCompleteWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilStackCreateCompleteWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) WaitUntilStackDeleteComplete(arg1 *cloudformation.DescribeStacksInput) error {
	fake.waitUntilStackDeleteCompleteMutex.Lock()
	ret, specificReturn := fake.waitUntilStackDeleteCompleteReturnsOnCall[len(fake.waitUntilStackDeleteCompleteArgsForCall)]
	fake.waitUntilStackDeleteCompleteArgsForCall = append(fake.waitUntilStackDeleteCompleteArgsForCall, struct {
		arg1 *cloudformation.DescribeStacksInput
	}{arg1})
	fake.recordInvocation("WaitUntilStackDeleteComplete", []interface{}{arg1})
	fake.waitUntilStackDeleteCompleteMutex.Unlock()
	if fake.WaitUntilStackDeleteCompleteStub != nil {
		return fake.WaitUntilStackDeleteCompleteStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.waitUntilStackDeleteCompleteReturns.result1
}

func (fake *FakeCloudFormationAPI) WaitUntilStackDeleteCompleteCallCount() int {
	fake.waitUntilStackDeleteCompleteMutex.RLock()
	defer fake.waitUntilStackDeleteCompleteMutex.RUnlock()
	return len(fake.waitUntilStackDeleteCompleteArgsForCall)
}

func (fake *FakeCloudFormationAPI) WaitUntilStackDeleteCompleteArgsForCall(i int) *cloudformation.DescribeStacksInput {
	fake.waitUntilStackDeleteCompleteMutex.RLock()
	defer fake.waitUntilStackDeleteCompleteMutex.RUnlock()
	return fake.waitUntilStackDeleteCompleteArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) WaitUntilStackDeleteCompleteReturns(result1 error) {
	fake.WaitUntilStackDeleteCompleteStub = nil
	fake.waitUntilStackDeleteCompleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) WaitUntilStackDeleteCompleteReturnsOnCall(i int, result1 error) {
	fake.WaitUntilStackDeleteCompleteStub = nil
	if fake.waitUntilStackDeleteCompleteReturnsOnCall == nil {
		fake.waitUntilStackDeleteCompleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilStackDeleteCompleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) WaitUntilStackDeleteCompleteWithContext(arg1 aws.Context, arg2 *cloudformation.DescribeStacksInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilStackDeleteCompleteWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilStackDeleteCompleteWithContextReturnsOnCall[len(fake.waitUntilStackDeleteCompleteWithContextArgsForCall)]
	fake.waitUntilStackDeleteCompleteWithContextArgsForCall = append(fake.waitUntilStackDeleteCompleteWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeStacksInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilStackDeleteCompleteWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilStackDeleteCompleteWithContextMutex.Unlock()
	if fake.WaitUntilStackDeleteCompleteWithContextStub != nil {
		return fake.WaitUntilStackDeleteCompleteWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.waitUntilStackDeleteCompleteWithContextReturns.result1
}

func (fake *FakeCloudFormationAPI) WaitUntilStackDeleteCompleteWithContextCallCount() int {
	fake.waitUntilStackDeleteCompleteWithContextMutex.RLock()
	defer fake.waitUntilStackDeleteCompleteWithContextMutex.RUnlock()
	return len(fake.waitUntilStackDeleteCompleteWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) WaitUntilStackDeleteCompleteWithContextArgsForCall(i int) (aws.Context, *cloudformation.DescribeStacksInput, []request.WaiterOption) {
	fake.waitUntilStackDeleteCompleteWithContextMutex.RLock()
	defer fake.waitUntilStackDeleteCompleteWithContextMutex.RUnlock()
	return fake.waitUntilStackDeleteCompleteWithContextArgsForCall[i].arg1, fake.waitUntilStackDeleteCompleteWithContextArgsForCall[i].arg2, fake.waitUntilStackDeleteCompleteWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) WaitUntilStackDeleteCompleteWithContextReturns(result1 error) {
	fake.WaitUntilStackDeleteCompleteWithContextStub = nil
	fake.waitUntilStackDeleteCompleteWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) WaitUntilStackDeleteCompleteWithContextReturnsOnCall(i int, result1 error) {
	fake.WaitUntilStackDeleteCompleteWithContextStub = nil
	if fake.waitUntilStackDeleteCompleteWithContextReturnsOnCall == nil {
		fake.waitUntilStackDeleteCompleteWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilStackDeleteCompleteWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) WaitUntilStackExists(arg1 *cloudformation.DescribeStacksInput) error {
	fake.waitUntilStackExistsMutex.Lock()
	ret, specificReturn := fake.waitUntilStackExistsReturnsOnCall[len(fake.waitUntilStackExistsArgsForCall)]
	fake.waitUntilStackExistsArgsForCall = append(fake.waitUntilStackExistsArgsForCall, struct {
		arg1 *cloudformation.DescribeStacksInput
	}{arg1})
	fake.recordInvocation("WaitUntilStackExists", []interface{}{arg1})
	fake.waitUntilStackExistsMutex.Unlock()
	if fake.WaitUntilStackExistsStub != nil {
		return fake.WaitUntilStackExistsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.waitUntilStackExistsReturns.result1
}

func (fake *FakeCloudFormationAPI) WaitUntilStackExistsCallCount() int {
	fake.waitUntilStackExistsMutex.RLock()
	defer fake.waitUntilStackExistsMutex.RUnlock()
	return len(fake.waitUntilStackExistsArgsForCall)
}

func (fake *FakeCloudFormationAPI) WaitUntilStackExistsArgsForCall(i int) *cloudformation.DescribeStacksInput {
	fake.waitUntilStackExistsMutex.RLock()
	defer fake.waitUntilStackExistsMutex.RUnlock()
	return fake.waitUntilStackExistsArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) WaitUntilStackExistsReturns(result1 error) {
	fake.WaitUntilStackExistsStub = nil
	fake.waitUntilStackExistsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) WaitUntilStackExistsReturnsOnCall(i int, result1 error) {
	fake.WaitUntilStackExistsStub = nil
	if fake.waitUntilStackExistsReturnsOnCall == nil {
		fake.waitUntilStackExistsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilStackExistsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) WaitUntilStackExistsWithContext(arg1 aws.Context, arg2 *cloudformation.DescribeStacksInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilStackExistsWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilStackExistsWithContextReturnsOnCall[len(fake.waitUntilStackExistsWithContextArgsForCall)]
	fake.waitUntilStackExistsWithContextArgsForCall = append(fake.waitUntilStackExistsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeStacksInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilStackExistsWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilStackExistsWithContextMutex.Unlock()
	if fake.WaitUntilStackExistsWithContextStub != nil {
		return fake.WaitUntilStackExistsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.waitUntilStackExistsWithContextReturns.result1
}

func (fake *FakeCloudFormationAPI) WaitUntilStackExistsWithContextCallCount() int {
	fake.waitUntilStackExistsWithContextMutex.RLock()
	defer fake.waitUntilStackExistsWithContextMutex.RUnlock()
	return len(fake.waitUntilStackExistsWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) WaitUntilStackExistsWithContextArgsForCall(i int) (aws.Context, *cloudformation.DescribeStacksInput, []request.WaiterOption) {
	fake.waitUntilStackExistsWithContextMutex.RLock()
	defer fake.waitUntilStackExistsWithContextMutex.RUnlock()
	return fake.waitUntilStackExistsWithContextArgsForCall[i].arg1, fake.waitUntilStackExistsWithContextArgsForCall[i].arg2, fake.waitUntilStackExistsWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) WaitUntilStackExistsWithContextReturns(result1 error) {
	fake.WaitUntilStackExistsWithContextStub = nil
	fake.waitUntilStackExistsWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) WaitUntilStackExistsWithContextReturnsOnCall(i int, result1 error) {
	fake.WaitUntilStackExistsWithContextStub = nil
	if fake.waitUntilStackExistsWithContextReturnsOnCall == nil {
		fake.waitUntilStackExistsWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilStackExistsWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) WaitUntilStackUpdateComplete(arg1 *cloudformation.DescribeStacksInput) error {
	fake.waitUntilStackUpdateCompleteMutex.Lock()
	ret, specificReturn := fake.waitUntilStackUpdateCompleteReturnsOnCall[len(fake.waitUntilStackUpdateCompleteArgsForCall)]
	fake.waitUntilStackUpdateCompleteArgsForCall = append(fake.waitUntilStackUpdateCompleteArgsForCall, struct {
		arg1 *cloudformation.DescribeStacksInput
	}{arg1})
	fake.recordInvocation("WaitUntilStackUpdateComplete", []interface{}{arg1})
	fake.waitUntilStackUpdateCompleteMutex.Unlock()
	if fake.WaitUntilStackUpdateCompleteStub != nil {
		return fake.WaitUntilStackUpdateCompleteStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.waitUntilStackUpdateCompleteReturns.result1
}

func (fake *FakeCloudFormationAPI) WaitUntilStackUpdateCompleteCallCount() int {
	fake.waitUntilStackUpdateCompleteMutex.RLock()
	defer fake.waitUntilStackUpdateCompleteMutex.RUnlock()
	return len(fake.waitUntilStackUpdateCompleteArgsForCall)
}

func (fake *FakeCloudFormationAPI) WaitUntilStackUpdateCompleteArgsForCall(i int) *cloudformation.DescribeStacksInput {
	fake.waitUntilStackUpdateCompleteMutex.RLock()
	defer fake.waitUntilStackUpdateCompleteMutex.RUnlock()
	return fake.waitUntilStackUpdateCompleteArgsForCall[i].arg1
}

func (fake *FakeCloudFormationAPI) WaitUntilStackUpdateCompleteReturns(result1 error) {
	fake.WaitUntilStackUpdateCompleteStub = nil
	fake.waitUntilStackUpdateCompleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) WaitUntilStackUpdateCompleteReturnsOnCall(i int, result1 error) {
	fake.WaitUntilStackUpdateCompleteStub = nil
	if fake.waitUntilStackUpdateCompleteReturnsOnCall == nil {
		fake.waitUntilStackUpdateCompleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilStackUpdateCompleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) WaitUntilStackUpdateCompleteWithContext(arg1 aws.Context, arg2 *cloudformation.DescribeStacksInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilStackUpdateCompleteWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilStackUpdateCompleteWithContextReturnsOnCall[len(fake.waitUntilStackUpdateCompleteWithContextArgsForCall)]
	fake.waitUntilStackUpdateCompleteWithContextArgsForCall = append(fake.waitUntilStackUpdateCompleteWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudformation.DescribeStacksInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilStackUpdateCompleteWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilStackUpdateCompleteWithContextMutex.Unlock()
	if fake.WaitUntilStackUpdateCompleteWithContextStub != nil {
		return fake.WaitUntilStackUpdateCompleteWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.waitUntilStackUpdateCompleteWithContextReturns.result1
}

func (fake *FakeCloudFormationAPI) WaitUntilStackUpdateCompleteWithContextCallCount() int {
	fake.waitUntilStackUpdateCompleteWithContextMutex.RLock()
	defer fake.waitUntilStackUpdateCompleteWithContextMutex.RUnlock()
	return len(fake.waitUntilStackUpdateCompleteWithContextArgsForCall)
}

func (fake *FakeCloudFormationAPI) WaitUntilStackUpdateCompleteWithContextArgsForCall(i int) (aws.Context, *cloudformation.DescribeStacksInput, []request.WaiterOption) {
	fake.waitUntilStackUpdateCompleteWithContextMutex.RLock()
	defer fake.waitUntilStackUpdateCompleteWithContextMutex.RUnlock()
	return fake.waitUntilStackUpdateCompleteWithContextArgsForCall[i].arg1, fake.waitUntilStackUpdateCompleteWithContextArgsForCall[i].arg2, fake.waitUntilStackUpdateCompleteWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFormationAPI) WaitUntilStackUpdateCompleteWithContextReturns(result1 error) {
	fake.WaitUntilStackUpdateCompleteWithContextStub = nil
	fake.waitUntilStackUpdateCompleteWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) WaitUntilStackUpdateCompleteWithContextReturnsOnCall(i int, result1 error) {
	fake.WaitUntilStackUpdateCompleteWithContextStub = nil
	if fake.waitUntilStackUpdateCompleteWithContextReturnsOnCall == nil {
		fake.waitUntilStackUpdateCompleteWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilStackUpdateCompleteWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFormationAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cancelUpdateStackMutex.RLock()
	defer fake.cancelUpdateStackMutex.RUnlock()
	fake.cancelUpdateStackWithContextMutex.RLock()
	defer fake.cancelUpdateStackWithContextMutex.RUnlock()
	fake.cancelUpdateStackRequestMutex.RLock()
	defer fake.cancelUpdateStackRequestMutex.RUnlock()
	fake.continueUpdateRollbackMutex.RLock()
	defer fake.continueUpdateRollbackMutex.RUnlock()
	fake.continueUpdateRollbackWithContextMutex.RLock()
	defer fake.continueUpdateRollbackWithContextMutex.RUnlock()
	fake.continueUpdateRollbackRequestMutex.RLock()
	defer fake.continueUpdateRollbackRequestMutex.RUnlock()
	fake.createChangeSetMutex.RLock()
	defer fake.createChangeSetMutex.RUnlock()
	fake.createChangeSetWithContextMutex.RLock()
	defer fake.createChangeSetWithContextMutex.RUnlock()
	fake.createChangeSetRequestMutex.RLock()
	defer fake.createChangeSetRequestMutex.RUnlock()
	fake.createStackMutex.RLock()
	defer fake.createStackMutex.RUnlock()
	fake.createStackWithContextMutex.RLock()
	defer fake.createStackWithContextMutex.RUnlock()
	fake.createStackRequestMutex.RLock()
	defer fake.createStackRequestMutex.RUnlock()
	fake.createStackInstancesMutex.RLock()
	defer fake.createStackInstancesMutex.RUnlock()
	fake.createStackInstancesWithContextMutex.RLock()
	defer fake.createStackInstancesWithContextMutex.RUnlock()
	fake.createStackInstancesRequestMutex.RLock()
	defer fake.createStackInstancesRequestMutex.RUnlock()
	fake.createStackSetMutex.RLock()
	defer fake.createStackSetMutex.RUnlock()
	fake.createStackSetWithContextMutex.RLock()
	defer fake.createStackSetWithContextMutex.RUnlock()
	fake.createStackSetRequestMutex.RLock()
	defer fake.createStackSetRequestMutex.RUnlock()
	fake.deleteChangeSetMutex.RLock()
	defer fake.deleteChangeSetMutex.RUnlock()
	fake.deleteChangeSetWithContextMutex.RLock()
	defer fake.deleteChangeSetWithContextMutex.RUnlock()
	fake.deleteChangeSetRequestMutex.RLock()
	defer fake.deleteChangeSetRequestMutex.RUnlock()
	fake.deleteStackMutex.RLock()
	defer fake.deleteStackMutex.RUnlock()
	fake.deleteStackWithContextMutex.RLock()
	defer fake.deleteStackWithContextMutex.RUnlock()
	fake.deleteStackRequestMutex.RLock()
	defer fake.deleteStackRequestMutex.RUnlock()
	fake.deleteStackInstancesMutex.RLock()
	defer fake.deleteStackInstancesMutex.RUnlock()
	fake.deleteStackInstancesWithContextMutex.RLock()
	defer fake.deleteStackInstancesWithContextMutex.RUnlock()
	fake.deleteStackInstancesRequestMutex.RLock()
	defer fake.deleteStackInstancesRequestMutex.RUnlock()
	fake.deleteStackSetMutex.RLock()
	defer fake.deleteStackSetMutex.RUnlock()
	fake.deleteStackSetWithContextMutex.RLock()
	defer fake.deleteStackSetWithContextMutex.RUnlock()
	fake.deleteStackSetRequestMutex.RLock()
	defer fake.deleteStackSetRequestMutex.RUnlock()
	fake.describeAccountLimitsMutex.RLock()
	defer fake.describeAccountLimitsMutex.RUnlock()
	fake.describeAccountLimitsWithContextMutex.RLock()
	defer fake.describeAccountLimitsWithContextMutex.RUnlock()
	fake.describeAccountLimitsRequestMutex.RLock()
	defer fake.describeAccountLimitsRequestMutex.RUnlock()
	fake.describeChangeSetMutex.RLock()
	defer fake.describeChangeSetMutex.RUnlock()
	fake.describeChangeSetWithContextMutex.RLock()
	defer fake.describeChangeSetWithContextMutex.RUnlock()
	fake.describeChangeSetRequestMutex.RLock()
	defer fake.describeChangeSetRequestMutex.RUnlock()
	fake.describeStackEventsMutex.RLock()
	defer fake.describeStackEventsMutex.RUnlock()
	fake.describeStackEventsWithContextMutex.RLock()
	defer fake.describeStackEventsWithContextMutex.RUnlock()
	fake.describeStackEventsRequestMutex.RLock()
	defer fake.describeStackEventsRequestMutex.RUnlock()
	fake.describeStackEventsPagesMutex.RLock()
	defer fake.describeStackEventsPagesMutex.RUnlock()
	fake.describeStackEventsPagesWithContextMutex.RLock()
	defer fake.describeStackEventsPagesWithContextMutex.RUnlock()
	fake.describeStackInstanceMutex.RLock()
	defer fake.describeStackInstanceMutex.RUnlock()
	fake.describeStackInstanceWithContextMutex.RLock()
	defer fake.describeStackInstanceWithContextMutex.RUnlock()
	fake.describeStackInstanceRequestMutex.RLock()
	defer fake.describeStackInstanceRequestMutex.RUnlock()
	fake.describeStackResourceMutex.RLock()
	defer fake.describeStackResourceMutex.RUnlock()
	fake.describeStackResourceWithContextMutex.RLock()
	defer fake.describeStackResourceWithContextMutex.RUnlock()
	fake.describeStackResourceRequestMutex.RLock()
	defer fake.describeStackResourceRequestMutex.RUnlock()
	fake.describeStackResourcesMutex.RLock()
	defer fake.describeStackResourcesMutex.RUnlock()
	fake.describeStackResourcesWithContextMutex.RLock()
	defer fake.describeStackResourcesWithContextMutex.RUnlock()
	fake.describeStackResourcesRequestMutex.RLock()
	defer fake.describeStackResourcesRequestMutex.RUnlock()
	fake.describeStackSetMutex.RLock()
	defer fake.describeStackSetMutex.RUnlock()
	fake.describeStackSetWithContextMutex.RLock()
	defer fake.describeStackSetWithContextMutex.RUnlock()
	fake.describeStackSetRequestMutex.RLock()
	defer fake.describeStackSetRequestMutex.RUnlock()
	fake.describeStackSetOperationMutex.RLock()
	defer fake.describeStackSetOperationMutex.RUnlock()
	fake.describeStackSetOperationWithContextMutex.RLock()
	defer fake.describeStackSetOperationWithContextMutex.RUnlock()
	fake.describeStackSetOperationRequestMutex.RLock()
	defer fake.describeStackSetOperationRequestMutex.RUnlock()
	fake.describeStacksMutex.RLock()
	defer fake.describeStacksMutex.RUnlock()
	fake.describeStacksWithContextMutex.RLock()
	defer fake.describeStacksWithContextMutex.RUnlock()
	fake.describeStacksRequestMutex.RLock()
	defer fake.describeStacksRequestMutex.RUnlock()
	fake.describeStacksPagesMutex.RLock()
	defer fake.describeStacksPagesMutex.RUnlock()
	fake.describeStacksPagesWithContextMutex.RLock()
	defer fake.describeStacksPagesWithContextMutex.RUnlock()
	fake.estimateTemplateCostMutex.RLock()
	defer fake.estimateTemplateCostMutex.RUnlock()
	fake.estimateTemplateCostWithContextMutex.RLock()
	defer fake.estimateTemplateCostWithContextMutex.RUnlock()
	fake.estimateTemplateCostRequestMutex.RLock()
	defer fake.estimateTemplateCostRequestMutex.RUnlock()
	fake.executeChangeSetMutex.RLock()
	defer fake.executeChangeSetMutex.RUnlock()
	fake.executeChangeSetWithContextMutex.RLock()
	defer fake.executeChangeSetWithContextMutex.RUnlock()
	fake.executeChangeSetRequestMutex.RLock()
	defer fake.executeChangeSetRequestMutex.RUnlock()
	fake.getStackPolicyMutex.RLock()
	defer fake.getStackPolicyMutex.RUnlock()
	fake.getStackPolicyWithContextMutex.RLock()
	defer fake.getStackPolicyWithContextMutex.RUnlock()
	fake.getStackPolicyRequestMutex.RLock()
	defer fake.getStackPolicyRequestMutex.RUnlock()
	fake.getTemplateMutex.RLock()
	defer fake.getTemplateMutex.RUnlock()
	fake.getTemplateWithContextMutex.RLock()
	defer fake.getTemplateWithContextMutex.RUnlock()
	fake.getTemplateRequestMutex.RLock()
	defer fake.getTemplateRequestMutex.RUnlock()
	fake.getTemplateSummaryMutex.RLock()
	defer fake.getTemplateSummaryMutex.RUnlock()
	fake.getTemplateSummaryWithContextMutex.RLock()
	defer fake.getTemplateSummaryWithContextMutex.RUnlock()
	fake.getTemplateSummaryRequestMutex.RLock()
	defer fake.getTemplateSummaryRequestMutex.RUnlock()
	fake.listChangeSetsMutex.RLock()
	defer fake.listChangeSetsMutex.RUnlock()
	fake.listChangeSetsWithContextMutex.RLock()
	defer fake.listChangeSetsWithContextMutex.RUnlock()
	fake.listChangeSetsRequestMutex.RLock()
	defer fake.listChangeSetsRequestMutex.RUnlock()
	fake.listExportsMutex.RLock()
	defer fake.listExportsMutex.RUnlock()
	fake.listExportsWithContextMutex.RLock()
	defer fake.listExportsWithContextMutex.RUnlock()
	fake.listExportsRequestMutex.RLock()
	defer fake.listExportsRequestMutex.RUnlock()
	fake.listExportsPagesMutex.RLock()
	defer fake.listExportsPagesMutex.RUnlock()
	fake.listExportsPagesWithContextMutex.RLock()
	defer fake.listExportsPagesWithContextMutex.RUnlock()
	fake.listImportsMutex.RLock()
	defer fake.listImportsMutex.RUnlock()
	fake.listImportsWithContextMutex.RLock()
	defer fake.listImportsWithContextMutex.RUnlock()
	fake.listImportsRequestMutex.RLock()
	defer fake.listImportsRequestMutex.RUnlock()
	fake.listImportsPagesMutex.RLock()
	defer fake.listImportsPagesMutex.RUnlock()
	fake.listImportsPagesWithContextMutex.RLock()
	defer fake.listImportsPagesWithContextMutex.RUnlock()
	fake.listStackInstancesMutex.RLock()
	defer fake.listStackInstancesMutex.RUnlock()
	fake.listStackInstancesWithContextMutex.RLock()
	defer fake.listStackInstancesWithContextMutex.RUnlock()
	fake.listStackInstancesRequestMutex.RLock()
	defer fake.listStackInstancesRequestMutex.RUnlock()
	fake.listStackResourcesMutex.RLock()
	defer fake.listStackResourcesMutex.RUnlock()
	fake.listStackResourcesWithContextMutex.RLock()
	defer fake.listStackResourcesWithContextMutex.RUnlock()
	fake.listStackResourcesRequestMutex.RLock()
	defer fake.listStackResourcesRequestMutex.RUnlock()
	fake.listStackResourcesPagesMutex.RLock()
	defer fake.listStackResourcesPagesMutex.RUnlock()
	fake.listStackResourcesPagesWithContextMutex.RLock()
	defer fake.listStackResourcesPagesWithContextMutex.RUnlock()
	fake.listStackSetOperationResultsMutex.RLock()
	defer fake.listStackSetOperationResultsMutex.RUnlock()
	fake.listStackSetOperationResultsWithContextMutex.RLock()
	defer fake.listStackSetOperationResultsWithContextMutex.RUnlock()
	fake.listStackSetOperationResultsRequestMutex.RLock()
	defer fake.listStackSetOperationResultsRequestMutex.RUnlock()
	fake.listStackSetOperationsMutex.RLock()
	defer fake.listStackSetOperationsMutex.RUnlock()
	fake.listStackSetOperationsWithContextMutex.RLock()
	defer fake.listStackSetOperationsWithContextMutex.RUnlock()
	fake.listStackSetOperationsRequestMutex.RLock()
	defer fake.listStackSetOperationsRequestMutex.RUnlock()
	fake.listStackSetsMutex.RLock()
	defer fake.listStackSetsMutex.RUnlock()
	fake.listStackSetsWithContextMutex.RLock()
	defer fake.listStackSetsWithContextMutex.RUnlock()
	fake.listStackSetsRequestMutex.RLock()
	defer fake.listStackSetsRequestMutex.RUnlock()
	fake.listStacksMutex.RLock()
	defer fake.listStacksMutex.RUnlock()
	fake.listStacksWithContextMutex.RLock()
	defer fake.listStacksWithContextMutex.RUnlock()
	fake.listStacksRequestMutex.RLock()
	defer fake.listStacksRequestMutex.RUnlock()
	fake.listStacksPagesMutex.RLock()
	defer fake.listStacksPagesMutex.RUnlock()
	fake.listStacksPagesWithContextMutex.RLock()
	defer fake.listStacksPagesWithContextMutex.RUnlock()
	fake.setStackPolicyMutex.RLock()
	defer fake.setStackPolicyMutex.RUnlock()
	fake.setStackPolicyWithContextMutex.RLock()
	defer fake.setStackPolicyWithContextMutex.RUnlock()
	fake.setStackPolicyRequestMutex.RLock()
	defer fake.setStackPolicyRequestMutex.RUnlock()
	fake.signalResourceMutex.RLock()
	defer fake.signalResourceMutex.RUnlock()
	fake.signalResourceWithContextMutex.RLock()
	defer fake.signalResourceWithContextMutex.RUnlock()
	fake.signalResourceRequestMutex.RLock()
	defer fake.signalResourceRequestMutex.RUnlock()
	fake.stopStackSetOperationMutex.RLock()
	defer fake.stopStackSetOperationMutex.RUnlock()
	fake.stopStackSetOperationWithContextMutex.RLock()
	defer fake.stopStackSetOperationWithContextMutex.RUnlock()
	fake.stopStackSetOperationRequestMutex.RLock()
	defer fake.stopStackSetOperationRequestMutex.RUnlock()
	fake.updateStackMutex.RLock()
	defer fake.updateStackMutex.RUnlock()
	fake.updateStackWithContextMutex.RLock()
	defer fake.updateStackWithContextMutex.RUnlock()
	fake.updateStackRequestMutex.RLock()
	defer fake.updateStackRequestMutex.RUnlock()
	fake.updateStackInstancesMutex.RLock()
	defer fake.updateStackInstancesMutex.RUnlock()
	fake.updateStackInstancesWithContextMutex.RLock()
	defer fake.updateStackInstancesWithContextMutex.RUnlock()
	fake.updateStackInstancesRequestMutex.RLock()
	defer fake.updateStackInstancesRequestMutex.RUnlock()
	fake.updateStackSetMutex.RLock()
	defer fake.updateStackSetMutex.RUnlock()
	fake.updateStackSetWithContextMutex.RLock()
	defer fake.updateStackSetWithContextMutex.RUnlock()
	fake.updateStackSetRequestMutex.RLock()
	defer fake.updateStackSetRequestMutex.RUnlock()
	fake.updateTerminationProtectionMutex.RLock()
	defer fake.updateTerminationProtectionMutex.RUnlock()
	fake.updateTerminationProtectionWithContextMutex.RLock()
	defer fake.updateTerminationProtectionWithContextMutex.RUnlock()
	fake.updateTerminationProtectionRequestMutex.RLock()
	defer fake.updateTerminationProtectionRequestMutex.RUnlock()
	fake.validateTemplateMutex.RLock()
	defer fake.validateTemplateMutex.RUnlock()
	fake.validateTemplateWithContextMutex.RLock()
	defer fake.validateTemplateWithContextMutex.RUnlock()
	fake.validateTemplateRequestMutex.RLock()
	defer fake.validateTemplateRequestMutex.RUnlock()
	fake.waitUntilChangeSetCreateCompleteMutex.RLock()
	defer fake.waitUntilChangeSetCreateCompleteMutex.RUnlock()
	fake.waitUntilChangeSetCreateCompleteWithContextMutex.RLock()
	defer fake.waitUntilChangeSetCreateCompleteWithContextMutex.RUnlock()
	fake.waitUntilStackCreateCompleteMutex.RLock()
	defer fake.waitUntilStackCreateCompleteMutex.RUnlock()
	fake.waitUntilStackCreateCompleteWithContextMutex.RLock()
	defer fake.waitUntilStackCreateCompleteWithContextMutex.RUnlock()
	fake.waitUntilStackDeleteCompleteMutex.RLock()
	defer fake.waitUntilStackDeleteCompleteMutex.RUnlock()
	fake.waitUntilStackDeleteCompleteWithContextMutex.RLock()
	defer fake.waitUntilStackDeleteCompleteWithContextMutex.RUnlock()
	fake.waitUntilStackExistsMutex.RLock()
	defer fake.waitUntilStackExistsMutex.RUnlock()
	fake.waitUntilStackExistsWithContextMutex.RLock()
	defer fake.waitUntilStackExistsWithContextMutex.RUnlock()
	fake.waitUntilStackUpdateCompleteMutex.RLock()
	defer fake.waitUntilStackUpdateCompleteMutex.RUnlock()
	fake.waitUntilStackUpdateCompleteWithContextMutex.RLock()
	defer fake.waitUntilStackUpdateCompleteWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCloudFormationAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cloudformationiface.CloudFormationAPI = new(FakeCloudFormationAPI)
